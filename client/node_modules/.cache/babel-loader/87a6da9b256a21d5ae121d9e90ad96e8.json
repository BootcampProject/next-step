{"ast":null,"code":"const express = require('express');\n\nconst path = require('path');\n\nconst db = require('./config/connection'); // const routes = require('./routes');\n// import ApolloServer\n\n\nconst {\n  ApolloServer\n} = require('apollo-server-express');\n\nconst {\n  authMiddleware\n} = require('./utils/auth'); // import our typeDefs and resolvers\n\n\nconst {\n  typeDefs,\n  resolvers\n} = require('./schemas');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\nconst startServer = async () => {\n  // create a new Apollo server and pass in our schema data\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    context: authMiddleware\n  }); // Start the Apollo server\n\n  await server.start(); // integrate our Apollo server with the Express application as middleware\n\n  server.applyMiddleware({\n    app\n  }); // log where we can go to test our GQL API\n\n  console.log(`Use GraphQL at http://localhost:${PORT}${server.graphqlPath}`);\n}; // Initialize the Apollo server\n\n\nstartServer();\napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(express.json()); // if we're in production, serve client/build as static assets\n\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../client/build')));\n} // app.use(routes);\n\n\ndb.once('open', () => {\n  app.listen(PORT, () => console.log(`🌍 Now listening on localhost:${PORT}`));\n});","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/server.js"],"names":["express","require","path","db","ApolloServer","authMiddleware","typeDefs","resolvers","app","PORT","process","env","startServer","server","context","start","applyMiddleware","console","log","graphqlPath","use","urlencoded","extended","json","NODE_ENV","static","join","__dirname","once","listen"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,qBAAD,CAAlB,C,CACA;AAEA;;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAmBH,OAAO,CAAC,uBAAD,CAAhC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAqBJ,OAAO,CAAC,cAAD,CAAlC,C,CAEA;;;AACA,MAAM;AAAEK,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA0BN,OAAO,CAAC,WAAD,CAAvC;;AAEA,MAAMO,GAAG,GAAGR,OAAO,EAAnB;AACA,MAAMS,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;;AAEA,MAAMG,WAAW,GAAG,YAAY;AAC9B;AACA,QAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BE,IAAAA,QAD8B;AAE9BC,IAAAA,SAF8B;AAG9BO,IAAAA,OAAO,EAAET;AAHqB,GAAjB,CAAf,CAF8B,CAQ9B;;AACA,QAAMQ,MAAM,CAACE,KAAP,EAAN,CAT8B,CAW9B;;AACAF,EAAAA,MAAM,CAACG,eAAP,CAAuB;AAAER,IAAAA;AAAF,GAAvB,EAZ8B,CAc9B;;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCT,IAAK,GAAEI,MAAM,CAACM,WAAY,EAAzE;AACD,CAhBD,C,CAkBA;;;AACAP,WAAW;AAEXJ,GAAG,CAACY,GAAJ,CAAQpB,OAAO,CAACqB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAd,GAAG,CAACY,GAAJ,CAAQpB,OAAO,CAACuB,IAAR,EAAR,E,CAEA;;AACA,IAAIb,OAAO,CAACC,GAAR,CAAYa,QAAZ,KAAyB,YAA7B,EAA2C;AACzChB,EAAAA,GAAG,CAACY,GAAJ,CAAQpB,OAAO,CAACyB,MAAR,CAAevB,IAAI,CAACwB,IAAL,CAAUC,SAAV,EAAqB,iBAArB,CAAf,CAAR;AACD,C,CAED;;;AAEAxB,EAAE,CAACyB,IAAH,CAAQ,MAAR,EAAgB,MAAM;AACpBpB,EAAAA,GAAG,CAACqB,MAAJ,CAAWpB,IAAX,EAAiB,MAAMQ,OAAO,CAACC,GAAR,CAAa,iCAAgCT,IAAK,EAAlD,CAAvB;AACD,CAFD","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst db = require('./config/connection');\n// const routes = require('./routes');\n\n// import ApolloServer\nconst { ApolloServer } = require('apollo-server-express');\nconst { authMiddleware } = require('./utils/auth');\n\n// import our typeDefs and resolvers\nconst { typeDefs, resolvers } = require('./schemas');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\nconst startServer = async () => {\n  // create a new Apollo server and pass in our schema data\n  const server = new ApolloServer({ \n    typeDefs, \n    resolvers, \n    context: authMiddleware \n  });\n\n  // Start the Apollo server\n  await server.start();\n\n  // integrate our Apollo server with the Express application as middleware\n  server.applyMiddleware({ app });\n\n  // log where we can go to test our GQL API\n  console.log(`Use GraphQL at http://localhost:${PORT}${server.graphqlPath}`);\n};\n\n// Initialize the Apollo server\nstartServer();\n\napp.use(express.urlencoded({ extended: false }));\napp.use(express.json());\n\n// if we're in production, serve client/build as static assets\nif (process.env.NODE_ENV === 'production') {\n  app.use(express.static(path.join(__dirname, '../client/build')));\n}\n\n// app.use(routes);\n\ndb.once('open', () => {\n  app.listen(PORT, () => console.log(`🌍 Now listening on localhost:${PORT}`));\n});"]},"metadata":{},"sourceType":"script"}