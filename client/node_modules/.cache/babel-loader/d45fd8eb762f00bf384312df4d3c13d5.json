{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dejay\\\\Documents\\\\UofT\\\\Project 3\\\\next-step\\\\next-step\\\\client\\\\src\\\\pages\\\\Details.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useQuestionContext } from \"../utils/GlobalState\";\nimport { UPDATE_QUESTIONS } from \"../utils/actions\";\nimport { QUERY_QUESTIONS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n  const [state, dispatch] = useQuestionContext();\n  const {\n    id\n  } = useParams();\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_QUESTIONS);\n  const {\n    questions\n  } = state;\n  useEffect(() => {\n    // already in global store\n    if (questions.length) {\n      setCurrentQuestion(questions.find(question => question._id === id));\n    } // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_QUESTIONS,\n        questions: data.questions\n      });\n      data.questions.forEach(question => {\n        idbPromise('questions', 'put', question);\n      });\n    } // get cache from idb\n    else if (!loading) {\n      idbPromise('questions', 'get').then(indexedQuestions => {\n        dispatch({\n          type: UPDATE_QUESTIONS,\n          products: indexedQuestions\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, currentQuestion ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"\\u2190 Back to Home\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, currentQuestion.question), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, currentQuestion.answer)) : null);\n}\n\n;\nexport default Detail;","map":{"version":3,"sources":["C:/Users/dejay/Documents/UofT/Project 3/next-step/next-step/client/src/pages/Details.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","useQuestionContext","UPDATE_QUESTIONS","QUERY_QUESTIONS","idbPromise","Detail","state","dispatch","id","currentQuestion","setCurrentQuestion","loading","data","questions","length","find","question","_id","type","forEach","then","indexedQuestions","products","answer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,SAASC,MAAT,GAAkB;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,kBAAkB,EAA5C;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAST,SAAS,EAAxB;AAEA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM;AAAEc,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBZ,QAAQ,CAACG,eAAD,CAAlC;AAEA,QAAM;AAAEU,IAAAA;AAAF,MAAeP,KAArB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIiB,SAAS,CAACC,MAAd,EAAsB;AACpBJ,MAAAA,kBAAkB,CAACG,SAAS,CAACE,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,GAAT,KAAiBT,EAA5C,CAAD,CAAlB;AACD,KAFD,CAGA;AAHA,SAIK,IAAII,IAAJ,EAAU;AACbL,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEhB,gBADC;AAEPW,QAAAA,SAAS,EAAED,IAAI,CAACC;AAFT,OAAD,CAAR;AAKAD,MAAAA,IAAI,CAACC,SAAL,CAAeM,OAAf,CAAwBH,QAAD,IAAc;AACnCZ,QAAAA,UAAU,CAAC,WAAD,EAAc,KAAd,EAAqBY,QAArB,CAAV;AACD,OAFD;AAGD,KATI,CAUL;AAVK,SAWA,IAAI,CAACL,OAAL,EAAc;AACjBP,MAAAA,UAAU,CAAC,WAAD,EAAc,KAAd,CAAV,CAA+BgB,IAA/B,CAAqCC,gBAAD,IAAsB;AACxDd,QAAAA,QAAQ,CAAC;AACPW,UAAAA,IAAI,EAAEhB,gBADC;AAEPoB,UAAAA,QAAQ,EAAED;AAFH,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAzBQ,EAyBN,CAACC,QAAD,EAAWV,IAAX,EAAiBD,OAAjB,EAA0BJ,QAA1B,EAAoCC,EAApC,CAzBM,CAAT;AA4BA,sBACE,0CACGC,eAAe,gBACd;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,eAAe,CAACO,QAArB,CALF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,eAAe,CAACc,MADnB,CAPF,CADc,GAaZ,IAdN,CADF;AAkBD;;AAAA;AAED,eAAelB,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport { useQuestionContext } from \"../utils/GlobalState\";\r\nimport {UPDATE_QUESTIONS} from \"../utils/actions\";\r\nimport { QUERY_QUESTIONS } from \"../utils/queries\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useQuestionContext();\r\n  const { id } = useParams();\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_QUESTIONS);\r\n\r\n  const { questions} = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (questions.length) {\r\n      setCurrentQuestion(questions.find(question => question._id === id));\r\n    } \r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_QUESTIONS,\r\n        questions: data.questions\r\n      });\r\n\r\n      data.questions.forEach((question) => {\r\n        idbPromise('questions', 'put', question);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('questions', 'get').then((indexedQuestions) => {\r\n        dispatch({\r\n          type: UPDATE_QUESTIONS,\r\n          products: indexedQuestions\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n\r\n  return (\r\n    <>\r\n      {currentQuestion ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ‚Üê Back to Home\r\n          </Link>\r\n\r\n          <h2>{currentQuestion.question}</h2>\r\n\r\n          <p>\r\n            {currentQuestion.answer}\r\n          </p>\r\n          \r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n"]},"metadata":{},"sourceType":"module"}