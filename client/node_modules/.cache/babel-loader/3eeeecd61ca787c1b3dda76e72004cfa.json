{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerBase = void 0;\n\nconst graphql_tools_1 = require(\"graphql-tools\");\n\nconst net_1 = require(\"net\");\n\nconst tls_1 = require(\"tls\");\n\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\n\nconst graphql_1 = require(\"graphql\");\n\nconst resolvable_1 = __importDefault(require(\"@josephg/resolvable\"));\n\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\n\nconst runtimeSupportsUploads_1 = __importDefault(require(\"./utils/runtimeSupportsUploads\"));\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst index_1 = require(\"./index\");\n\nconst playground_1 = require(\"./playground\");\n\nconst schemaHash_1 = require(\"./utils/schemaHash\");\n\nconst isDirectiveDefined_1 = require(\"./utils/isDirectiveDefined\");\n\nconst requestPipeline_1 = require(\"./requestPipeline\");\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst apollo_tools_1 = require(\"@apollographql/apollo-tools\");\n\nconst apollo_tracing_1 = require(\"apollo-tracing\");\n\nconst apollo_cache_control_1 = require(\"apollo-cache-control\");\n\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\n\nconst isNodeLike_1 = __importDefault(require(\"./utils/isNodeLike\"));\n\nconst determineApolloConfig_1 = require(\"./determineApolloConfig\");\n\nconst plugin_1 = require(\"./plugin\");\n\nconst internalPlugin_1 = require(\"./plugin/internalPlugin\");\n\nconst NoIntrospection = context => ({\n  Field(node) {\n    if (node.name.value === '__schema' || node.name.value === '__type') {\n      context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', [node]));\n    }\n  }\n\n});\n\nconst forbidUploadsForTesting = process && process.env.NODE_ENV === 'test' && !runtimeSupportsUploads_1.default;\n\nfunction approximateObjectSize(obj) {\n  return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n}\n\nclass UnreachableCaseError extends Error {\n  constructor(val) {\n    super(`Unreachable case: ${val}`);\n  }\n\n}\n\nclass ApolloServerBase {\n  constructor(config) {\n    this.graphqlPath = '/graphql';\n    this.requestOptions = Object.create(null);\n    this.plugins = [];\n    this.toDispose = new Set();\n    this.toDisposeLast = new Set();\n    if (!config) throw new Error('ApolloServer requires options.');\n    this.config = config;\n\n    const {\n      context,\n      resolvers,\n      schema,\n      schemaDirectives,\n      modules,\n      typeDefs,\n      parseOptions = {},\n      introspection,\n      mocks,\n      mockEntireSchema,\n      extensions,\n      subscriptions,\n      uploads,\n      playground,\n      plugins,\n      gateway,\n      cacheControl,\n      experimental_approximateDocumentStoreMiB,\n      stopOnTerminationSignals,\n      apollo,\n      engine\n    } = config,\n          requestOptions = __rest(config, [\"context\", \"resolvers\", \"schema\", \"schemaDirectives\", \"modules\", \"typeDefs\", \"parseOptions\", \"introspection\", \"mocks\", \"mockEntireSchema\", \"extensions\", \"subscriptions\", \"uploads\", \"playground\", \"plugins\", \"gateway\", \"cacheControl\", \"experimental_approximateDocumentStoreMiB\", \"stopOnTerminationSignals\", \"apollo\", \"engine\"]);\n\n    if (engine !== undefined && apollo) {\n      throw new Error('You cannot provide both `engine` and `apollo` to `new ApolloServer()`. ' + 'For details on how to migrate all of your options out of `engine`, see ' + 'https://go.apollo.dev/s/migration-engine-plugins');\n    }\n\n    if (config.logger) {\n      this.logger = config.logger;\n    } else {\n      const loglevelLogger = loglevel_1.default.getLogger('apollo-server');\n\n      if (this.config.debug === true) {\n        loglevelLogger.setLevel(loglevel_1.default.levels.DEBUG);\n      } else {\n        loglevelLogger.setLevel(loglevel_1.default.levels.INFO);\n      }\n\n      this.logger = loglevelLogger;\n    }\n\n    this.apolloConfig = determineApolloConfig_1.determineApolloConfig(apollo, engine, this.logger);\n\n    if (gateway && (modules || schema || typeDefs || resolvers)) {\n      throw new Error('Cannot define both `gateway` and any of: `modules`, `schema`, `typeDefs`, or `resolvers`');\n    }\n\n    this.parseOptions = parseOptions;\n    this.context = context;\n    const isDev = process.env.NODE_ENV !== 'production';\n\n    if (typeof introspection === 'boolean' && !introspection || introspection === undefined && !isDev) {\n      const noIntro = [NoIntrospection];\n      requestOptions.validationRules = requestOptions.validationRules ? requestOptions.validationRules.concat(noIntro) : noIntro;\n    }\n\n    if (!requestOptions.cache) {\n      requestOptions.cache = new apollo_server_caching_1.InMemoryLRUCache();\n    }\n\n    if (requestOptions.persistedQueries !== false) {\n      const _a = requestOptions.persistedQueries || Object.create(null),\n            {\n        cache: apqCache = requestOptions.cache\n      } = _a,\n            apqOtherOptions = __rest(_a, [\"cache\"]);\n\n      requestOptions.persistedQueries = Object.assign({\n        cache: new apollo_server_caching_1.PrefixingKeyValueCache(apqCache, requestPipeline_1.APQ_CACHE_PREFIX)\n      }, apqOtherOptions);\n    } else {\n      delete requestOptions.persistedQueries;\n    }\n\n    this.requestOptions = requestOptions;\n\n    if (uploads !== false && !forbidUploadsForTesting) {\n      if (this.supportsUploads()) {\n        if (!runtimeSupportsUploads_1.default) {\n          printNodeFileUploadsMessage(this.logger);\n          throw new Error('`graphql-upload` is no longer supported on Node.js < v8.5.0.  ' + 'See https://bit.ly/gql-upload-node-6.');\n        }\n\n        if (uploads === true || typeof uploads === 'undefined') {\n          this.uploadsConfig = {};\n        } else {\n          this.uploadsConfig = uploads;\n        }\n      } else if (uploads) {\n        throw new Error('This implementation of ApolloServer does not support file uploads because the environment cannot accept multi-part forms');\n      }\n    }\n\n    if (gateway && subscriptions !== false) {\n      throw new Error(['Subscriptions are not yet compatible with the gateway.', \"Set `subscriptions: false` in Apollo Server's constructor to\", 'explicitly disable subscriptions (which are on by default)', 'and allow for gateway functionality.'].join(' '));\n    } else if (subscriptions !== false) {\n      if (this.supportsSubscriptions()) {\n        if (subscriptions === true || typeof subscriptions === 'undefined') {\n          this.subscriptionServerOptions = {\n            path: this.graphqlPath\n          };\n        } else if (typeof subscriptions === 'string') {\n          this.subscriptionServerOptions = {\n            path: subscriptions\n          };\n        } else {\n          this.subscriptionServerOptions = Object.assign({\n            path: this.graphqlPath\n          }, subscriptions);\n        }\n\n        this.subscriptionsPath = this.subscriptionServerOptions.path;\n      } else if (subscriptions) {\n        throw new Error('This implementation of ApolloServer does not support GraphQL subscriptions.');\n      }\n    }\n\n    this.playgroundOptions = playground_1.createPlaygroundOptions(playground);\n    this.ensurePluginInstantiation(plugins);\n\n    if (typeof stopOnTerminationSignals === 'boolean' ? stopOnTerminationSignals : typeof engine === 'object' && typeof engine.handleSignals === 'boolean' ? engine.handleSignals : isNodeLike_1.default && process.env.NODE_ENV !== 'test') {\n      const signals = ['SIGINT', 'SIGTERM'];\n      let receivedSignal = false;\n      signals.forEach(signal => {\n        const handler = () => __awaiter(this, void 0, void 0, function* () {\n          if (receivedSignal) {\n            return;\n          }\n\n          receivedSignal = true;\n\n          try {\n            yield this.stop();\n          } catch (e) {\n            this.logger.error(`stop() threw during ${signal} shutdown`);\n            this.logger.error(e);\n            process.exit(1);\n          }\n\n          process.kill(process.pid, signal);\n        });\n\n        process.on(signal, handler);\n        this.toDisposeLast.add(() => __awaiter(this, void 0, void 0, function* () {\n          process.removeListener(signal, handler);\n        }));\n      });\n    }\n\n    if (gateway) {\n      this.state = {\n        phase: 'initialized with gateway',\n        gateway\n      };\n      this.requestOptions.executor = gateway.executor;\n    } else {\n      this.state = {\n        phase: 'initialized with schema',\n        schemaDerivedData: this.generateSchemaDerivedData(this.constructSchema())\n      };\n      this.schema = this.state.schemaDerivedData.schema;\n    }\n\n    if (this.serverlessFramework()) {\n      this.ensureStarting();\n    }\n  }\n\n  setGraphQLPath(path) {\n    this.graphqlPath = path;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.serverlessFramework()) {\n        throw new Error('When using an ApolloServer subclass from a serverless framework ' + \"package, you don't need to call start(); just call createHandler().\");\n      }\n\n      return yield this._start();\n    });\n  }\n\n  _start() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const initialState = this.state;\n\n      if (initialState.phase !== 'initialized with gateway' && initialState.phase !== 'initialized with schema') {\n        throw new Error(`called start() with surprising state ${initialState.phase}`);\n      }\n\n      const barrier = resolvable_1.default();\n      this.state = {\n        phase: 'starting',\n        barrier\n      };\n      let loadedSchema = false;\n\n      try {\n        const schemaDerivedData = initialState.phase === 'initialized with schema' ? initialState.schemaDerivedData : this.generateSchemaDerivedData(yield this.startGatewayAndLoadSchema(initialState.gateway));\n        loadedSchema = true;\n        this.state = {\n          phase: 'invoking serverWillStart',\n          barrier,\n          schemaDerivedData\n        };\n        const service = {\n          logger: this.logger,\n          schema: schemaDerivedData.schema,\n          schemaHash: schemaDerivedData.schemaHash,\n          apollo: this.apolloConfig,\n          serverlessFramework: this.serverlessFramework(),\n          engine: {\n            serviceID: this.apolloConfig.graphId,\n            apiKeyHash: this.apolloConfig.keyHash\n          }\n        };\n\n        if ((_a = this.requestOptions.persistedQueries) === null || _a === void 0 ? void 0 : _a.cache) {\n          service.persistedQueries = {\n            cache: this.requestOptions.persistedQueries.cache\n          };\n        }\n\n        const serverListeners = (yield Promise.all(this.plugins.map(plugin => plugin.serverWillStart && plugin.serverWillStart(service)))).filter(maybeServerListener => typeof maybeServerListener === 'object' && !!maybeServerListener.serverWillStop);\n        this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () {\n          yield Promise.all(serverListeners.map(_ref => {\n            let {\n              serverWillStop\n            } = _ref;\n            return serverWillStop === null || serverWillStop === void 0 ? void 0 : serverWillStop();\n          }));\n        }));\n        this.state = {\n          phase: 'started',\n          schemaDerivedData\n        };\n      } catch (error) {\n        this.state = {\n          phase: 'failed to start',\n          error,\n          loadedSchema\n        };\n        throw error;\n      } finally {\n        barrier.resolve();\n      }\n    });\n  }\n\n  willStart() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.ensureStarting();\n    });\n  }\n\n  ensureStarted() {\n    return __awaiter(this, void 0, void 0, function* () {\n      while (true) {\n        switch (this.state.phase) {\n          case 'initialized with gateway':\n          case 'initialized with schema':\n            try {\n              yield this._start();\n            } catch (_a) {}\n\n            break;\n\n          case 'starting':\n          case 'invoking serverWillStart':\n            yield this.state.barrier;\n            break;\n\n          case 'failed to start':\n            this.logStartupError(this.state.error);\n            throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n\n          case 'started':\n            return this.state.schemaDerivedData;\n\n          case 'stopping':\n            throw new Error('Cannot execute GraphQL operations while the server is stopping.');\n\n          case 'stopped':\n            throw new Error('Cannot execute GraphQL operations after the server has stopped.');\n\n          default:\n            throw new UnreachableCaseError(this.state);\n        }\n      }\n    });\n  }\n\n  ensureStarting() {\n    if (this.state.phase === 'initialized with gateway' || this.state.phase === 'initialized with schema') {\n      this._start().catch(e => this.logStartupError(e));\n    }\n  }\n\n  logStartupError(err) {\n    const prelude = this.serverlessFramework() ? 'An error occurred during Apollo Server startup.' : 'Apollo Server was started implicitly and an error occurred during startup. ' + '(Consider calling `await server.start()` immediately after ' + '`server = new ApolloServer()` so you can handle these errors directly before ' + 'starting your web server.)';\n    this.logger.error(prelude + ' All GraphQL requests will now fail. The startup error ' + 'was: ' + (err && err.message || err));\n  }\n\n  startGatewayAndLoadSchema(gateway) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const unsubscriber = gateway.onSchemaChange(schema => {\n        if (this.state.phase === 'started') {\n          this.state.schemaDerivedData = this.generateSchemaDerivedData(schema);\n        }\n      });\n      this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () {\n        return unsubscriber();\n      }));\n      const engineConfig = this.apolloConfig.keyHash && this.apolloConfig.graphId ? {\n        apiKeyHash: this.apolloConfig.keyHash,\n        graphId: this.apolloConfig.graphId,\n        graphVariant: this.apolloConfig.graphVariant\n      } : undefined;\n      const config = yield gateway.load({\n        apollo: this.apolloConfig,\n        engine: engineConfig\n      });\n      this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () {\n        var _a;\n\n        return yield (_a = gateway.stop) === null || _a === void 0 ? void 0 : _a.call(gateway);\n      }));\n      return config.schema;\n    });\n  }\n\n  constructSchema() {\n    const {\n      schema,\n      modules,\n      typeDefs,\n      resolvers,\n      schemaDirectives,\n      parseOptions\n    } = this.config;\n\n    if (schema) {\n      return schema;\n    }\n\n    if (modules) {\n      const {\n        schema,\n        errors\n      } = apollo_tools_1.buildServiceDefinition(modules);\n\n      if (errors && errors.length > 0) {\n        throw new Error(errors.map(error => error.message).join('\\n\\n'));\n      }\n\n      return schema;\n    }\n\n    if (!typeDefs) {\n      throw Error('Apollo Server requires either an existing schema, modules or typeDefs');\n    }\n\n    const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n\n    if (!isDirectiveDefined_1.isDirectiveDefined(augmentedTypeDefs, 'cacheControl')) {\n      augmentedTypeDefs.push(index_1.gql`\n          enum CacheControlScope {\n            PUBLIC\n            PRIVATE\n          }\n\n          directive @cacheControl(\n            maxAge: Int\n            scope: CacheControlScope\n          ) on FIELD_DEFINITION | OBJECT | INTERFACE\n        `);\n    }\n\n    if (this.uploadsConfig) {\n      const {\n        GraphQLUpload\n      } = require('@apollographql/graphql-upload-8-fork');\n\n      if (Array.isArray(resolvers)) {\n        if (resolvers.every(resolver => !resolver.Upload)) {\n          resolvers.push({\n            Upload: GraphQLUpload\n          });\n        }\n      } else {\n        if (resolvers && !resolvers.Upload) {\n          resolvers.Upload = GraphQLUpload;\n        }\n      }\n\n      augmentedTypeDefs.push(index_1.gql`\n          scalar Upload\n        `);\n    }\n\n    return graphql_tools_1.makeExecutableSchema({\n      typeDefs: augmentedTypeDefs,\n      schemaDirectives,\n      resolvers,\n      parseOptions\n    });\n  }\n\n  generateSchemaDerivedData(schema) {\n    const schemaHash = schemaHash_1.generateSchemaHash(schema);\n    const {\n      mocks,\n      mockEntireSchema,\n      extensions: _extensions\n    } = this.config;\n\n    if (mocks || typeof mockEntireSchema !== 'undefined' && mocks !== false) {\n      graphql_tools_1.addMockFunctionsToSchema({\n        schema,\n        mocks: typeof mocks === 'boolean' || typeof mocks === 'undefined' ? {} : mocks,\n        preserveResolvers: typeof mockEntireSchema === 'undefined' ? false : !mockEntireSchema\n      });\n    }\n\n    const extensions = [];\n    extensions.push(...(_extensions || []));\n    const documentStore = this.initializeDocumentStore();\n    return {\n      schema,\n      schemaHash,\n      extensions,\n      documentStore\n    };\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state.phase === 'stopped') {\n        if (this.state.stopError) {\n          throw this.state.stopError;\n        }\n\n        return;\n      }\n\n      if (this.state.phase === 'stopping') {\n        yield this.state.barrier;\n        const state = this.state;\n\n        if (state.phase !== 'stopped') {\n          throw Error(`Surprising post-stopping state ${state.phase}`);\n        }\n\n        if (state.stopError) {\n          throw state.stopError;\n        }\n\n        return;\n      }\n\n      this.state = {\n        phase: 'stopping',\n        barrier: resolvable_1.default()\n      };\n\n      try {\n        yield Promise.all([...this.toDispose].map(dispose => dispose()));\n        if (this.subscriptionServer) this.subscriptionServer.close();\n        yield Promise.all([...this.toDisposeLast].map(dispose => dispose()));\n      } catch (stopError) {\n        this.state = {\n          phase: 'stopped',\n          stopError\n        };\n        return;\n      }\n\n      this.state = {\n        phase: 'stopped',\n        stopError: null\n      };\n    });\n  }\n\n  installSubscriptionHandlers(server) {\n    if (!this.subscriptionServerOptions) {\n      if (this.config.gateway) {\n        throw Error('Subscriptions are not supported when operating as a gateway');\n      }\n\n      if (this.supportsSubscriptions()) {\n        throw Error('Subscriptions are disabled, due to subscriptions set to false in the ApolloServer constructor');\n      } else {\n        throw Error('Subscriptions are not supported, choose an integration, such as apollo-server-express that allows persistent connections');\n      }\n    }\n\n    const {\n      SubscriptionServer\n    } = require('subscriptions-transport-ws');\n\n    const {\n      onDisconnect,\n      onConnect,\n      keepAlive,\n      path\n    } = this.subscriptionServerOptions;\n    let schema;\n\n    switch (this.state.phase) {\n      case 'initialized with schema':\n      case 'invoking serverWillStart':\n      case 'started':\n        schema = this.state.schemaDerivedData.schema;\n        break;\n\n      case 'initialized with gateway':\n      case 'starting':\n      case 'failed to start':\n      case 'stopping':\n      case 'stopped':\n        throw new Error(`Can't install subscription handlers when state is ${this.state.phase}`);\n\n      default:\n        throw new UnreachableCaseError(this.state);\n    }\n\n    this.subscriptionServer = SubscriptionServer.create({\n      schema,\n      execute: graphql_1.execute,\n      subscribe: graphql_1.subscribe,\n      onConnect: onConnect ? onConnect : connectionParams => Object.assign({}, connectionParams),\n      onDisconnect: onDisconnect,\n      onOperation: (message, connection) => __awaiter(this, void 0, void 0, function* () {\n        connection.formatResponse = value => Object.assign(Object.assign({}, value), {\n          errors: value.errors && apollo_server_errors_1.formatApolloErrors([...value.errors], {\n            formatter: this.requestOptions.formatError,\n            debug: this.requestOptions.debug\n          })\n        });\n\n        connection.formatError = this.requestOptions.formatError;\n        let context = this.context ? this.context : {\n          connection\n        };\n\n        try {\n          context = typeof this.context === 'function' ? yield this.context({\n            connection,\n            payload: message.payload\n          }) : context;\n        } catch (e) {\n          throw apollo_server_errors_1.formatApolloErrors([e], {\n            formatter: this.requestOptions.formatError,\n            debug: this.requestOptions.debug\n          })[0];\n        }\n\n        return Object.assign(Object.assign({}, connection), {\n          context\n        });\n      }),\n      keepAlive,\n      validationRules: this.requestOptions.validationRules\n    }, server instanceof net_1.Server || server instanceof tls_1.Server ? {\n      server,\n      path\n    } : server);\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  supportsUploads() {\n    return false;\n  }\n\n  serverlessFramework() {\n    return false;\n  }\n\n  ensurePluginInstantiation() {\n    let plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var _a, _b;\n\n    const pluginsToInit = [];\n\n    if (this.config.tracing) {\n      pluginsToInit.push(apollo_tracing_1.plugin());\n    }\n\n    if (this.config.cacheControl !== false) {\n      let cacheControlOptions = {};\n\n      if (typeof this.config.cacheControl === 'boolean' && this.config.cacheControl === true) {\n        cacheControlOptions = {\n          stripFormattedExtensions: false,\n          calculateHttpHeaders: false,\n          defaultMaxAge: 0\n        };\n      } else {\n        cacheControlOptions = Object.assign({\n          stripFormattedExtensions: true,\n          calculateHttpHeaders: true,\n          defaultMaxAge: 0\n        }, this.config.cacheControl);\n      }\n\n      pluginsToInit.push(apollo_cache_control_1.plugin(cacheControlOptions));\n    }\n\n    pluginsToInit.push(...plugins);\n    this.plugins = pluginsToInit.map(plugin => {\n      if (typeof plugin === 'function') {\n        return plugin();\n      }\n\n      return plugin;\n    });\n\n    const alreadyHavePluginWithInternalId = id => this.plugins.some(p => internalPlugin_1.pluginIsInternal(p) && p.__internal_plugin_id__() === id);\n\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n      const {\n        engine\n      } = this.config;\n      const disabledViaLegacyOption = engine === false || typeof engine === 'object' && engine.reportTiming === false;\n\n      if (alreadyHavePlugin) {\n        if (engine !== undefined) {\n          throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" + 'creating an ApolloServerPluginUsageReporting plugin. See ' + 'https://go.apollo.dev/s/migration-engine-plugins');\n        }\n      } else if (this.apolloConfig.key && !disabledViaLegacyOption) {\n        this.plugins.unshift(typeof engine === 'object' ? plugin_1.ApolloServerPluginUsageReportingFromLegacyOptions(engine) : plugin_1.ApolloServerPluginUsageReporting());\n      }\n    }\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n      const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n      const {\n        engine\n      } = this.config;\n      const enabledViaLegacyOption = typeof engine === 'object' && (engine.reportSchema || engine.experimental_schemaReporting);\n\n      if (alreadyHavePlugin || enabledViaEnvVar || enabledViaLegacyOption) {\n        if (this.config.gateway) {\n          throw new Error([\"Schema reporting is not yet compatible with the gateway. If you're\", 'interested in using schema reporting with the gateway, please', 'contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n        }\n      }\n\n      if (alreadyHavePlugin) {\n        if (engine !== undefined) {\n          throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" + 'creating an ApolloServerPluginSchemaReporting plugin. See ' + 'https://go.apollo.dev/s/migration-engine-plugins');\n        }\n      } else if (!this.apolloConfig.key) {\n        if (enabledViaEnvVar) {\n          throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" + 'environment variable to true, but you also need to provide your ' + 'Apollo API key, via the APOLLO_KEY environment ' + 'variable or via `new ApolloServer({apollo: {key})');\n        }\n\n        if (enabledViaLegacyOption) {\n          throw new Error(\"You've enabled schema reporting in the `engine` argument to `new ApolloServer()`, \" + 'but you also need to provide your Apollo API key, via the APOLLO_KEY environment ' + 'variable or via `new ApolloServer({apollo: {key})');\n        }\n      } else if (enabledViaEnvVar || enabledViaLegacyOption) {\n        const options = {};\n\n        if (typeof engine === 'object') {\n          options.initialDelayMaxMs = (_a = engine.schemaReportingInitialDelayMaxMs) !== null && _a !== void 0 ? _a : engine.experimental_schemaReportingInitialDelayMaxMs;\n          options.overrideReportedSchema = (_b = engine.overrideReportedSchema) !== null && _b !== void 0 ? _b : engine.experimental_overrideReportedSchema;\n          options.endpointUrl = engine.schemaReportingUrl;\n        }\n\n        this.plugins.push(plugin_1.ApolloServerPluginSchemaReporting(options));\n      }\n    }\n    {\n      const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n      const {\n        engine\n      } = this.config;\n\n      if (alreadyHavePlugin) {\n        if (engine !== undefined) {\n          throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" + 'creating an ApolloServerPluginInlineTrace plugin. See ' + 'https://go.apollo.dev/s/migration-engine-plugins');\n        }\n      } else if (this.config.engine !== false) {\n        const options = {\n          __onlyIfSchemaIsFederated: true\n        };\n\n        if (typeof engine === 'object') {\n          options.rewriteError = engine.rewriteError;\n        }\n\n        this.plugins.push(plugin_1.ApolloServerPluginInlineTrace(options));\n      }\n    }\n  }\n\n  initializeDocumentStore() {\n    return new apollo_server_caching_1.InMemoryLRUCache({\n      maxSize: Math.pow(2, 20) * (this.experimental_approximateDocumentStoreMiB || 30),\n      sizeCalculator: approximateObjectSize\n    });\n  }\n\n  graphQLServerOptions(integrationContextArgument) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        schema,\n        schemaHash,\n        documentStore,\n        extensions\n      } = yield this.ensureStarted();\n      let context = this.context ? this.context : {};\n\n      try {\n        context = typeof this.context === 'function' ? yield this.context(integrationContextArgument || {}) : context;\n      } catch (error) {\n        context = () => {\n          throw error;\n        };\n      }\n\n      return Object.assign({\n        schema,\n        schemaHash,\n        logger: this.logger,\n        plugins: this.plugins,\n        documentStore,\n        extensions,\n        context,\n        persistedQueries: this.requestOptions.persistedQueries,\n        fieldResolver: this.requestOptions.fieldResolver,\n        parseOptions: this.parseOptions\n      }, this.requestOptions);\n    });\n  }\n\n  executeOperation(request, integrationContextArgument) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const options = yield this.graphQLServerOptions(integrationContextArgument);\n\n      if (typeof options.context === 'function') {\n        options.context = options.context();\n      } else if (typeof options.context === 'object') {\n        options.context = runHttpQuery_1.cloneObject(options.context);\n      }\n\n      const requestCtx = {\n        logger: this.logger,\n        schema: options.schema,\n        schemaHash: options.schemaHash,\n        request: Object.assign(Object.assign({}, request), {\n          query: request.query && typeof request.query !== 'string' ? graphql_1.print(request.query) : request.query\n        }),\n        context: options.context || Object.create(null),\n        cache: options.cache,\n        metrics: {},\n        response: {\n          http: {\n            headers: new apollo_server_env_1.Headers()\n          }\n        },\n        debug: options.debug\n      };\n      return requestPipeline_1.processGraphQLRequest(options, requestCtx);\n    });\n  }\n\n}\n\nexports.ApolloServerBase = ApolloServerBase;\n\nfunction printNodeFileUploadsMessage(logger) {\n  logger.error(['*****************************************************************', '*                                                               *', '* ERROR! Manual intervention is necessary for Node.js < v8.5.0! *', '*                                                               *', '*****************************************************************', '', 'The third-party `graphql-upload` package, which is used to implement', 'file uploads in Apollo Server 2.x, no longer supports Node.js LTS', 'versions prior to Node.js v8.5.0.', '', 'Deployments which NEED file upload capabilities should update to', 'Node.js >= v8.5.0 to continue using uploads.', '', 'If this server DOES NOT NEED file uploads and wishes to continue', 'using this version of Node.js, uploads can be disabled by adding:', '', '  uploads: false,', '', '...to the options for Apollo Server and re-deploying the server.', '', 'For more information, see https://bit.ly/gql-upload-node-6.', ''].join('\\n'));\n}","map":{"version":3,"sources":["../src/ApolloServer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServerBase = void 0;\nconst graphql_tools_1 = require(\"graphql-tools\");\nconst net_1 = require(\"net\");\nconst tls_1 = require(\"tls\");\nconst loglevel_1 = __importDefault(require(\"loglevel\"));\nconst graphql_1 = require(\"graphql\");\nconst resolvable_1 = __importDefault(require(\"@josephg/resolvable\"));\nconst apollo_server_caching_1 = require(\"apollo-server-caching\");\nconst runtimeSupportsUploads_1 = __importDefault(require(\"./utils/runtimeSupportsUploads\"));\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst index_1 = require(\"./index\");\nconst playground_1 = require(\"./playground\");\nconst schemaHash_1 = require(\"./utils/schemaHash\");\nconst isDirectiveDefined_1 = require(\"./utils/isDirectiveDefined\");\nconst requestPipeline_1 = require(\"./requestPipeline\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst apollo_tools_1 = require(\"@apollographql/apollo-tools\");\nconst apollo_tracing_1 = require(\"apollo-tracing\");\nconst apollo_cache_control_1 = require(\"apollo-cache-control\");\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\nconst isNodeLike_1 = __importDefault(require(\"./utils/isNodeLike\"));\nconst determineApolloConfig_1 = require(\"./determineApolloConfig\");\nconst plugin_1 = require(\"./plugin\");\nconst internalPlugin_1 = require(\"./plugin/internalPlugin\");\nconst NoIntrospection = (context) => ({\n    Field(node) {\n        if (node.name.value === '__schema' || node.name.value === '__type') {\n            context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', [node]));\n        }\n    },\n});\nconst forbidUploadsForTesting = process && process.env.NODE_ENV === 'test' && !runtimeSupportsUploads_1.default;\nfunction approximateObjectSize(obj) {\n    return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n}\nclass UnreachableCaseError extends Error {\n    constructor(val) {\n        super(`Unreachable case: ${val}`);\n    }\n}\nclass ApolloServerBase {\n    constructor(config) {\n        this.graphqlPath = '/graphql';\n        this.requestOptions = Object.create(null);\n        this.plugins = [];\n        this.toDispose = new Set();\n        this.toDisposeLast = new Set();\n        if (!config)\n            throw new Error('ApolloServer requires options.');\n        this.config = config;\n        const { context, resolvers, schema, schemaDirectives, modules, typeDefs, parseOptions = {}, introspection, mocks, mockEntireSchema, extensions, subscriptions, uploads, playground, plugins, gateway, cacheControl, experimental_approximateDocumentStoreMiB, stopOnTerminationSignals, apollo, engine } = config, requestOptions = __rest(config, [\"context\", \"resolvers\", \"schema\", \"schemaDirectives\", \"modules\", \"typeDefs\", \"parseOptions\", \"introspection\", \"mocks\", \"mockEntireSchema\", \"extensions\", \"subscriptions\", \"uploads\", \"playground\", \"plugins\", \"gateway\", \"cacheControl\", \"experimental_approximateDocumentStoreMiB\", \"stopOnTerminationSignals\", \"apollo\", \"engine\"]);\n        if (engine !== undefined && apollo) {\n            throw new Error('You cannot provide both `engine` and `apollo` to `new ApolloServer()`. ' +\n                'For details on how to migrate all of your options out of `engine`, see ' +\n                'https://go.apollo.dev/s/migration-engine-plugins');\n        }\n        if (config.logger) {\n            this.logger = config.logger;\n        }\n        else {\n            const loglevelLogger = loglevel_1.default.getLogger('apollo-server');\n            if (this.config.debug === true) {\n                loglevelLogger.setLevel(loglevel_1.default.levels.DEBUG);\n            }\n            else {\n                loglevelLogger.setLevel(loglevel_1.default.levels.INFO);\n            }\n            this.logger = loglevelLogger;\n        }\n        this.apolloConfig = determineApolloConfig_1.determineApolloConfig(apollo, engine, this.logger);\n        if (gateway && (modules || schema || typeDefs || resolvers)) {\n            throw new Error('Cannot define both `gateway` and any of: `modules`, `schema`, `typeDefs`, or `resolvers`');\n        }\n        this.parseOptions = parseOptions;\n        this.context = context;\n        const isDev = process.env.NODE_ENV !== 'production';\n        if ((typeof introspection === 'boolean' && !introspection) ||\n            (introspection === undefined && !isDev)) {\n            const noIntro = [NoIntrospection];\n            requestOptions.validationRules = requestOptions.validationRules\n                ? requestOptions.validationRules.concat(noIntro)\n                : noIntro;\n        }\n        if (!requestOptions.cache) {\n            requestOptions.cache = new apollo_server_caching_1.InMemoryLRUCache();\n        }\n        if (requestOptions.persistedQueries !== false) {\n            const _a = requestOptions.persistedQueries || Object.create(null), { cache: apqCache = requestOptions.cache } = _a, apqOtherOptions = __rest(_a, [\"cache\"]);\n            requestOptions.persistedQueries = Object.assign({ cache: new apollo_server_caching_1.PrefixingKeyValueCache(apqCache, requestPipeline_1.APQ_CACHE_PREFIX) }, apqOtherOptions);\n        }\n        else {\n            delete requestOptions.persistedQueries;\n        }\n        this.requestOptions = requestOptions;\n        if (uploads !== false && !forbidUploadsForTesting) {\n            if (this.supportsUploads()) {\n                if (!runtimeSupportsUploads_1.default) {\n                    printNodeFileUploadsMessage(this.logger);\n                    throw new Error('`graphql-upload` is no longer supported on Node.js < v8.5.0.  ' +\n                        'See https://bit.ly/gql-upload-node-6.');\n                }\n                if (uploads === true || typeof uploads === 'undefined') {\n                    this.uploadsConfig = {};\n                }\n                else {\n                    this.uploadsConfig = uploads;\n                }\n            }\n            else if (uploads) {\n                throw new Error('This implementation of ApolloServer does not support file uploads because the environment cannot accept multi-part forms');\n            }\n        }\n        if (gateway && subscriptions !== false) {\n            throw new Error([\n                'Subscriptions are not yet compatible with the gateway.',\n                \"Set `subscriptions: false` in Apollo Server's constructor to\",\n                'explicitly disable subscriptions (which are on by default)',\n                'and allow for gateway functionality.',\n            ].join(' '));\n        }\n        else if (subscriptions !== false) {\n            if (this.supportsSubscriptions()) {\n                if (subscriptions === true || typeof subscriptions === 'undefined') {\n                    this.subscriptionServerOptions = {\n                        path: this.graphqlPath,\n                    };\n                }\n                else if (typeof subscriptions === 'string') {\n                    this.subscriptionServerOptions = { path: subscriptions };\n                }\n                else {\n                    this.subscriptionServerOptions = Object.assign({ path: this.graphqlPath }, subscriptions);\n                }\n                this.subscriptionsPath = this.subscriptionServerOptions.path;\n            }\n            else if (subscriptions) {\n                throw new Error('This implementation of ApolloServer does not support GraphQL subscriptions.');\n            }\n        }\n        this.playgroundOptions = playground_1.createPlaygroundOptions(playground);\n        this.ensurePluginInstantiation(plugins);\n        if (typeof stopOnTerminationSignals === 'boolean'\n            ? stopOnTerminationSignals\n            : typeof engine === 'object' &&\n                typeof engine.handleSignals === 'boolean'\n                ? engine.handleSignals\n                : isNodeLike_1.default && process.env.NODE_ENV !== 'test') {\n            const signals = ['SIGINT', 'SIGTERM'];\n            let receivedSignal = false;\n            signals.forEach((signal) => {\n                const handler = () => __awaiter(this, void 0, void 0, function* () {\n                    if (receivedSignal) {\n                        return;\n                    }\n                    receivedSignal = true;\n                    try {\n                        yield this.stop();\n                    }\n                    catch (e) {\n                        this.logger.error(`stop() threw during ${signal} shutdown`);\n                        this.logger.error(e);\n                        process.exit(1);\n                    }\n                    process.kill(process.pid, signal);\n                });\n                process.on(signal, handler);\n                this.toDisposeLast.add(() => __awaiter(this, void 0, void 0, function* () {\n                    process.removeListener(signal, handler);\n                }));\n            });\n        }\n        if (gateway) {\n            this.state = { phase: 'initialized with gateway', gateway };\n            this.requestOptions.executor = gateway.executor;\n        }\n        else {\n            this.state = {\n                phase: 'initialized with schema',\n                schemaDerivedData: this.generateSchemaDerivedData(this.constructSchema()),\n            };\n            this.schema = this.state.schemaDerivedData.schema;\n        }\n        if (this.serverlessFramework()) {\n            this.ensureStarting();\n        }\n    }\n    setGraphQLPath(path) {\n        this.graphqlPath = path;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.serverlessFramework()) {\n                throw new Error('When using an ApolloServer subclass from a serverless framework ' +\n                    \"package, you don't need to call start(); just call createHandler().\");\n            }\n            return yield this._start();\n        });\n    }\n    _start() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const initialState = this.state;\n            if (initialState.phase !== 'initialized with gateway' &&\n                initialState.phase !== 'initialized with schema') {\n                throw new Error(`called start() with surprising state ${initialState.phase}`);\n            }\n            const barrier = resolvable_1.default();\n            this.state = { phase: 'starting', barrier };\n            let loadedSchema = false;\n            try {\n                const schemaDerivedData = initialState.phase === 'initialized with schema'\n                    ? initialState.schemaDerivedData\n                    : this.generateSchemaDerivedData(yield this.startGatewayAndLoadSchema(initialState.gateway));\n                loadedSchema = true;\n                this.state = {\n                    phase: 'invoking serverWillStart',\n                    barrier,\n                    schemaDerivedData,\n                };\n                const service = {\n                    logger: this.logger,\n                    schema: schemaDerivedData.schema,\n                    schemaHash: schemaDerivedData.schemaHash,\n                    apollo: this.apolloConfig,\n                    serverlessFramework: this.serverlessFramework(),\n                    engine: {\n                        serviceID: this.apolloConfig.graphId,\n                        apiKeyHash: this.apolloConfig.keyHash,\n                    },\n                };\n                if ((_a = this.requestOptions.persistedQueries) === null || _a === void 0 ? void 0 : _a.cache) {\n                    service.persistedQueries = {\n                        cache: this.requestOptions.persistedQueries.cache,\n                    };\n                }\n                const serverListeners = (yield Promise.all(this.plugins.map((plugin) => plugin.serverWillStart && plugin.serverWillStart(service)))).filter((maybeServerListener) => typeof maybeServerListener === 'object' &&\n                    !!maybeServerListener.serverWillStop);\n                this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () {\n                    yield Promise.all(serverListeners.map(({ serverWillStop }) => serverWillStop === null || serverWillStop === void 0 ? void 0 : serverWillStop()));\n                }));\n                this.state = { phase: 'started', schemaDerivedData };\n            }\n            catch (error) {\n                this.state = { phase: 'failed to start', error, loadedSchema };\n                throw error;\n            }\n            finally {\n                barrier.resolve();\n            }\n        });\n    }\n    willStart() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.ensureStarting();\n        });\n    }\n    ensureStarted() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (true) {\n                switch (this.state.phase) {\n                    case 'initialized with gateway':\n                    case 'initialized with schema':\n                        try {\n                            yield this._start();\n                        }\n                        catch (_a) {\n                        }\n                        break;\n                    case 'starting':\n                    case 'invoking serverWillStart':\n                        yield this.state.barrier;\n                        break;\n                    case 'failed to start':\n                        this.logStartupError(this.state.error);\n                        throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n                    case 'started':\n                        return this.state.schemaDerivedData;\n                    case 'stopping':\n                        throw new Error('Cannot execute GraphQL operations while the server is stopping.');\n                    case 'stopped':\n                        throw new Error('Cannot execute GraphQL operations after the server has stopped.');\n                    default:\n                        throw new UnreachableCaseError(this.state);\n                }\n            }\n        });\n    }\n    ensureStarting() {\n        if (this.state.phase === 'initialized with gateway' ||\n            this.state.phase === 'initialized with schema') {\n            this._start().catch((e) => this.logStartupError(e));\n        }\n    }\n    logStartupError(err) {\n        const prelude = this.serverlessFramework()\n            ? 'An error occurred during Apollo Server startup.'\n            : 'Apollo Server was started implicitly and an error occurred during startup. ' +\n                '(Consider calling `await server.start()` immediately after ' +\n                '`server = new ApolloServer()` so you can handle these errors directly before ' +\n                'starting your web server.)';\n        this.logger.error(prelude +\n            ' All GraphQL requests will now fail. The startup error ' +\n            'was: ' +\n            ((err && err.message) || err));\n    }\n    startGatewayAndLoadSchema(gateway) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const unsubscriber = gateway.onSchemaChange((schema) => {\n                if (this.state.phase === 'started') {\n                    this.state.schemaDerivedData = this.generateSchemaDerivedData(schema);\n                }\n            });\n            this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () { return unsubscriber(); }));\n            const engineConfig = this.apolloConfig.keyHash && this.apolloConfig.graphId\n                ? {\n                    apiKeyHash: this.apolloConfig.keyHash,\n                    graphId: this.apolloConfig.graphId,\n                    graphVariant: this.apolloConfig.graphVariant,\n                }\n                : undefined;\n            const config = yield gateway.load({\n                apollo: this.apolloConfig,\n                engine: engineConfig,\n            });\n            this.toDispose.add(() => __awaiter(this, void 0, void 0, function* () { var _a; return yield ((_a = gateway.stop) === null || _a === void 0 ? void 0 : _a.call(gateway)); }));\n            return config.schema;\n        });\n    }\n    constructSchema() {\n        const { schema, modules, typeDefs, resolvers, schemaDirectives, parseOptions, } = this.config;\n        if (schema) {\n            return schema;\n        }\n        if (modules) {\n            const { schema, errors } = apollo_tools_1.buildServiceDefinition(modules);\n            if (errors && errors.length > 0) {\n                throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n            }\n            return schema;\n        }\n        if (!typeDefs) {\n            throw Error('Apollo Server requires either an existing schema, modules or typeDefs');\n        }\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        if (!isDirectiveDefined_1.isDirectiveDefined(augmentedTypeDefs, 'cacheControl')) {\n            augmentedTypeDefs.push(index_1.gql `\n          enum CacheControlScope {\n            PUBLIC\n            PRIVATE\n          }\n\n          directive @cacheControl(\n            maxAge: Int\n            scope: CacheControlScope\n          ) on FIELD_DEFINITION | OBJECT | INTERFACE\n        `);\n        }\n        if (this.uploadsConfig) {\n            const { GraphQLUpload } = require('@apollographql/graphql-upload-8-fork');\n            if (Array.isArray(resolvers)) {\n                if (resolvers.every((resolver) => !resolver.Upload)) {\n                    resolvers.push({ Upload: GraphQLUpload });\n                }\n            }\n            else {\n                if (resolvers && !resolvers.Upload) {\n                    resolvers.Upload = GraphQLUpload;\n                }\n            }\n            augmentedTypeDefs.push(index_1.gql `\n          scalar Upload\n        `);\n        }\n        return graphql_tools_1.makeExecutableSchema({\n            typeDefs: augmentedTypeDefs,\n            schemaDirectives,\n            resolvers,\n            parseOptions,\n        });\n    }\n    generateSchemaDerivedData(schema) {\n        const schemaHash = schemaHash_1.generateSchemaHash(schema);\n        const { mocks, mockEntireSchema, extensions: _extensions } = this.config;\n        if (mocks || (typeof mockEntireSchema !== 'undefined' && mocks !== false)) {\n            graphql_tools_1.addMockFunctionsToSchema({\n                schema,\n                mocks: typeof mocks === 'boolean' || typeof mocks === 'undefined'\n                    ? {}\n                    : mocks,\n                preserveResolvers: typeof mockEntireSchema === 'undefined' ? false : !mockEntireSchema,\n            });\n        }\n        const extensions = [];\n        extensions.push(...(_extensions || []));\n        const documentStore = this.initializeDocumentStore();\n        return {\n            schema,\n            schemaHash,\n            extensions,\n            documentStore,\n        };\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state.phase === 'stopped') {\n                if (this.state.stopError) {\n                    throw this.state.stopError;\n                }\n                return;\n            }\n            if (this.state.phase === 'stopping') {\n                yield this.state.barrier;\n                const state = this.state;\n                if (state.phase !== 'stopped') {\n                    throw Error(`Surprising post-stopping state ${state.phase}`);\n                }\n                if (state.stopError) {\n                    throw state.stopError;\n                }\n                return;\n            }\n            this.state = { phase: 'stopping', barrier: resolvable_1.default() };\n            try {\n                yield Promise.all([...this.toDispose].map((dispose) => dispose()));\n                if (this.subscriptionServer)\n                    this.subscriptionServer.close();\n                yield Promise.all([...this.toDisposeLast].map((dispose) => dispose()));\n            }\n            catch (stopError) {\n                this.state = { phase: 'stopped', stopError };\n                return;\n            }\n            this.state = { phase: 'stopped', stopError: null };\n        });\n    }\n    installSubscriptionHandlers(server) {\n        if (!this.subscriptionServerOptions) {\n            if (this.config.gateway) {\n                throw Error('Subscriptions are not supported when operating as a gateway');\n            }\n            if (this.supportsSubscriptions()) {\n                throw Error('Subscriptions are disabled, due to subscriptions set to false in the ApolloServer constructor');\n            }\n            else {\n                throw Error('Subscriptions are not supported, choose an integration, such as apollo-server-express that allows persistent connections');\n            }\n        }\n        const { SubscriptionServer } = require('subscriptions-transport-ws');\n        const { onDisconnect, onConnect, keepAlive, path, } = this.subscriptionServerOptions;\n        let schema;\n        switch (this.state.phase) {\n            case 'initialized with schema':\n            case 'invoking serverWillStart':\n            case 'started':\n                schema = this.state.schemaDerivedData.schema;\n                break;\n            case 'initialized with gateway':\n            case 'starting':\n            case 'failed to start':\n            case 'stopping':\n            case 'stopped':\n                throw new Error(`Can't install subscription handlers when state is ${this.state.phase}`);\n            default:\n                throw new UnreachableCaseError(this.state);\n        }\n        this.subscriptionServer = SubscriptionServer.create({\n            schema,\n            execute: graphql_1.execute,\n            subscribe: graphql_1.subscribe,\n            onConnect: onConnect\n                ? onConnect\n                : (connectionParams) => (Object.assign({}, connectionParams)),\n            onDisconnect: onDisconnect,\n            onOperation: (message, connection) => __awaiter(this, void 0, void 0, function* () {\n                connection.formatResponse = (value) => (Object.assign(Object.assign({}, value), { errors: value.errors &&\n                        apollo_server_errors_1.formatApolloErrors([...value.errors], {\n                            formatter: this.requestOptions.formatError,\n                            debug: this.requestOptions.debug,\n                        }) }));\n                connection.formatError = this.requestOptions.formatError;\n                let context = this.context ? this.context : { connection };\n                try {\n                    context =\n                        typeof this.context === 'function'\n                            ? yield this.context({ connection, payload: message.payload })\n                            : context;\n                }\n                catch (e) {\n                    throw apollo_server_errors_1.formatApolloErrors([e], {\n                        formatter: this.requestOptions.formatError,\n                        debug: this.requestOptions.debug,\n                    })[0];\n                }\n                return Object.assign(Object.assign({}, connection), { context });\n            }),\n            keepAlive,\n            validationRules: this.requestOptions.validationRules,\n        }, server instanceof net_1.Server || server instanceof tls_1.Server\n            ? {\n                server,\n                path,\n            }\n            : server);\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    supportsUploads() {\n        return false;\n    }\n    serverlessFramework() {\n        return false;\n    }\n    ensurePluginInstantiation(plugins = []) {\n        var _a, _b;\n        const pluginsToInit = [];\n        if (this.config.tracing) {\n            pluginsToInit.push(apollo_tracing_1.plugin());\n        }\n        if (this.config.cacheControl !== false) {\n            let cacheControlOptions = {};\n            if (typeof this.config.cacheControl === 'boolean' &&\n                this.config.cacheControl === true) {\n                cacheControlOptions = {\n                    stripFormattedExtensions: false,\n                    calculateHttpHeaders: false,\n                    defaultMaxAge: 0,\n                };\n            }\n            else {\n                cacheControlOptions = Object.assign({ stripFormattedExtensions: true, calculateHttpHeaders: true, defaultMaxAge: 0 }, this.config.cacheControl);\n            }\n            pluginsToInit.push(apollo_cache_control_1.plugin(cacheControlOptions));\n        }\n        pluginsToInit.push(...plugins);\n        this.plugins = pluginsToInit.map((plugin) => {\n            if (typeof plugin === 'function') {\n                return plugin();\n            }\n            return plugin;\n        });\n        const alreadyHavePluginWithInternalId = (id) => this.plugins.some((p) => internalPlugin_1.pluginIsInternal(p) && p.__internal_plugin_id__() === id);\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n            const { engine } = this.config;\n            const disabledViaLegacyOption = engine === false ||\n                (typeof engine === 'object' && engine.reportTiming === false);\n            if (alreadyHavePlugin) {\n                if (engine !== undefined) {\n                    throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" +\n                        'creating an ApolloServerPluginUsageReporting plugin. See ' +\n                        'https://go.apollo.dev/s/migration-engine-plugins');\n                }\n            }\n            else if (this.apolloConfig.key && !disabledViaLegacyOption) {\n                this.plugins.unshift(typeof engine === 'object'\n                    ? plugin_1.ApolloServerPluginUsageReportingFromLegacyOptions(engine)\n                    : plugin_1.ApolloServerPluginUsageReporting());\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n            const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n            const { engine } = this.config;\n            const enabledViaLegacyOption = typeof engine === 'object' &&\n                (engine.reportSchema || engine.experimental_schemaReporting);\n            if (alreadyHavePlugin || enabledViaEnvVar || enabledViaLegacyOption) {\n                if (this.config.gateway) {\n                    throw new Error([\n                        \"Schema reporting is not yet compatible with the gateway. If you're\",\n                        'interested in using schema reporting with the gateway, please',\n                        'contact Apollo support. To set up managed federation, see',\n                        'https://go.apollo.dev/s/managed-federation',\n                    ].join(' '));\n                }\n            }\n            if (alreadyHavePlugin) {\n                if (engine !== undefined) {\n                    throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" +\n                        'creating an ApolloServerPluginSchemaReporting plugin. See ' +\n                        'https://go.apollo.dev/s/migration-engine-plugins');\n                }\n            }\n            else if (!this.apolloConfig.key) {\n                if (enabledViaEnvVar) {\n                    throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" +\n                        'environment variable to true, but you also need to provide your ' +\n                        'Apollo API key, via the APOLLO_KEY environment ' +\n                        'variable or via `new ApolloServer({apollo: {key})');\n                }\n                if (enabledViaLegacyOption) {\n                    throw new Error(\"You've enabled schema reporting in the `engine` argument to `new ApolloServer()`, \" +\n                        'but you also need to provide your Apollo API key, via the APOLLO_KEY environment ' +\n                        'variable or via `new ApolloServer({apollo: {key})');\n                }\n            }\n            else if (enabledViaEnvVar || enabledViaLegacyOption) {\n                const options = {};\n                if (typeof engine === 'object') {\n                    options.initialDelayMaxMs = (_a = engine.schemaReportingInitialDelayMaxMs) !== null && _a !== void 0 ? _a : engine.experimental_schemaReportingInitialDelayMaxMs;\n                    options.overrideReportedSchema = (_b = engine.overrideReportedSchema) !== null && _b !== void 0 ? _b : engine.experimental_overrideReportedSchema;\n                    options.endpointUrl = engine.schemaReportingUrl;\n                }\n                this.plugins.push(plugin_1.ApolloServerPluginSchemaReporting(options));\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n            const { engine } = this.config;\n            if (alreadyHavePlugin) {\n                if (engine !== undefined) {\n                    throw Error(\"You can't combine the legacy `new ApolloServer({engine})` option with directly \" +\n                        'creating an ApolloServerPluginInlineTrace plugin. See ' +\n                        'https://go.apollo.dev/s/migration-engine-plugins');\n                }\n            }\n            else if (this.config.engine !== false) {\n                const options = {\n                    __onlyIfSchemaIsFederated: true,\n                };\n                if (typeof engine === 'object') {\n                    options.rewriteError = engine.rewriteError;\n                }\n                this.plugins.push(plugin_1.ApolloServerPluginInlineTrace(options));\n            }\n        }\n    }\n    initializeDocumentStore() {\n        return new apollo_server_caching_1.InMemoryLRUCache({\n            maxSize: Math.pow(2, 20) * (this.experimental_approximateDocumentStoreMiB || 30),\n            sizeCalculator: approximateObjectSize,\n        });\n    }\n    graphQLServerOptions(integrationContextArgument) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { schema, schemaHash, documentStore, extensions, } = yield this.ensureStarted();\n            let context = this.context ? this.context : {};\n            try {\n                context =\n                    typeof this.context === 'function'\n                        ? yield this.context(integrationContextArgument || {})\n                        : context;\n            }\n            catch (error) {\n                context = () => {\n                    throw error;\n                };\n            }\n            return Object.assign({ schema,\n                schemaHash, logger: this.logger, plugins: this.plugins, documentStore,\n                extensions,\n                context, persistedQueries: this.requestOptions\n                    .persistedQueries, fieldResolver: this.requestOptions.fieldResolver, parseOptions: this.parseOptions }, this.requestOptions);\n        });\n    }\n    executeOperation(request, integrationContextArgument) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const options = yield this.graphQLServerOptions(integrationContextArgument);\n            if (typeof options.context === 'function') {\n                options.context = options.context();\n            }\n            else if (typeof options.context === 'object') {\n                options.context = runHttpQuery_1.cloneObject(options.context);\n            }\n            const requestCtx = {\n                logger: this.logger,\n                schema: options.schema,\n                schemaHash: options.schemaHash,\n                request: Object.assign(Object.assign({}, request), { query: request.query && typeof request.query !== 'string'\n                        ? graphql_1.print(request.query)\n                        : request.query }),\n                context: options.context || Object.create(null),\n                cache: options.cache,\n                metrics: {},\n                response: {\n                    http: {\n                        headers: new apollo_server_env_1.Headers(),\n                    },\n                },\n                debug: options.debug,\n            };\n            return requestPipeline_1.processGraphQLRequest(options, requestCtx);\n        });\n    }\n}\nexports.ApolloServerBase = ApolloServerBase;\nfunction printNodeFileUploadsMessage(logger) {\n    logger.error([\n        '*****************************************************************',\n        '*                                                               *',\n        '* ERROR! Manual intervention is necessary for Node.js < v8.5.0! *',\n        '*                                                               *',\n        '*****************************************************************',\n        '',\n        'The third-party `graphql-upload` package, which is used to implement',\n        'file uploads in Apollo Server 2.x, no longer supports Node.js LTS',\n        'versions prior to Node.js v8.5.0.',\n        '',\n        'Deployments which NEED file upload capabilities should update to',\n        'Node.js >= v8.5.0 to continue using uploads.',\n        '',\n        'If this server DOES NOT NEED file uploads and wishes to continue',\n        'using this version of Node.js, uploads can be disabled by adding:',\n        '',\n        '  uploads: false,',\n        '',\n        '...to the options for Apollo Server and re-deploying the server.',\n        '',\n        'For more information, see https://bit.ly/gql-upload-node-6.',\n        '',\n    ].join('\\n'));\n}\n//# sourceMappingURL=ApolloServer.js.map"]},"metadata":{},"sourceType":"script"}