{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar isSpecifiedScalarType_1 = require(\"../isSpecifiedScalarType\");\n\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\n\nvar defaultMergedResolver_1 = require(\"./defaultMergedResolver\");\n\nfunction recreateType(type, resolveType, keepResolvers) {\n  if (type instanceof graphql_1.GraphQLObjectType) {\n    var fields_1 = type.getFields();\n    var interfaces_1 = type.getInterfaces();\n    return new graphql_1.GraphQLObjectType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      isTypeOf: keepResolvers ? type.isTypeOf : undefined,\n      fields: function () {\n        return fieldMapToFieldConfigMap(fields_1, resolveType, keepResolvers);\n      },\n      interfaces: function () {\n        return interfaces_1.map(function (iface) {\n          return resolveType(iface);\n        });\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLInterfaceType) {\n    var fields_2 = type.getFields();\n    return new graphql_1.GraphQLInterfaceType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      fields: function () {\n        return fieldMapToFieldConfigMap(fields_2, resolveType, keepResolvers);\n      },\n      resolveType: keepResolvers ? type.resolveType : function (parent, context, info) {\n        return resolveFromParentTypename_1.default(parent, info.schema);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLUnionType) {\n    return new graphql_1.GraphQLUnionType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      types: function () {\n        return type.getTypes().map(function (unionMember) {\n          return resolveType(unionMember);\n        });\n      },\n      resolveType: keepResolvers ? type.resolveType : function (parent, context, info) {\n        return resolveFromParentTypename_1.default(parent, info.schema);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLInputObjectType) {\n    return new graphql_1.GraphQLInputObjectType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      fields: function () {\n        return inputFieldMapToFieldConfigMap(type.getFields(), resolveType);\n      }\n    });\n  } else if (type instanceof graphql_1.GraphQLEnumType) {\n    var values = type.getValues();\n    var newValues_1 = {};\n    values.forEach(function (value) {\n      newValues_1[value.name] = {\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        description: value.description,\n        astNode: value.astNode\n      };\n    });\n    return new graphql_1.GraphQLEnumType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      values: newValues_1\n    });\n  } else if (type instanceof graphql_1.GraphQLScalarType) {\n    if (keepResolvers || isSpecifiedScalarType_1.default(type)) {\n      return type;\n    } else {\n      return new graphql_1.GraphQLScalarType({\n        name: type.name,\n        description: type.description,\n        astNode: type.astNode,\n        serialize: function (value) {\n          return value;\n        },\n        parseValue: function (value) {\n          return value;\n        },\n        parseLiteral: function (ast) {\n          return parseLiteral(ast);\n        }\n      });\n    }\n  } else {\n    throw new Error(\"Invalid type \" + type);\n  }\n}\n\nexports.recreateType = recreateType;\n\nfunction recreateDirective(directive, resolveType) {\n  return new graphql_1.GraphQLDirective({\n    name: directive.name,\n    description: directive.description,\n    locations: directive.locations,\n    args: argsToFieldConfigArgumentMap(directive.args, resolveType),\n    astNode: directive.astNode\n  });\n}\n\nexports.recreateDirective = recreateDirective;\n\nfunction parseLiteral(ast) {\n  switch (ast.kind) {\n    case graphql_1.Kind.STRING:\n    case graphql_1.Kind.BOOLEAN:\n      {\n        return ast.value;\n      }\n\n    case graphql_1.Kind.INT:\n    case graphql_1.Kind.FLOAT:\n      {\n        return parseFloat(ast.value);\n      }\n\n    case graphql_1.Kind.OBJECT:\n      {\n        var value_1 = Object.create(null);\n        ast.fields.forEach(function (field) {\n          value_1[field.name.value] = parseLiteral(field.value);\n        });\n        return value_1;\n      }\n\n    case graphql_1.Kind.LIST:\n      {\n        return ast.values.map(parseLiteral);\n      }\n\n    default:\n      return null;\n  }\n}\n\nfunction fieldMapToFieldConfigMap(fields, resolveType, keepResolvers) {\n  var result = {};\n  Object.keys(fields).forEach(function (name) {\n    var field = fields[name];\n    var type = resolveType(field.type);\n\n    if (type !== null) {\n      result[name] = fieldToFieldConfig(fields[name], resolveType, keepResolvers);\n    }\n  });\n  return result;\n}\n\nexports.fieldMapToFieldConfigMap = fieldMapToFieldConfigMap;\n\nfunction createResolveType(getType) {\n  var resolveType = function (type) {\n    if (type instanceof graphql_1.GraphQLList) {\n      var innerType = resolveType(type.ofType);\n\n      if (innerType === null) {\n        return null;\n      } else {\n        return new graphql_1.GraphQLList(innerType);\n      }\n    } else if (type instanceof graphql_1.GraphQLNonNull) {\n      var innerType = resolveType(type.ofType);\n\n      if (innerType === null) {\n        return null;\n      } else {\n        return new graphql_1.GraphQLNonNull(innerType);\n      }\n    } else if (graphql_1.isNamedType(type)) {\n      var typeName = graphql_1.getNamedType(type).name;\n\n      switch (typeName) {\n        case graphql_1.GraphQLInt.name:\n          return graphql_1.GraphQLInt;\n\n        case graphql_1.GraphQLFloat.name:\n          return graphql_1.GraphQLFloat;\n\n        case graphql_1.GraphQLString.name:\n          return graphql_1.GraphQLString;\n\n        case graphql_1.GraphQLBoolean.name:\n          return graphql_1.GraphQLBoolean;\n\n        case graphql_1.GraphQLID.name:\n          return graphql_1.GraphQLID;\n\n        default:\n          return getType(typeName, type);\n      }\n    } else {\n      return type;\n    }\n  };\n\n  return resolveType;\n}\n\nexports.createResolveType = createResolveType;\n\nfunction fieldToFieldConfig(field, resolveType, keepResolvers) {\n  return {\n    type: resolveType(field.type),\n    args: argsToFieldConfigArgumentMap(field.args, resolveType),\n    resolve: keepResolvers ? field.resolve : defaultMergedResolver_1.default,\n    subscribe: keepResolvers ? field.subscribe : null,\n    description: field.description,\n    deprecationReason: field.deprecationReason,\n    astNode: field.astNode\n  };\n}\n\nexports.fieldToFieldConfig = fieldToFieldConfig;\n\nfunction argsToFieldConfigArgumentMap(args, resolveType) {\n  var result = {};\n  args.forEach(function (arg) {\n    var newArg = argumentToArgumentConfig(arg, resolveType);\n\n    if (newArg) {\n      result[newArg[0]] = newArg[1];\n    }\n  });\n  return result;\n}\n\nexports.argsToFieldConfigArgumentMap = argsToFieldConfigArgumentMap;\n\nfunction argumentToArgumentConfig(argument, resolveType) {\n  var type = resolveType(argument.type);\n\n  if (type === null) {\n    return null;\n  } else {\n    return [argument.name, {\n      type: type,\n      defaultValue: argument.defaultValue,\n      description: argument.description\n    }];\n  }\n}\n\nexports.argumentToArgumentConfig = argumentToArgumentConfig;\n\nfunction inputFieldMapToFieldConfigMap(fields, resolveType) {\n  var result = {};\n  Object.keys(fields).forEach(function (name) {\n    var field = fields[name];\n    var type = resolveType(field.type);\n\n    if (type !== null) {\n      result[name] = inputFieldToFieldConfig(fields[name], resolveType);\n    }\n  });\n  return result;\n}\n\nexports.inputFieldMapToFieldConfigMap = inputFieldMapToFieldConfigMap;\n\nfunction inputFieldToFieldConfig(field, resolveType) {\n  return {\n    type: resolveType(field.type),\n    defaultValue: field.defaultValue,\n    description: field.description,\n    astNode: field.astNode\n  };\n}\n\nexports.inputFieldToFieldConfig = inputFieldToFieldConfig;","map":{"version":3,"sources":["../../src/stitching/schemaRecreation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar isSpecifiedScalarType_1 = require(\"../isSpecifiedScalarType\");\nvar resolveFromParentTypename_1 = require(\"./resolveFromParentTypename\");\nvar defaultMergedResolver_1 = require(\"./defaultMergedResolver\");\nfunction recreateType(type, resolveType, keepResolvers) {\n    if (type instanceof graphql_1.GraphQLObjectType) {\n        var fields_1 = type.getFields();\n        var interfaces_1 = type.getInterfaces();\n        return new graphql_1.GraphQLObjectType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            isTypeOf: keepResolvers ? type.isTypeOf : undefined,\n            fields: function () {\n                return fieldMapToFieldConfigMap(fields_1, resolveType, keepResolvers);\n            },\n            interfaces: function () { return interfaces_1.map(function (iface) { return resolveType(iface); }); },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLInterfaceType) {\n        var fields_2 = type.getFields();\n        return new graphql_1.GraphQLInterfaceType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: function () {\n                return fieldMapToFieldConfigMap(fields_2, resolveType, keepResolvers);\n            },\n            resolveType: keepResolvers\n                ? type.resolveType\n                : function (parent, context, info) {\n                    return resolveFromParentTypename_1.default(parent, info.schema);\n                },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLUnionType) {\n        return new graphql_1.GraphQLUnionType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            types: function () { return type.getTypes().map(function (unionMember) { return resolveType(unionMember); }); },\n            resolveType: keepResolvers\n                ? type.resolveType\n                : function (parent, context, info) {\n                    return resolveFromParentTypename_1.default(parent, info.schema);\n                },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        return new graphql_1.GraphQLInputObjectType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: function () {\n                return inputFieldMapToFieldConfigMap(type.getFields(), resolveType);\n            },\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLEnumType) {\n        var values = type.getValues();\n        var newValues_1 = {};\n        values.forEach(function (value) {\n            newValues_1[value.name] = {\n                value: value.value,\n                deprecationReason: value.deprecationReason,\n                description: value.description,\n                astNode: value.astNode,\n            };\n        });\n        return new graphql_1.GraphQLEnumType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            values: newValues_1,\n        });\n    }\n    else if (type instanceof graphql_1.GraphQLScalarType) {\n        if (keepResolvers || isSpecifiedScalarType_1.default(type)) {\n            return type;\n        }\n        else {\n            return new graphql_1.GraphQLScalarType({\n                name: type.name,\n                description: type.description,\n                astNode: type.astNode,\n                serialize: function (value) {\n                    return value;\n                },\n                parseValue: function (value) {\n                    return value;\n                },\n                parseLiteral: function (ast) {\n                    return parseLiteral(ast);\n                },\n            });\n        }\n    }\n    else {\n        throw new Error(\"Invalid type \" + type);\n    }\n}\nexports.recreateType = recreateType;\nfunction recreateDirective(directive, resolveType) {\n    return new graphql_1.GraphQLDirective({\n        name: directive.name,\n        description: directive.description,\n        locations: directive.locations,\n        args: argsToFieldConfigArgumentMap(directive.args, resolveType),\n        astNode: directive.astNode,\n    });\n}\nexports.recreateDirective = recreateDirective;\nfunction parseLiteral(ast) {\n    switch (ast.kind) {\n        case graphql_1.Kind.STRING:\n        case graphql_1.Kind.BOOLEAN: {\n            return ast.value;\n        }\n        case graphql_1.Kind.INT:\n        case graphql_1.Kind.FLOAT: {\n            return parseFloat(ast.value);\n        }\n        case graphql_1.Kind.OBJECT: {\n            var value_1 = Object.create(null);\n            ast.fields.forEach(function (field) {\n                value_1[field.name.value] = parseLiteral(field.value);\n            });\n            return value_1;\n        }\n        case graphql_1.Kind.LIST: {\n            return ast.values.map(parseLiteral);\n        }\n        default:\n            return null;\n    }\n}\nfunction fieldMapToFieldConfigMap(fields, resolveType, keepResolvers) {\n    var result = {};\n    Object.keys(fields).forEach(function (name) {\n        var field = fields[name];\n        var type = resolveType(field.type);\n        if (type !== null) {\n            result[name] = fieldToFieldConfig(fields[name], resolveType, keepResolvers);\n        }\n    });\n    return result;\n}\nexports.fieldMapToFieldConfigMap = fieldMapToFieldConfigMap;\nfunction createResolveType(getType) {\n    var resolveType = function (type) {\n        if (type instanceof graphql_1.GraphQLList) {\n            var innerType = resolveType(type.ofType);\n            if (innerType === null) {\n                return null;\n            }\n            else {\n                return new graphql_1.GraphQLList(innerType);\n            }\n        }\n        else if (type instanceof graphql_1.GraphQLNonNull) {\n            var innerType = resolveType(type.ofType);\n            if (innerType === null) {\n                return null;\n            }\n            else {\n                return new graphql_1.GraphQLNonNull(innerType);\n            }\n        }\n        else if (graphql_1.isNamedType(type)) {\n            var typeName = graphql_1.getNamedType(type).name;\n            switch (typeName) {\n                case graphql_1.GraphQLInt.name:\n                    return graphql_1.GraphQLInt;\n                case graphql_1.GraphQLFloat.name:\n                    return graphql_1.GraphQLFloat;\n                case graphql_1.GraphQLString.name:\n                    return graphql_1.GraphQLString;\n                case graphql_1.GraphQLBoolean.name:\n                    return graphql_1.GraphQLBoolean;\n                case graphql_1.GraphQLID.name:\n                    return graphql_1.GraphQLID;\n                default:\n                    return getType(typeName, type);\n            }\n        }\n        else {\n            return type;\n        }\n    };\n    return resolveType;\n}\nexports.createResolveType = createResolveType;\nfunction fieldToFieldConfig(field, resolveType, keepResolvers) {\n    return {\n        type: resolveType(field.type),\n        args: argsToFieldConfigArgumentMap(field.args, resolveType),\n        resolve: keepResolvers ? field.resolve : defaultMergedResolver_1.default,\n        subscribe: keepResolvers ? field.subscribe : null,\n        description: field.description,\n        deprecationReason: field.deprecationReason,\n        astNode: field.astNode,\n    };\n}\nexports.fieldToFieldConfig = fieldToFieldConfig;\nfunction argsToFieldConfigArgumentMap(args, resolveType) {\n    var result = {};\n    args.forEach(function (arg) {\n        var newArg = argumentToArgumentConfig(arg, resolveType);\n        if (newArg) {\n            result[newArg[0]] = newArg[1];\n        }\n    });\n    return result;\n}\nexports.argsToFieldConfigArgumentMap = argsToFieldConfigArgumentMap;\nfunction argumentToArgumentConfig(argument, resolveType) {\n    var type = resolveType(argument.type);\n    if (type === null) {\n        return null;\n    }\n    else {\n        return [\n            argument.name,\n            {\n                type: type,\n                defaultValue: argument.defaultValue,\n                description: argument.description,\n            },\n        ];\n    }\n}\nexports.argumentToArgumentConfig = argumentToArgumentConfig;\nfunction inputFieldMapToFieldConfigMap(fields, resolveType) {\n    var result = {};\n    Object.keys(fields).forEach(function (name) {\n        var field = fields[name];\n        var type = resolveType(field.type);\n        if (type !== null) {\n            result[name] = inputFieldToFieldConfig(fields[name], resolveType);\n        }\n    });\n    return result;\n}\nexports.inputFieldMapToFieldConfigMap = inputFieldMapToFieldConfigMap;\nfunction inputFieldToFieldConfig(field, resolveType) {\n    return {\n        type: resolveType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode,\n    };\n}\nexports.inputFieldToFieldConfig = inputFieldToFieldConfig;\n//# sourceMappingURL=schemaRecreation.js.map"]},"metadata":{},"sourceType":"script"}