{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeTraceDetails = void 0;\n\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\n\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n  const details = new apollo_reporting_protobuf_1.Trace.Details();\n\n  const variablesToRecord = (() => {\n    if (sendVariableValues && 'transform' in sendVariableValues) {\n      const originalKeys = Object.keys(variables);\n\n      try {\n        const modifiedVariables = sendVariableValues.transform({\n          variables: variables,\n          operationString: operationString\n        });\n        return cleanModifiedVariables(originalKeys, modifiedVariables);\n      } catch (e) {\n        return handleVariableValueTransformError(originalKeys);\n      }\n    } else {\n      return variables;\n    }\n  })();\n\n  Object.keys(variablesToRecord).forEach(name => {\n    if (!sendVariableValues || 'none' in sendVariableValues && sendVariableValues.none || 'all' in sendVariableValues && !sendVariableValues.all || 'exceptNames' in sendVariableValues && sendVariableValues.exceptNames.includes(name) || 'onlyNames' in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {\n      details.variablesJson[name] = '';\n    } else {\n      try {\n        details.variablesJson[name] = typeof variablesToRecord[name] === 'undefined' ? '' : JSON.stringify(variablesToRecord[name]);\n      } catch (e) {\n        details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n      }\n    }\n  });\n  return details;\n}\n\nexports.makeTraceDetails = makeTraceDetails;\n\nfunction handleVariableValueTransformError(variableNames) {\n  const modifiedVariables = Object.create(null);\n  variableNames.forEach(name => {\n    modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n  });\n  return modifiedVariables;\n}\n\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n  const cleanedVariables = Object.create(null);\n  originalKeys.forEach(name => {\n    cleanedVariables[name] = modifiedVariables[name];\n  });\n  return cleanedVariables;\n}","map":{"version":3,"sources":["../../../src/plugin/usageReporting/traceDetails.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,2BAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAUA,SAAgB,gBAAhB,CACE,SADF,EAEE,kBAFF,EAGE,eAHF,EAG0B;AAExB,QAAM,OAAO,GAAG,IAAI,2BAAA,CAAA,KAAA,CAAM,OAAV,EAAhB;;AACA,QAAM,iBAAiB,GAAG,CAAC,MAAK;AAC9B,QAAI,kBAAkB,IAAI,eAAe,kBAAzC,EAA6D;AAC3D,YAAM,YAAY,GAAG,MAAM,CAAC,IAAP,CAAY,SAAZ,CAArB;;AACA,UAAI;AAEF,cAAM,iBAAiB,GAAG,kBAAkB,CAAC,SAAnB,CAA6B;AACrD,UAAA,SAAS,EAAE,SAD0C;AAErD,UAAA,eAAe,EAAE;AAFoC,SAA7B,CAA1B;AAIA,eAAO,sBAAsB,CAAC,YAAD,EAAe,iBAAf,CAA7B;AACD,OAPD,CAOE,OAAO,CAAP,EAAU;AAGV,eAAO,iCAAiC,CAAC,YAAD,CAAxC;AACD;AACF,KAdD,MAcO;AACL,aAAO,SAAP;AACD;AACF,GAlByB,GAA1B;;AAyBA,EAAA,MAAM,CAAC,IAAP,CAAY,iBAAZ,EAA+B,OAA/B,CAAwC,IAAD,IAAS;AAC9C,QACE,CAAC,kBAAD,IACC,UAAU,kBAAV,IAAgC,kBAAkB,CAAC,IADpD,IAEC,SAAS,kBAAT,IAA+B,CAAC,kBAAkB,CAAC,GAFpD,IAGC,iBAAiB,kBAAjB,IAIC,kBAAkB,CAAC,WAAnB,CAA+B,QAA/B,CAAwC,IAAxC,CAPF,IAQC,eAAe,kBAAf,IACC,CAAC,kBAAkB,CAAC,SAAnB,CAA6B,QAA7B,CAAsC,IAAtC,CAVL,EAWE;AAIA,MAAA,OAAO,CAAC,aAAR,CAAuB,IAAvB,IAA+B,EAA/B;AACD,KAhBD,MAgBO;AACL,UAAI;AACF,QAAA,OAAO,CAAC,aAAR,CAAuB,IAAvB,IACE,OAAO,iBAAiB,CAAC,IAAD,CAAxB,KAAmC,WAAnC,GACI,EADJ,GAEI,IAAI,CAAC,SAAL,CAAe,iBAAiB,CAAC,IAAD,CAAhC,CAHN;AAID,OALD,CAKE,OAAO,CAAP,EAAU;AACV,QAAA,OAAO,CAAC,aAAR,CAAuB,IAAvB,IAA+B,IAAI,CAAC,SAAL,CAC7B,mCAD6B,CAA/B;AAGD;AACF;AACF,GA7BD;AA8BA,SAAO,OAAP;AACD;;AA9DD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAgEA,SAAS,iCAAT,CACE,aADF,EACyB;AAEvB,QAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,CAAc,IAAd,CAA1B;AACA,EAAA,aAAa,CAAC,OAAd,CAAuB,IAAD,IAAS;AAC7B,IAAA,iBAAiB,CAAC,IAAD,CAAjB,GAA0B,4BAA1B;AACD,GAFD;AAGA,SAAO,iBAAP;AACD;;AAID,SAAS,sBAAT,CACE,YADF,EAEE,iBAFF,EAEwC;AAEtC,QAAM,gBAAgB,GAAwB,MAAM,CAAC,MAAP,CAAc,IAAd,CAA9C;AACA,EAAA,YAAY,CAAC,OAAb,CAAsB,IAAD,IAAS;AAC5B,IAAA,gBAAgB,CAAC,IAAD,CAAhB,GAAyB,iBAAiB,CAAC,IAAD,CAA1C;AACD,GAFD;AAGA,SAAO,gBAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeTraceDetails = void 0;\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n    const details = new apollo_reporting_protobuf_1.Trace.Details();\n    const variablesToRecord = (() => {\n        if (sendVariableValues && 'transform' in sendVariableValues) {\n            const originalKeys = Object.keys(variables);\n            try {\n                const modifiedVariables = sendVariableValues.transform({\n                    variables: variables,\n                    operationString: operationString,\n                });\n                return cleanModifiedVariables(originalKeys, modifiedVariables);\n            }\n            catch (e) {\n                return handleVariableValueTransformError(originalKeys);\n            }\n        }\n        else {\n            return variables;\n        }\n    })();\n    Object.keys(variablesToRecord).forEach((name) => {\n        if (!sendVariableValues ||\n            ('none' in sendVariableValues && sendVariableValues.none) ||\n            ('all' in sendVariableValues && !sendVariableValues.all) ||\n            ('exceptNames' in sendVariableValues &&\n                sendVariableValues.exceptNames.includes(name)) ||\n            ('onlyNames' in sendVariableValues &&\n                !sendVariableValues.onlyNames.includes(name))) {\n            details.variablesJson[name] = '';\n        }\n        else {\n            try {\n                details.variablesJson[name] =\n                    typeof variablesToRecord[name] === 'undefined'\n                        ? ''\n                        : JSON.stringify(variablesToRecord[name]);\n            }\n            catch (e) {\n                details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n            }\n        }\n    });\n    return details;\n}\nexports.makeTraceDetails = makeTraceDetails;\nfunction handleVariableValueTransformError(variableNames) {\n    const modifiedVariables = Object.create(null);\n    variableNames.forEach((name) => {\n        modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n    });\n    return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n    const cleanedVariables = Object.create(null);\n    originalKeys.forEach((name) => {\n        cleanedVariables[name] = modifiedVariables[name];\n    });\n    return cleanedVariables;\n}\n//# sourceMappingURL=traceDetails.js.map"]},"metadata":{},"sourceType":"script"}