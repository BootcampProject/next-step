{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar AddTypenameToAbstract =\n/** @class */\nfunction () {\n  function AddTypenameToAbstract(targetSchema) {\n    this.targetSchema = targetSchema;\n  }\n\n  AddTypenameToAbstract.prototype.transformRequest = function (originalRequest) {\n    var document = addTypenameToAbstract(this.targetSchema, originalRequest.document);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n\n  return AddTypenameToAbstract;\n}();\n\nexports.default = AddTypenameToAbstract;\n\nfunction addTypenameToAbstract(targetSchema, document) {\n  var _a;\n\n  var typeInfo = new graphql_1.TypeInfo(targetSchema);\n  return graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, (_a = {}, _a[graphql_1.Kind.SELECTION_SET] = function (node) {\n    var parentType = typeInfo.getParentType();\n    var selections = node.selections;\n\n    if (parentType && (parentType instanceof graphql_1.GraphQLInterfaceType || parentType instanceof graphql_1.GraphQLUnionType) && !selections.find(function (_) {\n      return _.kind === graphql_1.Kind.FIELD && _.name.value === '__typename';\n    })) {\n      selections = selections.concat({\n        kind: graphql_1.Kind.FIELD,\n        name: {\n          kind: graphql_1.Kind.NAME,\n          value: '__typename'\n        }\n      });\n    }\n\n    if (selections !== node.selections) {\n      return __assign(__assign({}, node), {\n        selections: selections\n      });\n    }\n  }, _a)));\n}","map":{"version":3,"sources":["../../src/transforms/AddTypenameToAbstract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAgBA,IAAA,qBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,qBAAA,CAAY,YAAZ,EAAuC;AACrC,SAAK,YAAL,GAAoB,YAApB;AACD;;AAEM,EAAA,qBAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,eAAxB,EAAgD;AAC9C,QAAM,QAAQ,GAAG,qBAAqB,CACpC,KAAK,YAD+B,EAEpC,eAAe,CAAC,QAFoB,CAAtC;AAIA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,eADL,CAAA,EACoB;AAClB,MAAA,QAAQ,EAAA;AADU,KADpB,CAAA;AAID,GATM;;AAUT,SAAA,qBAAA;AAAC,CAjBD,EAAA;;;;AAmBA,SAAS,qBAAT,CACE,YADF,EAEE,QAFF,EAEwB;;;AAEtB,MAAM,QAAQ,GAAG,IAAI,SAAA,CAAA,QAAJ,CAAa,YAAb,CAAjB;AACA,SAAO,SAAA,CAAA,KAAA,CACL,QADK,EAEL,SAAA,CAAA,iBAAA,CAAkB,QAAlB,GAA0B,EAAA,GAAA,EAAA,EACxB,EAAA,CAAC,SAAA,CAAA,IAAA,CAAK,aAAN,CAAA,GAAA,UACE,IADF,EACwB;AAEtB,QAAM,UAAU,GAAgB,QAAQ,CAAC,aAAT,EAAhC;AACA,QAAI,UAAU,GAAG,IAAI,CAAC,UAAtB;;AACA,QACE,UAAU,KACT,UAAU,YAAY,SAAA,CAAA,oBAAtB,IACC,UAAU,YAAY,SAAA,CAAA,gBAFd,CAAV,IAGA,CAAC,UAAU,CAAC,IAAX,CACC,UAAA,CAAA,EAAC;AACC,aAAC,CAAe,CAAC,IAAhB,KAAyB,SAAA,CAAA,IAAA,CAAK,KAA9B,IACA,CAAe,CAAC,IAAhB,CAAqB,KAArB,KAA+B,YADhC;AAC4C,KAH/C,CAJH,EASE;AACA,MAAA,UAAU,GAAG,UAAU,CAAC,MAAX,CAAkB;AAC7B,QAAA,IAAI,EAAE,SAAA,CAAA,IAAA,CAAK,KADkB;AAE7B,QAAA,IAAI,EAAE;AACJ,UAAA,IAAI,EAAE,SAAA,CAAA,IAAA,CAAK,IADP;AAEJ,UAAA,KAAK,EAAE;AAFH;AAFuB,OAAlB,CAAb;AAOD;;AAED,QAAI,UAAU,KAAK,IAAI,CAAC,UAAxB,EAAoC;AAClC,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,UAAU,EAAA;AADH,OADT,CAAA;AAID;AACF,GA/BuB,EAgCxB,EAhCF,EAFK,CAAP;AAoCD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar AddTypenameToAbstract = /** @class */ (function () {\n    function AddTypenameToAbstract(targetSchema) {\n        this.targetSchema = targetSchema;\n    }\n    AddTypenameToAbstract.prototype.transformRequest = function (originalRequest) {\n        var document = addTypenameToAbstract(this.targetSchema, originalRequest.document);\n        return __assign(__assign({}, originalRequest), { document: document });\n    };\n    return AddTypenameToAbstract;\n}());\nexports.default = AddTypenameToAbstract;\nfunction addTypenameToAbstract(targetSchema, document) {\n    var _a;\n    var typeInfo = new graphql_1.TypeInfo(targetSchema);\n    return graphql_1.visit(document, graphql_1.visitWithTypeInfo(typeInfo, (_a = {},\n        _a[graphql_1.Kind.SELECTION_SET] = function (node) {\n            var parentType = typeInfo.getParentType();\n            var selections = node.selections;\n            if (parentType &&\n                (parentType instanceof graphql_1.GraphQLInterfaceType ||\n                    parentType instanceof graphql_1.GraphQLUnionType) &&\n                !selections.find(function (_) {\n                    return _.kind === graphql_1.Kind.FIELD &&\n                        _.name.value === '__typename';\n                })) {\n                selections = selections.concat({\n                    kind: graphql_1.Kind.FIELD,\n                    name: {\n                        kind: graphql_1.Kind.NAME,\n                        value: '__typename',\n                    },\n                });\n            }\n            if (selections !== node.selections) {\n                return __assign(__assign({}, node), { selections: selections });\n            }\n        },\n        _a)));\n}\n//# sourceMappingURL=AddTypenameToAbstract.js.map"]},"metadata":{},"sourceType":"script"}