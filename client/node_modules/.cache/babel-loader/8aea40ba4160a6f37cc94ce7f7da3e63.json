{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar AddArgumentsAsVariablesTransform =\n/** @class */\nfunction () {\n  function AddArgumentsAsVariablesTransform(schema, args) {\n    this.schema = schema;\n    this.args = args;\n  }\n\n  AddArgumentsAsVariablesTransform.prototype.transformRequest = function (originalRequest) {\n    var _a = addVariablesToRootField(this.schema, originalRequest.document, this.args),\n        document = _a.document,\n        newVariables = _a.newVariables;\n\n    var variables = __assign(__assign({}, originalRequest.variables), newVariables);\n\n    return {\n      document: document,\n      variables: variables\n    };\n  };\n\n  return AddArgumentsAsVariablesTransform;\n}();\n\nexports.default = AddArgumentsAsVariablesTransform;\n\nfunction addVariablesToRootField(targetSchema, document, args) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var variableNames = {};\n  var newOperations = operations.map(function (operation) {\n    var existingVariables = operation.variableDefinitions.map(function (variableDefinition) {\n      return variableDefinition.variable.name.value;\n    });\n    var variableCounter = 0;\n    var variables = {};\n\n    var generateVariableName = function (argName) {\n      var varName;\n\n      do {\n        varName = \"_v\" + variableCounter + \"_\" + argName;\n        variableCounter++;\n      } while (existingVariables.indexOf(varName) !== -1);\n\n      return varName;\n    };\n\n    var type;\n\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n\n    var newSelectionSet = [];\n    operation.selectionSet.selections.forEach(function (selection) {\n      if (selection.kind === graphql_1.Kind.FIELD) {\n        var newArgs_1 = {};\n        selection.arguments.forEach(function (argument) {\n          newArgs_1[argument.name.value] = argument;\n        });\n        var name_1 = selection.name.value;\n        var field = type.getFields()[name_1];\n        field.args.forEach(function (argument) {\n          if (argument.name in args) {\n            var variableName = generateVariableName(argument.name);\n            variableNames[argument.name] = variableName;\n            newArgs_1[argument.name] = {\n              kind: graphql_1.Kind.ARGUMENT,\n              name: {\n                kind: graphql_1.Kind.NAME,\n                value: argument.name\n              },\n              value: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              }\n            };\n            existingVariables.push(variableName);\n            variables[variableName] = {\n              kind: graphql_1.Kind.VARIABLE_DEFINITION,\n              variable: {\n                kind: graphql_1.Kind.VARIABLE,\n                name: {\n                  kind: graphql_1.Kind.NAME,\n                  value: variableName\n                }\n              },\n              type: typeToAst(argument.type)\n            };\n          }\n        });\n        newSelectionSet.push(__assign(__assign({}, selection), {\n          arguments: Object.keys(newArgs_1).map(function (argName) {\n            return newArgs_1[argName];\n          })\n        }));\n      } else {\n        newSelectionSet.push(selection);\n      }\n    });\n    return __assign(__assign({}, operation), {\n      variableDefinitions: operation.variableDefinitions.concat(Object.keys(variables).map(function (varName) {\n        return variables[varName];\n      })),\n      selectionSet: {\n        kind: graphql_1.Kind.SELECTION_SET,\n        selections: newSelectionSet\n      }\n    });\n  });\n  var newVariables = {};\n  Object.keys(variableNames).forEach(function (name) {\n    newVariables[variableNames[name]] = args[name];\n  });\n  return {\n    document: __assign(__assign({}, document), {\n      definitions: __spreadArrays(newOperations, fragments)\n    }),\n    newVariables: newVariables\n  };\n}\n\nfunction typeToAst(type) {\n  if (type instanceof graphql_1.GraphQLNonNull) {\n    var innerType = typeToAst(type.ofType);\n\n    if (innerType.kind === graphql_1.Kind.LIST_TYPE || innerType.kind === graphql_1.Kind.NAMED_TYPE) {\n      return {\n        kind: graphql_1.Kind.NON_NULL_TYPE,\n        type: innerType\n      };\n    } else {\n      throw new Error('Incorrent inner non-null type');\n    }\n  } else if (type instanceof graphql_1.GraphQLList) {\n    return {\n      kind: graphql_1.Kind.LIST_TYPE,\n      type: typeToAst(type.ofType)\n    };\n  } else {\n    return {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type.toString()\n      }\n    };\n  }\n}","map":{"version":3,"sources":["../../src/transforms/AddArgumentsAsVariables.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar AddArgumentsAsVariablesTransform = /** @class */ (function () {\n    function AddArgumentsAsVariablesTransform(schema, args) {\n        this.schema = schema;\n        this.args = args;\n    }\n    AddArgumentsAsVariablesTransform.prototype.transformRequest = function (originalRequest) {\n        var _a = addVariablesToRootField(this.schema, originalRequest.document, this.args), document = _a.document, newVariables = _a.newVariables;\n        var variables = __assign(__assign({}, originalRequest.variables), newVariables);\n        return {\n            document: document,\n            variables: variables,\n        };\n    };\n    return AddArgumentsAsVariablesTransform;\n}());\nexports.default = AddArgumentsAsVariablesTransform;\nfunction addVariablesToRootField(targetSchema, document, args) {\n    var operations = document.definitions.filter(function (def) { return def.kind === graphql_1.Kind.OPERATION_DEFINITION; });\n    var fragments = document.definitions.filter(function (def) { return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION; });\n    var variableNames = {};\n    var newOperations = operations.map(function (operation) {\n        var existingVariables = operation.variableDefinitions.map(function (variableDefinition) {\n            return variableDefinition.variable.name.value;\n        });\n        var variableCounter = 0;\n        var variables = {};\n        var generateVariableName = function (argName) {\n            var varName;\n            do {\n                varName = \"_v\" + variableCounter + \"_\" + argName;\n                variableCounter++;\n            } while (existingVariables.indexOf(varName) !== -1);\n            return varName;\n        };\n        var type;\n        if (operation.operation === 'subscription') {\n            type = targetSchema.getSubscriptionType();\n        }\n        else if (operation.operation === 'mutation') {\n            type = targetSchema.getMutationType();\n        }\n        else {\n            type = targetSchema.getQueryType();\n        }\n        var newSelectionSet = [];\n        operation.selectionSet.selections.forEach(function (selection) {\n            if (selection.kind === graphql_1.Kind.FIELD) {\n                var newArgs_1 = {};\n                selection.arguments.forEach(function (argument) {\n                    newArgs_1[argument.name.value] = argument;\n                });\n                var name_1 = selection.name.value;\n                var field = type.getFields()[name_1];\n                field.args.forEach(function (argument) {\n                    if (argument.name in args) {\n                        var variableName = generateVariableName(argument.name);\n                        variableNames[argument.name] = variableName;\n                        newArgs_1[argument.name] = {\n                            kind: graphql_1.Kind.ARGUMENT,\n                            name: {\n                                kind: graphql_1.Kind.NAME,\n                                value: argument.name,\n                            },\n                            value: {\n                                kind: graphql_1.Kind.VARIABLE,\n                                name: {\n                                    kind: graphql_1.Kind.NAME,\n                                    value: variableName,\n                                },\n                            },\n                        };\n                        existingVariables.push(variableName);\n                        variables[variableName] = {\n                            kind: graphql_1.Kind.VARIABLE_DEFINITION,\n                            variable: {\n                                kind: graphql_1.Kind.VARIABLE,\n                                name: {\n                                    kind: graphql_1.Kind.NAME,\n                                    value: variableName,\n                                },\n                            },\n                            type: typeToAst(argument.type),\n                        };\n                    }\n                });\n                newSelectionSet.push(__assign(__assign({}, selection), { arguments: Object.keys(newArgs_1).map(function (argName) { return newArgs_1[argName]; }) }));\n            }\n            else {\n                newSelectionSet.push(selection);\n            }\n        });\n        return __assign(__assign({}, operation), { variableDefinitions: operation.variableDefinitions.concat(Object.keys(variables).map(function (varName) { return variables[varName]; })), selectionSet: {\n                kind: graphql_1.Kind.SELECTION_SET,\n                selections: newSelectionSet,\n            } });\n    });\n    var newVariables = {};\n    Object.keys(variableNames).forEach(function (name) {\n        newVariables[variableNames[name]] = args[name];\n    });\n    return {\n        document: __assign(__assign({}, document), { definitions: __spreadArrays(newOperations, fragments) }),\n        newVariables: newVariables,\n    };\n}\nfunction typeToAst(type) {\n    if (type instanceof graphql_1.GraphQLNonNull) {\n        var innerType = typeToAst(type.ofType);\n        if (innerType.kind === graphql_1.Kind.LIST_TYPE ||\n            innerType.kind === graphql_1.Kind.NAMED_TYPE) {\n            return {\n                kind: graphql_1.Kind.NON_NULL_TYPE,\n                type: innerType,\n            };\n        }\n        else {\n            throw new Error('Incorrent inner non-null type');\n        }\n    }\n    else if (type instanceof graphql_1.GraphQLList) {\n        return {\n            kind: graphql_1.Kind.LIST_TYPE,\n            type: typeToAst(type.ofType),\n        };\n    }\n    else {\n        return {\n            kind: graphql_1.Kind.NAMED_TYPE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: type.toString(),\n            },\n        };\n    }\n}\n//# sourceMappingURL=AddArgumentsAsVariables.js.map"]},"metadata":{},"sourceType":"script"}