{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar WrapQuery =\n/** @class */\nfunction () {\n  function WrapQuery(path, wrapper, extractor) {\n    this.path = path;\n    this.wrapper = wrapper;\n    this.extractor = extractor;\n  }\n\n  WrapQuery.prototype.transformRequest = function (originalRequest) {\n    var _a;\n\n    var _this = this;\n\n    var document = originalRequest.document;\n    var fieldPath = [];\n    var ourPath = JSON.stringify(this.path);\n    var newDocument = graphql_1.visit(document, (_a = {}, _a[graphql_1.Kind.FIELD] = {\n      enter: function (node) {\n        fieldPath.push(node.name.value);\n\n        if (ourPath === JSON.stringify(fieldPath)) {\n          var wrapResult = _this.wrapper(node.selectionSet); // Selection can be either a single selection or a selection set. If it's just one selection,\n          // let's wrap it in a selection set. Otherwise, keep it as is.\n\n\n          var selectionSet = wrapResult.kind === graphql_1.Kind.SELECTION_SET ? wrapResult : {\n            kind: graphql_1.Kind.SELECTION_SET,\n            selections: [wrapResult]\n          };\n          return __assign(__assign({}, node), {\n            selectionSet: selectionSet\n          });\n        }\n      },\n      leave: function (node) {\n        fieldPath.pop();\n      }\n    }, _a));\n    return __assign(__assign({}, originalRequest), {\n      document: newDocument\n    });\n  };\n\n  WrapQuery.prototype.transformResult = function (originalResult) {\n    var rootData = originalResult.data;\n\n    if (rootData) {\n      var data = rootData;\n\n      var path = __spreadArrays(this.path);\n\n      while (path.length > 1) {\n        var next = path.shift();\n\n        if (data[next]) {\n          data = data[next];\n        }\n      }\n\n      data[path[0]] = this.extractor(data[path[0]]);\n    }\n\n    return {\n      data: rootData,\n      errors: originalResult.errors\n    };\n  };\n\n  return WrapQuery;\n}();\n\nexports.default = WrapQuery;","map":{"version":3,"sources":["../../src/transforms/WrapQuery.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAKA,IAAA,SAAA;AAAA;AAAA,YAAA;AAKE,WAAA,SAAA,CAAY,IAAZ,EAAiC,OAAjC,EAAwD,SAAxD,EAAuF;AACrF,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAEM,EAAA,SAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,eAAxB,EAAgD;;;AAAhD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,QAAQ,GAAG,eAAe,CAAC,QAAjC;AACA,QAAM,SAAS,GAAkB,EAAjC;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe,KAAK,IAApB,CAAhB;AACA,QAAM,WAAW,GAAG,SAAA,CAAA,KAAA,CAAM,QAAN,GAAc,EAAA,GAAA,EAAA,EAChC,EAAA,CAAC,SAAA,CAAA,IAAA,CAAK,KAAN,CAAA,GAAc;AACZ,MAAA,KAAK,EAAE,UAAC,IAAD,EAAgB;AACrB,QAAA,SAAS,CAAC,IAAV,CAAe,IAAI,CAAC,IAAL,CAAU,KAAzB;;AACA,YAAI,OAAO,KAAK,IAAI,CAAC,SAAL,CAAe,SAAf,CAAhB,EAA2C;AACzC,cAAM,UAAU,GAAG,KAAI,CAAC,OAAL,CAAa,IAAI,CAAC,YAAlB,CAAnB,CADyC,CAGzC;AACA;;;AACA,cAAM,YAAY,GAChB,UAAU,CAAC,IAAX,KAAoB,SAAA,CAAA,IAAA,CAAK,aAAzB,GACI,UADJ,GAEI;AACE,YAAA,IAAI,EAAE,SAAA,CAAA,IAAA,CAAK,aADb;AAEE,YAAA,UAAU,EAAE,CAAC,UAAD;AAFd,WAHN;AAQA,iBAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,YAAA,YAAY,EAAA;AADL,WADT,CAAA;AAID;AACF,OArBW;AAsBZ,MAAA,KAAK,EAAE,UAAC,IAAD,EAAgB;AACrB,QAAA,SAAS,CAAC,GAAV;AACD;AAxBW,KADkB,EA2BhC,EA3BkB,EAApB;AA4BA,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,eADL,CAAA,EACoB;AAClB,MAAA,QAAQ,EAAE;AADQ,KADpB,CAAA;AAID,GApCM;;AAsCA,EAAA,SAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,cAAvB,EAA6C;AAC3C,QAAM,QAAQ,GAAG,cAAc,CAAC,IAAhC;;AACA,QAAI,QAAJ,EAAc;AACZ,UAAI,IAAI,GAAG,QAAX;;AACA,UAAM,IAAI,GAAA,cAAA,CAAO,KAAK,IAAZ,CAAV;;AACA,aAAO,IAAI,CAAC,MAAL,GAAc,CAArB,EAAwB;AACtB,YAAM,IAAI,GAAG,IAAI,CAAC,KAAL,EAAb;;AACA,YAAI,IAAI,CAAC,IAAD,CAAR,EAAgB;AACd,UAAA,IAAI,GAAG,IAAI,CAAC,IAAD,CAAX;AACD;AACF;;AACD,MAAA,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAJ,GAAgB,KAAK,SAAL,CAAe,IAAI,CAAC,IAAI,CAAC,CAAD,CAAL,CAAnB,CAAhB;AACD;;AAED,WAAO;AACL,MAAA,IAAI,EAAE,QADD;AAEL,MAAA,MAAM,EAAE,cAAc,CAAC;AAFlB,KAAP;AAID,GAlBM;;AAmBT,SAAA,SAAA;AAAC,CApED,EAAA","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar WrapQuery = /** @class */ (function () {\n    function WrapQuery(path, wrapper, extractor) {\n        this.path = path;\n        this.wrapper = wrapper;\n        this.extractor = extractor;\n    }\n    WrapQuery.prototype.transformRequest = function (originalRequest) {\n        var _a;\n        var _this = this;\n        var document = originalRequest.document;\n        var fieldPath = [];\n        var ourPath = JSON.stringify(this.path);\n        var newDocument = graphql_1.visit(document, (_a = {},\n            _a[graphql_1.Kind.FIELD] = {\n                enter: function (node) {\n                    fieldPath.push(node.name.value);\n                    if (ourPath === JSON.stringify(fieldPath)) {\n                        var wrapResult = _this.wrapper(node.selectionSet);\n                        // Selection can be either a single selection or a selection set. If it's just one selection,\n                        // let's wrap it in a selection set. Otherwise, keep it as is.\n                        var selectionSet = wrapResult.kind === graphql_1.Kind.SELECTION_SET\n                            ? wrapResult\n                            : {\n                                kind: graphql_1.Kind.SELECTION_SET,\n                                selections: [wrapResult]\n                            };\n                        return __assign(__assign({}, node), { selectionSet: selectionSet });\n                    }\n                },\n                leave: function (node) {\n                    fieldPath.pop();\n                }\n            },\n            _a));\n        return __assign(__assign({}, originalRequest), { document: newDocument });\n    };\n    WrapQuery.prototype.transformResult = function (originalResult) {\n        var rootData = originalResult.data;\n        if (rootData) {\n            var data = rootData;\n            var path = __spreadArrays(this.path);\n            while (path.length > 1) {\n                var next = path.shift();\n                if (data[next]) {\n                    data = data[next];\n                }\n            }\n            data[path[0]] = this.extractor(data[path[0]]);\n        }\n        return {\n            data: rootData,\n            errors: originalResult.errors\n        };\n    };\n    return WrapQuery;\n}());\nexports.default = WrapQuery;\n//# sourceMappingURL=WrapQuery.js.map"]},"metadata":{},"sourceType":"script"}