{"ast":null,"code":"const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretsshhhhh';\nconst expiration = '2h';\nmodule.exports = {\n  authMiddleware: function (_ref) {\n    let {\n      req\n    } = _ref;\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization; // [\"Bearer\", \"<tokenvalue>\"]\n\n    if (req.headers.authorization) {\n      token = token.split(' ').pop().trim();\n    }\n\n    console.log(\"token\", token);\n\n    if (!token) {\n      return req;\n    }\n\n    try {\n      const {\n        data\n      } = jwt.verify(token, secret, {\n        maxAge: expiration\n      });\n      req.user = data;\n    } catch {\n      console.log('Invalid token');\n    }\n\n    return req;\n  },\n  signToken: function (_ref2) {\n    let {\n      firstName,\n      email,\n      _id\n    } = _ref2;\n    const payload = {\n      firstName,\n      email,\n      _id\n    };\n    return jwt.sign({\n      data: payload\n    }, secret, {\n      expiresIn: expiration\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/utils/auth.js"],"names":["jwt","require","secret","expiration","module","exports","authMiddleware","req","token","body","query","headers","authorization","split","pop","trim","console","log","data","verify","maxAge","user","signToken","firstName","email","_id","payload","sign","expiresIn"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMC,MAAM,GAAG,iBAAf;AACA,MAAMC,UAAU,GAAG,IAAnB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,cAAc,EAAE,gBAAmB;AAAA,QAAT;AAAEC,MAAAA;AAAF,KAAS;AACjC;AACA,QAAIC,KAAK,GAAGD,GAAG,CAACE,IAAJ,CAASD,KAAT,IAAkBD,GAAG,CAACG,KAAJ,CAAUF,KAA5B,IAAqCD,GAAG,CAACI,OAAJ,CAAYC,aAA7D,CAFiC,CAIjC;;AACA,QAAIL,GAAG,CAACI,OAAJ,CAAYC,aAAhB,EAA+B;AAC7BJ,MAAAA,KAAK,GAAGA,KAAK,CACVK,KADK,CACC,GADD,EAELC,GAFK,GAGLC,IAHK,EAAR;AAID;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBT,KAArB;;AAGA,QAAI,CAACA,KAAL,EAAY;AACV,aAAOD,GAAP;AACD;;AAED,QAAI;AACF,YAAM;AAAEW,QAAAA;AAAF,UAAWlB,GAAG,CAACmB,MAAJ,CAAWX,KAAX,EAAkBN,MAAlB,EAA0B;AAAEkB,QAAAA,MAAM,EAAEjB;AAAV,OAA1B,CAAjB;AACAI,MAAAA,GAAG,CAACc,IAAJ,GAAWH,IAAX;AACD,KAHD,CAIA,MAAM;AACJF,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;;AAED,WAAOV,GAAP;AACD,GA7Bc;AA8Bfe,EAAAA,SAAS,EAAE,iBAAqC;AAAA,QAA3B;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB,KAA2B;AAC9C,UAAMC,OAAO,GAAG;AAAEH,MAAAA,SAAF;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB,KAAhB;AAEA,WAAOzB,GAAG,CAAC2B,IAAJ,CACL;AAAET,MAAAA,IAAI,EAAEQ;AAAR,KADK,EAELxB,MAFK,EAGL;AAAE0B,MAAAA,SAAS,EAAEzB;AAAb,KAHK,CAAP;AAKD;AAtCc,CAAjB","sourcesContent":["const jwt = require('jsonwebtoken');\n\nconst secret = 'mysecretsshhhhh';\nconst expiration = '2h';\n\nmodule.exports = {\n  authMiddleware: function ({ req }) {\n    // allows token to be sent via req.body, req.query, or headers\n    let token = req.body.token || req.query.token || req.headers.authorization;\n\n    // [\"Bearer\", \"<tokenvalue>\"]\n    if (req.headers.authorization) {\n      token = token\n        .split(' ')\n        .pop()\n        .trim();\n    }\n\n    console.log(\"token\", token)\n\n\n    if (!token) {\n      return req;\n    }\n\n    try {\n      const { data } = jwt.verify(token, secret, { maxAge: expiration });\n      req.user = data;\n    }\n    catch {\n      console.log('Invalid token');\n    }\n\n    return req;\n  },\n  signToken: function ({ firstName, email, _id }) {\n    const payload = { firstName, email, _id };\n\n    return jwt.sign(\n      { data: payload },\n      secret,\n      { expiresIn: expiration }\n    );\n  }\n};"]},"metadata":{},"sourceType":"script"}