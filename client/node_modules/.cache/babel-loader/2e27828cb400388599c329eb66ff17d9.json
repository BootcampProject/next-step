{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\n\nfunction generateProxyingResolvers(targetSchema, transforms, mapping) {\n  var result = {};\n  Object.keys(mapping).forEach(function (name) {\n    result[name] = {};\n    var innerMapping = mapping[name];\n    Object.keys(innerMapping).forEach(function (from) {\n      var _a;\n\n      var to = innerMapping[from];\n      var resolverType = to.operation === 'subscription' ? 'subscribe' : 'resolve';\n      result[name][from] = (_a = {}, _a[resolverType] = createProxyingResolver(targetSchema, to.operation, to.name, transforms), _a);\n    });\n  });\n  return result;\n}\n\nexports.generateProxyingResolvers = generateProxyingResolvers;\n\nfunction generateSimpleMapping(targetSchema) {\n  var query = targetSchema.getQueryType();\n  var mutation = targetSchema.getMutationType();\n  var subscription = targetSchema.getSubscriptionType();\n  var result = {};\n\n  if (query) {\n    result[query.name] = generateMappingFromObjectType(query, 'query');\n  }\n\n  if (mutation) {\n    result[mutation.name] = generateMappingFromObjectType(mutation, 'mutation');\n  }\n\n  if (subscription) {\n    result[subscription.name] = generateMappingFromObjectType(subscription, 'subscription');\n  }\n\n  return result;\n}\n\nexports.generateSimpleMapping = generateSimpleMapping;\n\nfunction generateMappingFromObjectType(type, operation) {\n  var result = {};\n  var fields = type.getFields();\n  Object.keys(fields).forEach(function (fieldName) {\n    result[fieldName] = {\n      name: fieldName,\n      operation: operation\n    };\n  });\n  return result;\n}\n\nexports.generateMappingFromObjectType = generateMappingFromObjectType;\n\nfunction createProxyingResolver(schema, operation, fieldName, transforms) {\n  return function (parent, args, context, info) {\n    return delegateToSchema_1.default({\n      schema: schema,\n      operation: operation,\n      fieldName: fieldName,\n      args: {},\n      context: context,\n      info: info,\n      transforms: transforms\n    });\n  };\n}","map":{"version":3,"sources":["../../src/stitching/resolvers.ts"],"names":[],"mappings":";;;;AAMA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAYA,SAAgB,yBAAhB,CACE,YADF,EAEE,UAFF,EAGE,OAHF,EAGkB;AAEhB,MAAM,MAAM,GAAG,EAAf;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAA,IAAA,EAAI;AAC/B,IAAA,MAAM,CAAC,IAAD,CAAN,GAAe,EAAf;AACA,QAAM,YAAY,GAAG,OAAO,CAAC,IAAD,CAA5B;AACA,IAAA,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,OAA1B,CAAkC,UAAA,IAAA,EAAI;;;AACpC,UAAM,EAAE,GAAG,YAAY,CAAC,IAAD,CAAvB;AACA,UAAM,YAAY,GAChB,EAAE,CAAC,SAAH,KAAiB,cAAjB,GAAkC,WAAlC,GAAgD,SADlD;AAEA,MAAA,MAAM,CAAC,IAAD,CAAN,CAAa,IAAb,KAAkB,EAAA,GAAA,EAAA,EAChB,EAAA,CAAC,YAAD,CAAA,GAAgB,sBAAsB,CACpC,YADoC,EAEpC,EAAE,CAAC,SAFiC,EAGpC,EAAE,CAAC,IAHiC,EAIpC,UAJoC,CADtB,EAOjB,EAPD;AAQD,KAZD;AAaD,GAhBD;AAiBA,SAAO,MAAP;AACD;;AAxBD,OAAA,CAAA,yBAAA,GAAA,yBAAA;;AA0BA,SAAgB,qBAAhB,CAAsC,YAAtC,EAAiE;AAC/D,MAAM,KAAK,GAAG,YAAY,CAAC,YAAb,EAAd;AACA,MAAM,QAAQ,GAAG,YAAY,CAAC,eAAb,EAAjB;AACA,MAAM,YAAY,GAAG,YAAY,CAAC,mBAAb,EAArB;AAEA,MAAM,MAAM,GAAY,EAAxB;;AACA,MAAI,KAAJ,EAAW;AACT,IAAA,MAAM,CAAC,KAAK,CAAC,IAAP,CAAN,GAAqB,6BAA6B,CAAC,KAAD,EAAQ,OAAR,CAAlD;AACD;;AACD,MAAI,QAAJ,EAAc;AACZ,IAAA,MAAM,CAAC,QAAQ,CAAC,IAAV,CAAN,GAAwB,6BAA6B,CAAC,QAAD,EAAW,UAAX,CAArD;AACD;;AACD,MAAI,YAAJ,EAAkB;AAChB,IAAA,MAAM,CAAC,YAAY,CAAC,IAAd,CAAN,GAA4B,6BAA6B,CACvD,YADuD,EAEvD,cAFuD,CAAzD;AAID;;AAED,SAAO,MAAP;AACD;;AApBD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAsBA,SAAgB,6BAAhB,CACE,IADF,EAEE,SAFF,EAEsB;AAOpB,MAAM,MAAM,GAAG,EAAf;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAL,EAAf;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAA,SAAA,EAAS;AACnC,IAAA,MAAM,CAAC,SAAD,CAAN,GAAoB;AAClB,MAAA,IAAI,EAAE,SADY;AAElB,MAAA,SAAS,EAAA;AAFS,KAApB;AAID,GALD;AAMA,SAAO,MAAP;AACD;;AAlBD,OAAA,CAAA,6BAAA,GAAA,6BAAA;;AAoBA,SAAS,sBAAT,CACE,MADF,EAEE,SAFF,EAGE,SAHF,EAIE,UAJF,EAI8B;AAE5B,SAAO,UAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB,EAA4B;AAAK,WAAA,kBAAA,CAAA,OAAA,CAAiB;AACvD,MAAA,MAAM,EAAA,MADiD;AAEvD,MAAA,SAAS,EAAA,SAF8C;AAGvD,MAAA,SAAS,EAAA,SAH8C;AAIvD,MAAA,IAAI,EAAE,EAJiD;AAKvD,MAAA,OAAO,EAAA,OALgD;AAMvD,MAAA,IAAI,EAAA,IANmD;AAOvD,MAAA,UAAU,EAAA;AAP6C,KAAjB,CAAA;AAQtC,GARF;AASD","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nfunction generateProxyingResolvers(targetSchema, transforms, mapping) {\n    var result = {};\n    Object.keys(mapping).forEach(function (name) {\n        result[name] = {};\n        var innerMapping = mapping[name];\n        Object.keys(innerMapping).forEach(function (from) {\n            var _a;\n            var to = innerMapping[from];\n            var resolverType = to.operation === 'subscription' ? 'subscribe' : 'resolve';\n            result[name][from] = (_a = {},\n                _a[resolverType] = createProxyingResolver(targetSchema, to.operation, to.name, transforms),\n                _a);\n        });\n    });\n    return result;\n}\nexports.generateProxyingResolvers = generateProxyingResolvers;\nfunction generateSimpleMapping(targetSchema) {\n    var query = targetSchema.getQueryType();\n    var mutation = targetSchema.getMutationType();\n    var subscription = targetSchema.getSubscriptionType();\n    var result = {};\n    if (query) {\n        result[query.name] = generateMappingFromObjectType(query, 'query');\n    }\n    if (mutation) {\n        result[mutation.name] = generateMappingFromObjectType(mutation, 'mutation');\n    }\n    if (subscription) {\n        result[subscription.name] = generateMappingFromObjectType(subscription, 'subscription');\n    }\n    return result;\n}\nexports.generateSimpleMapping = generateSimpleMapping;\nfunction generateMappingFromObjectType(type, operation) {\n    var result = {};\n    var fields = type.getFields();\n    Object.keys(fields).forEach(function (fieldName) {\n        result[fieldName] = {\n            name: fieldName,\n            operation: operation,\n        };\n    });\n    return result;\n}\nexports.generateMappingFromObjectType = generateMappingFromObjectType;\nfunction createProxyingResolver(schema, operation, fieldName, transforms) {\n    return function (parent, args, context, info) { return delegateToSchema_1.default({\n        schema: schema,\n        operation: operation,\n        fieldName: fieldName,\n        args: {},\n        context: context,\n        info: info,\n        transforms: transforms,\n    }); };\n}\n//# sourceMappingURL=resolvers.js.map"]},"metadata":{},"sourceType":"script"}