{"ast":null,"code":"import crypto from \"crypto\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\nexport class ReadAfterDestroyedError extends Error {}\nexport class ReadStream extends fs.ReadStream {\n  constructor(writeStream, name) {\n    super(\"\", {});\n    this.name = name;\n    this._writeStream = writeStream;\n    this.error = this._writeStream.error;\n    this.addListener(\"error\", error => {\n      this.error = error;\n    });\n    this.open();\n  }\n\n  get ended() {\n    return this._readableState.ended;\n  }\n\n  _read(n) {\n    if (typeof this.fd !== \"number\") return this.once(\"open\", function () {\n      this._read(n);\n    });\n    if (this._writeStream.finished || this._writeStream.closed) return super._read(n);\n    const unread = this._writeStream.bytesWritten - this.bytesRead;\n\n    if (unread === 0) {\n      const retry = () => {\n        this._writeStream.removeListener(\"finish\", retry);\n\n        this._writeStream.removeListener(\"write\", retry);\n\n        this._read(n);\n      };\n\n      this._writeStream.addListener(\"finish\", retry);\n\n      this._writeStream.addListener(\"write\", retry);\n\n      return;\n    }\n\n    return super._read(Math.min(n, unread));\n  }\n\n  _destroy(error, callback) {\n    if (typeof this.fd !== \"number\") {\n      this.once(\"open\", this._destroy.bind(this, error, callback));\n      return;\n    }\n\n    fs.close(this.fd, closeError => {\n      callback(closeError || error);\n      this.fd = null;\n      this.closed = true;\n      this.emit(\"close\");\n    });\n  }\n\n  open() {\n    if (!this._writeStream) return;\n\n    if (typeof this._writeStream.fd !== \"number\") {\n      this._writeStream.once(\"open\", () => this.open());\n\n      return;\n    }\n\n    this.path = this._writeStream.path;\n    super.open();\n  }\n\n}\nexport class WriteStream extends fs.WriteStream {\n  constructor() {\n    super(\"\", {\n      autoClose: false\n    });\n    this._readStreams = new Set();\n    this.error = null;\n\n    this._cleanupSync = () => {\n      process.removeListener(\"exit\", this._cleanupSync);\n      process.removeListener(\"SIGINT\", this._cleanupSync);\n      if (typeof this.fd === \"number\") try {\n        fs.closeSync(this.fd);\n      } catch (error) {}\n\n      try {\n        fs.unlinkSync(this.path);\n      } catch (error) {}\n    };\n  }\n\n  get finished() {\n    return this._writableState.finished;\n  }\n\n  open() {\n    crypto.randomBytes(16, (error, buffer) => {\n      if (error) {\n        this.destroy(error);\n        return;\n      }\n\n      this.path = path.join(os.tmpdir(), `capacitor-${buffer.toString(\"hex\")}.tmp`);\n      fs.open(this.path, \"wx\", this.mode, (error, fd) => {\n        if (error) {\n          this.destroy(error);\n          return;\n        }\n\n        process.addListener(\"exit\", this._cleanupSync);\n        process.addListener(\"SIGINT\", this._cleanupSync);\n        this.fd = fd;\n        this.emit(\"open\", fd);\n        this.emit(\"ready\");\n      });\n    });\n  }\n\n  _write(chunk, encoding, callback) {\n    super._write(chunk, encoding, error => {\n      if (!error) this.emit(\"write\");\n      callback(error);\n    });\n  }\n\n  _destroy(error, callback) {\n    if (typeof this.fd !== \"number\") {\n      this.once(\"open\", this._destroy.bind(this, error, callback));\n      return;\n    }\n\n    process.removeListener(\"exit\", this._cleanupSync);\n    process.removeListener(\"SIGINT\", this._cleanupSync);\n\n    const unlink = error => {\n      fs.unlink(this.path, unlinkError => {\n        callback(unlinkError || error);\n        this.fd = null;\n        this.closed = true;\n        this.emit(\"close\");\n      });\n    };\n\n    if (typeof this.fd === \"number\") {\n      fs.close(this.fd, closeError => {\n        unlink(closeError || error);\n      });\n      return;\n    }\n\n    unlink(error);\n  }\n\n  destroy(error, callback) {\n    if (error) this.error = error;\n    if (this.destroyed) return super.destroy(error, callback);\n    if (typeof callback === \"function\") this.once(\"close\", callback.bind(this, error));\n\n    if (this._readStreams.size === 0) {\n      super.destroy(error, callback);\n      return;\n    }\n\n    this._destroyPending = true;\n    if (error) for (let readStream of this._readStreams) readStream.destroy(error);\n  }\n\n  createReadStream(name) {\n    if (this.destroyed) throw new ReadAfterDestroyedError(\"A ReadStream cannot be created from a destroyed WriteStream.\");\n    const readStream = new ReadStream(this, name);\n\n    this._readStreams.add(readStream);\n\n    const remove = () => {\n      this._deleteReadStream(readStream);\n\n      readStream.removeListener(\"end\", remove);\n      readStream.removeListener(\"close\", remove);\n    };\n\n    readStream.addListener(\"end\", remove);\n    readStream.addListener(\"close\", remove);\n    return readStream;\n  }\n\n  _deleteReadStream(readStream) {\n    if (this._readStreams.delete(readStream) && this._destroyPending) this.destroy();\n  }\n\n}\nexport default WriteStream;","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/node_modules/fs-capacitor/lib/index.mjs"],"names":["crypto","fs","os","path","ReadAfterDestroyedError","Error","ReadStream","constructor","writeStream","name","_writeStream","error","addListener","open","ended","_readableState","_read","n","fd","once","finished","closed","unread","bytesWritten","bytesRead","retry","removeListener","Math","min","_destroy","callback","bind","close","closeError","emit","WriteStream","autoClose","_readStreams","Set","_cleanupSync","process","closeSync","unlinkSync","_writableState","randomBytes","buffer","destroy","join","tmpdir","toString","mode","_write","chunk","encoding","unlink","unlinkError","destroyed","size","_destroyPending","readStream","createReadStream","add","remove","_deleteReadStream","delete"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\nexport class ReadAfterDestroyedError extends Error {}\nexport class ReadStream extends fs.ReadStream {\n  constructor(writeStream, name) {\n    super(\"\", {});\n    this.name = name;\n    this._writeStream = writeStream;\n    this.error = this._writeStream.error;\n    this.addListener(\"error\", error => {\n      this.error = error;\n    });\n    this.open();\n  }\n\n  get ended() {\n    return this._readableState.ended;\n  }\n\n  _read(n) {\n    if (typeof this.fd !== \"number\")\n      return this.once(\"open\", function() {\n        this._read(n);\n      });\n    if (this._writeStream.finished || this._writeStream.closed)\n      return super._read(n);\n    const unread = this._writeStream.bytesWritten - this.bytesRead;\n\n    if (unread === 0) {\n      const retry = () => {\n        this._writeStream.removeListener(\"finish\", retry);\n\n        this._writeStream.removeListener(\"write\", retry);\n\n        this._read(n);\n      };\n\n      this._writeStream.addListener(\"finish\", retry);\n\n      this._writeStream.addListener(\"write\", retry);\n\n      return;\n    }\n\n    return super._read(Math.min(n, unread));\n  }\n\n  _destroy(error, callback) {\n    if (typeof this.fd !== \"number\") {\n      this.once(\"open\", this._destroy.bind(this, error, callback));\n      return;\n    }\n\n    fs.close(this.fd, closeError => {\n      callback(closeError || error);\n      this.fd = null;\n      this.closed = true;\n      this.emit(\"close\");\n    });\n  }\n\n  open() {\n    if (!this._writeStream) return;\n\n    if (typeof this._writeStream.fd !== \"number\") {\n      this._writeStream.once(\"open\", () => this.open());\n\n      return;\n    }\n\n    this.path = this._writeStream.path;\n    super.open();\n  }\n}\nexport class WriteStream extends fs.WriteStream {\n  constructor() {\n    super(\"\", {\n      autoClose: false\n    });\n    this._readStreams = new Set();\n    this.error = null;\n\n    this._cleanupSync = () => {\n      process.removeListener(\"exit\", this._cleanupSync);\n      process.removeListener(\"SIGINT\", this._cleanupSync);\n      if (typeof this.fd === \"number\")\n        try {\n          fs.closeSync(this.fd);\n        } catch (error) {}\n\n      try {\n        fs.unlinkSync(this.path);\n      } catch (error) {}\n    };\n  }\n\n  get finished() {\n    return this._writableState.finished;\n  }\n\n  open() {\n    crypto.randomBytes(16, (error, buffer) => {\n      if (error) {\n        this.destroy(error);\n        return;\n      }\n\n      this.path = path.join(\n        os.tmpdir(),\n        `capacitor-${buffer.toString(\"hex\")}.tmp`\n      );\n      fs.open(this.path, \"wx\", this.mode, (error, fd) => {\n        if (error) {\n          this.destroy(error);\n          return;\n        }\n\n        process.addListener(\"exit\", this._cleanupSync);\n        process.addListener(\"SIGINT\", this._cleanupSync);\n        this.fd = fd;\n        this.emit(\"open\", fd);\n        this.emit(\"ready\");\n      });\n    });\n  }\n\n  _write(chunk, encoding, callback) {\n    super._write(chunk, encoding, error => {\n      if (!error) this.emit(\"write\");\n      callback(error);\n    });\n  }\n\n  _destroy(error, callback) {\n    if (typeof this.fd !== \"number\") {\n      this.once(\"open\", this._destroy.bind(this, error, callback));\n      return;\n    }\n\n    process.removeListener(\"exit\", this._cleanupSync);\n    process.removeListener(\"SIGINT\", this._cleanupSync);\n\n    const unlink = error => {\n      fs.unlink(this.path, unlinkError => {\n        callback(unlinkError || error);\n        this.fd = null;\n        this.closed = true;\n        this.emit(\"close\");\n      });\n    };\n\n    if (typeof this.fd === \"number\") {\n      fs.close(this.fd, closeError => {\n        unlink(closeError || error);\n      });\n      return;\n    }\n\n    unlink(error);\n  }\n\n  destroy(error, callback) {\n    if (error) this.error = error;\n    if (this.destroyed) return super.destroy(error, callback);\n    if (typeof callback === \"function\")\n      this.once(\"close\", callback.bind(this, error));\n\n    if (this._readStreams.size === 0) {\n      super.destroy(error, callback);\n      return;\n    }\n\n    this._destroyPending = true;\n    if (error)\n      for (let readStream of this._readStreams) readStream.destroy(error);\n  }\n\n  createReadStream(name) {\n    if (this.destroyed)\n      throw new ReadAfterDestroyedError(\n        \"A ReadStream cannot be created from a destroyed WriteStream.\"\n      );\n    const readStream = new ReadStream(this, name);\n\n    this._readStreams.add(readStream);\n\n    const remove = () => {\n      this._deleteReadStream(readStream);\n\n      readStream.removeListener(\"end\", remove);\n      readStream.removeListener(\"close\", remove);\n    };\n\n    readStream.addListener(\"end\", remove);\n    readStream.addListener(\"close\", remove);\n    return readStream;\n  }\n\n  _deleteReadStream(readStream) {\n    if (this._readStreams.delete(readStream) && this._destroyPending)\n      this.destroy();\n  }\n}\nexport default WriteStream;\n"]},"metadata":{},"sourceType":"module"}