{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signatureCacheKey = exports.createSignatureCache = void 0;\n\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\n\nfunction createSignatureCache(_ref) {\n  let {\n    logger\n  } = _ref;\n  let lastSignatureCacheWarn;\n  let lastSignatureCacheDisposals = 0;\n  return new lru_cache_1.default({\n    length(obj) {\n      return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n    },\n\n    max: Math.pow(2, 20) * 3,\n\n    dispose() {\n      lastSignatureCacheDisposals++;\n\n      if (!lastSignatureCacheWarn || new Date().getTime() - lastSignatureCacheWarn.getTime() > 60000) {\n        lastSignatureCacheWarn = new Date();\n        logger.warn(['This server is processing a high number of unique operations.  ', `A total of ${lastSignatureCacheDisposals} records have been `, 'ejected from the ApolloServerPluginUsageReporting signature cache in the past ', 'interval.  If you see this warning frequently, please open an ', 'issue on the Apollo Server repository.'].join(''));\n        lastSignatureCacheDisposals = 0;\n      }\n    }\n\n  });\n}\n\nexports.createSignatureCache = createSignatureCache;\n\nfunction signatureCacheKey(queryHash, operationName) {\n  return `${queryHash}${operationName && ':' + operationName}`;\n}\n\nexports.signatureCacheKey = signatureCacheKey;","map":{"version":3,"sources":["../../../src/plugin/usageReporting/signatureCache.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAGA,SAAgB,oBAAhB,OAIC;AAAA,MAJoC;AACnC,IAAA;AADmC,GAIpC;AACC,MAAI,sBAAJ;AACA,MAAI,2BAA2B,GAAW,CAA1C;AACA,SAAO,IAAI,WAAA,CAAA,OAAJ,CAA6B;AAElC,IAAA,MAAM,CAAC,GAAD,EAAI;AACR,aAAO,MAAM,CAAC,UAAP,CAAkB,IAAI,CAAC,SAAL,CAAe,GAAf,CAAlB,EAAuC,MAAvC,CAAP;AACD,KAJiC;;AAclC,IAAA,GAAG,EAAE,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAdW;;AAelC,IAAA,OAAO,GAAA;AAEL,MAAA,2BAA2B;;AAG3B,UACE,CAAC,sBAAD,IACA,IAAI,IAAJ,GAAW,OAAX,KAAuB,sBAAsB,CAAC,OAAvB,EAAvB,GAA0D,KAF5D,EAGE;AAEA,QAAA,sBAAsB,GAAG,IAAI,IAAJ,EAAzB;AACA,QAAA,MAAM,CAAC,IAAP,CACE,CACE,iEADF,EAEE,cAAc,2BAA2B,qBAF3C,EAGE,gFAHF,EAIE,gEAJF,EAKE,wCALF,EAME,IANF,CAMO,EANP,CADF;AAWA,QAAA,2BAA2B,GAAG,CAA9B;AACD;AACF;;AAvCiC,GAA7B,CAAP;AAyCD;;AAhDD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAkDA,SAAgB,iBAAhB,CAAkC,SAAlC,EAAqD,aAArD,EAA0E;AACxE,SAAO,GAAG,SAAS,GAAG,aAAa,IAAI,MAAM,aAAa,EAA1D;AACD;;AAFD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signatureCacheKey = exports.createSignatureCache = void 0;\nconst lru_cache_1 = __importDefault(require(\"lru-cache\"));\nfunction createSignatureCache({ logger, }) {\n    let lastSignatureCacheWarn;\n    let lastSignatureCacheDisposals = 0;\n    return new lru_cache_1.default({\n        length(obj) {\n            return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        },\n        max: Math.pow(2, 20) * 3,\n        dispose() {\n            lastSignatureCacheDisposals++;\n            if (!lastSignatureCacheWarn ||\n                new Date().getTime() - lastSignatureCacheWarn.getTime() > 60000) {\n                lastSignatureCacheWarn = new Date();\n                logger.warn([\n                    'This server is processing a high number of unique operations.  ',\n                    `A total of ${lastSignatureCacheDisposals} records have been `,\n                    'ejected from the ApolloServerPluginUsageReporting signature cache in the past ',\n                    'interval.  If you see this warning frequently, please open an ',\n                    'issue on the Apollo Server repository.',\n                ].join(''));\n                lastSignatureCacheDisposals = 0;\n            }\n        },\n    });\n}\nexports.createSignatureCache = createSignatureCache;\nfunction signatureCacheKey(queryHash, operationName) {\n    return `${queryHash}${operationName && ':' + operationName}`;\n}\nexports.signatureCacheKey = signatureCacheKey;\n//# sourceMappingURL=signatureCache.js.map"]},"metadata":{},"sourceType":"script"}