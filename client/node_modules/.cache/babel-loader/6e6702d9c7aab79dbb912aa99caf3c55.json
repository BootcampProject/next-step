{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.enableGraphQLExtensions = exports.GraphQLExtensionStack = exports.GraphQLExtension = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nclass GraphQLExtension {}\n\nexports.GraphQLExtension = GraphQLExtension;\n\nclass GraphQLExtensionStack {\n  constructor(extensions) {\n    this.extensions = extensions;\n  }\n\n  requestDidStart(o) {\n    return this.handleDidStart(ext => ext.requestDidStart && ext.requestDidStart(o));\n  }\n\n  parsingDidStart(o) {\n    return this.handleDidStart(ext => ext.parsingDidStart && ext.parsingDidStart(o));\n  }\n\n  validationDidStart() {\n    return this.handleDidStart(ext => ext.validationDidStart && ext.validationDidStart());\n  }\n\n  executionDidStart(o) {\n    if (o.executionArgs.fieldResolver) {\n      this.fieldResolver = o.executionArgs.fieldResolver;\n    }\n\n    return this.handleDidStart(ext => ext.executionDidStart && ext.executionDidStart(o));\n  }\n\n  didEncounterErrors(errors) {\n    this.extensions.forEach(extension => {\n      if (extension.didEncounterErrors) {\n        extension.didEncounterErrors(errors);\n      }\n    });\n  }\n\n  willSendResponse(o) {\n    let reference = o;\n    [...this.extensions].reverse().forEach(extension => {\n      if (extension.willSendResponse) {\n        const result = extension.willSendResponse(reference);\n\n        if (result) {\n          reference = result;\n        }\n      }\n    });\n    return reference;\n  }\n\n  willResolveField(source, args, context, info) {\n    const handlers = this.extensions.map(extension => extension.willResolveField && extension.willResolveField(source, args, context, info)).filter(x => x).reverse();\n    return (error, result) => {\n      for (const handler of handlers) {\n        handler(error, result);\n      }\n    };\n  }\n\n  format() {\n    return this.extensions.map(extension => extension.format && extension.format()).filter(x => x).reduce((extensions, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(extensions, {\n        [key]: value\n      });\n    }, {});\n  }\n\n  handleDidStart(startInvoker) {\n    const endHandlers = [];\n    this.extensions.forEach(extension => {\n      try {\n        const endHandler = startInvoker(extension);\n\n        if (endHandler) {\n          endHandlers.push(endHandler);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function () {\n      endHandlers.reverse();\n\n      for (const endHandler of endHandlers) {\n        try {\n          endHandler(...arguments);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    };\n  }\n\n}\n\nexports.GraphQLExtensionStack = GraphQLExtensionStack;\n\nfunction enableGraphQLExtensions(schema) {\n  if (schema._extensionsEnabled) {\n    return schema;\n  }\n\n  schema._extensionsEnabled = true;\n  forEachField(schema, wrapField);\n  return schema;\n}\n\nexports.enableGraphQLExtensions = enableGraphQLExtensions;\n\nfunction wrapField(field) {\n  const fieldResolver = field.resolve;\n\n  field.resolve = (source, args, context, info) => {\n    const parentPath = info.path.prev;\n    const extensionStack = context && context._extensionStack;\n\n    const handler = extensionStack && extensionStack.willResolveField(source, args, context, info) || ((_err, _result) => {});\n\n    const resolveObject = info.parentType.resolveObject;\n    let whenObjectResolved;\n\n    if (parentPath && resolveObject) {\n      if (!parentPath.__fields) {\n        parentPath.__fields = {};\n      }\n\n      parentPath.__fields[info.fieldName] = info.fieldNodes;\n      whenObjectResolved = parentPath.__whenObjectResolved;\n\n      if (!whenObjectResolved) {\n        whenObjectResolved = Promise.resolve().then(() => {\n          return resolveObject(source, parentPath.__fields, context, info);\n        });\n        parentPath.__whenObjectResolved = whenObjectResolved;\n      }\n    }\n\n    try {\n      const actualFieldResolver = fieldResolver || extensionStack && extensionStack.fieldResolver || graphql_1.defaultFieldResolver;\n      let result;\n\n      if (whenObjectResolved) {\n        result = whenObjectResolved.then(resolvedObject => {\n          return actualFieldResolver(resolvedObject, args, context, info);\n        });\n      } else {\n        result = actualFieldResolver(source, args, context, info);\n      }\n\n      whenResultIsFinished(result, handler);\n      return result;\n    } catch (error) {\n      handler(error);\n      throw error;\n    }\n  };\n}\n\nfunction isPromise(x) {\n  return x && typeof x.then === 'function';\n}\n\nfunction whenResultIsFinished(result, callback) {\n  if (isPromise(result)) {\n    result.then(r => callback(null, r), err => callback(err));\n  } else if (Array.isArray(result)) {\n    if (result.some(isPromise)) {\n      Promise.all(result).then(r => callback(null, r), err => callback(err));\n    } else {\n      callback(null, result);\n    }\n  } else {\n    callback(null, result);\n  }\n}\n\nfunction forEachField(schema, fn) {\n  const typeMap = schema.getTypeMap();\n  Object.keys(typeMap).forEach(typeName => {\n    const type = typeMap[typeName];\n\n    if (!graphql_1.getNamedType(type).name.startsWith('__') && type instanceof graphql_1.GraphQLObjectType) {\n      const fields = type.getFields();\n      Object.keys(fields).forEach(fieldName => {\n        const field = fields[fieldName];\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.enableGraphQLExtensions = exports.GraphQLExtensionStack = exports.GraphQLExtension = void 0;\nconst graphql_1 = require(\"graphql\");\nclass GraphQLExtension {\n}\nexports.GraphQLExtension = GraphQLExtension;\nclass GraphQLExtensionStack {\n    constructor(extensions) {\n        this.extensions = extensions;\n    }\n    requestDidStart(o) {\n        return this.handleDidStart(ext => ext.requestDidStart && ext.requestDidStart(o));\n    }\n    parsingDidStart(o) {\n        return this.handleDidStart(ext => ext.parsingDidStart && ext.parsingDidStart(o));\n    }\n    validationDidStart() {\n        return this.handleDidStart(ext => ext.validationDidStart && ext.validationDidStart());\n    }\n    executionDidStart(o) {\n        if (o.executionArgs.fieldResolver) {\n            this.fieldResolver = o.executionArgs.fieldResolver;\n        }\n        return this.handleDidStart(ext => ext.executionDidStart && ext.executionDidStart(o));\n    }\n    didEncounterErrors(errors) {\n        this.extensions.forEach(extension => {\n            if (extension.didEncounterErrors) {\n                extension.didEncounterErrors(errors);\n            }\n        });\n    }\n    willSendResponse(o) {\n        let reference = o;\n        [...this.extensions].reverse().forEach(extension => {\n            if (extension.willSendResponse) {\n                const result = extension.willSendResponse(reference);\n                if (result) {\n                    reference = result;\n                }\n            }\n        });\n        return reference;\n    }\n    willResolveField(source, args, context, info) {\n        const handlers = this.extensions\n            .map(extension => extension.willResolveField &&\n            extension.willResolveField(source, args, context, info))\n            .filter(x => x)\n            .reverse();\n        return (error, result) => {\n            for (const handler of handlers) {\n                handler(error, result);\n            }\n        };\n    }\n    format() {\n        return this.extensions\n            .map(extension => extension.format && extension.format())\n            .filter(x => x).reduce((extensions, [key, value]) => Object.assign(extensions, { [key]: value }), {});\n    }\n    handleDidStart(startInvoker) {\n        const endHandlers = [];\n        this.extensions.forEach(extension => {\n            try {\n                const endHandler = startInvoker(extension);\n                if (endHandler) {\n                    endHandlers.push(endHandler);\n                }\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n        return (...errors) => {\n            endHandlers.reverse();\n            for (const endHandler of endHandlers) {\n                try {\n                    endHandler(...errors);\n                }\n                catch (error) {\n                    console.error(error);\n                }\n            }\n        };\n    }\n}\nexports.GraphQLExtensionStack = GraphQLExtensionStack;\nfunction enableGraphQLExtensions(schema) {\n    if (schema._extensionsEnabled) {\n        return schema;\n    }\n    schema._extensionsEnabled = true;\n    forEachField(schema, wrapField);\n    return schema;\n}\nexports.enableGraphQLExtensions = enableGraphQLExtensions;\nfunction wrapField(field) {\n    const fieldResolver = field.resolve;\n    field.resolve = (source, args, context, info) => {\n        const parentPath = info.path.prev;\n        const extensionStack = context && context._extensionStack;\n        const handler = (extensionStack &&\n            extensionStack.willResolveField(source, args, context, info)) ||\n            ((_err, _result) => {\n            });\n        const resolveObject = info.parentType.resolveObject;\n        let whenObjectResolved;\n        if (parentPath && resolveObject) {\n            if (!parentPath.__fields) {\n                parentPath.__fields = {};\n            }\n            parentPath.__fields[info.fieldName] = info.fieldNodes;\n            whenObjectResolved = parentPath.__whenObjectResolved;\n            if (!whenObjectResolved) {\n                whenObjectResolved = Promise.resolve().then(() => {\n                    return resolveObject(source, parentPath.__fields, context, info);\n                });\n                parentPath.__whenObjectResolved = whenObjectResolved;\n            }\n        }\n        try {\n            const actualFieldResolver = fieldResolver ||\n                (extensionStack && extensionStack.fieldResolver) ||\n                graphql_1.defaultFieldResolver;\n            let result;\n            if (whenObjectResolved) {\n                result = whenObjectResolved.then((resolvedObject) => {\n                    return actualFieldResolver(resolvedObject, args, context, info);\n                });\n            }\n            else {\n                result = actualFieldResolver(source, args, context, info);\n            }\n            whenResultIsFinished(result, handler);\n            return result;\n        }\n        catch (error) {\n            handler(error);\n            throw error;\n        }\n    };\n}\nfunction isPromise(x) {\n    return x && typeof x.then === 'function';\n}\nfunction whenResultIsFinished(result, callback) {\n    if (isPromise(result)) {\n        result.then((r) => callback(null, r), (err) => callback(err));\n    }\n    else if (Array.isArray(result)) {\n        if (result.some(isPromise)) {\n            Promise.all(result).then((r) => callback(null, r), (err) => callback(err));\n        }\n        else {\n            callback(null, result);\n        }\n    }\n    else {\n        callback(null, result);\n    }\n}\nfunction forEachField(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(typeName => {\n        const type = typeMap[typeName];\n        if (!graphql_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            const fields = type.getFields();\n            Object.keys(fields).forEach(fieldName => {\n                const field = fields[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}