{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServer = void 0;\n\nconst express_1 = __importDefault(require(\"express\"));\n\nconst cors_1 = __importDefault(require(\"cors\"));\n\nconst body_parser_1 = require(\"body-parser\");\n\nconst graphql_playground_html_1 = require(\"@apollographql/graphql-playground-html\");\n\nconst apollo_server_core_1 = require(\"apollo-server-core\");\n\nconst accepts_1 = __importDefault(require(\"accepts\"));\n\nconst type_is_1 = __importDefault(require(\"type-is\"));\n\nconst expressApollo_1 = require(\"./expressApollo\");\n\nvar apollo_server_core_2 = require(\"apollo-server-core\");\n\nObject.defineProperty(exports, \"GraphQLExtension\", {\n  enumerable: true,\n  get: function () {\n    return apollo_server_core_2.GraphQLExtension;\n  }\n});\n\nconst fileUploadMiddleware = (uploadsConfig, server) => (req, res, next) => {\n  if (typeof apollo_server_core_1.processFileUploads === 'function' && type_is_1.default(req, ['multipart/form-data'])) {\n    apollo_server_core_1.processFileUploads(req, res, uploadsConfig).then(body => {\n      req.body = body;\n      next();\n    }).catch(error => {\n      if (error.status && error.expose) res.status(error.status);\n      next(apollo_server_core_1.formatApolloErrors([error], {\n        formatter: server.requestOptions.formatError,\n        debug: server.requestOptions.debug\n      }));\n    });\n  } else {\n    next();\n  }\n};\n\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n  constructor(config) {\n    super(config);\n  }\n\n  createGraphQLServerOptions(req, res) {\n    const _super = Object.create(null, {\n      graphQLServerOptions: {\n        get: () => super.graphQLServerOptions\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.graphQLServerOptions.call(this, {\n        req,\n        res\n      });\n    });\n  }\n\n  supportsSubscriptions() {\n    return true;\n  }\n\n  supportsUploads() {\n    return true;\n  }\n\n  applyMiddleware(_a) {\n    var {\n      app\n    } = _a,\n        rest = __rest(_a, [\"app\"]);\n\n    app.use(this.getMiddleware(rest));\n  }\n\n  getMiddleware() {\n    let {\n      path,\n      cors,\n      bodyParserConfig,\n      disableHealthCheck,\n      onHealthCheck\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!path) path = '/graphql';\n    this.ensureStarting();\n    const router = express_1.default.Router();\n\n    if (!disableHealthCheck) {\n      router.use('/.well-known/apollo/server-health', (req, res) => {\n        res.type('application/health+json');\n\n        if (onHealthCheck) {\n          onHealthCheck(req).then(() => {\n            res.json({\n              status: 'pass'\n            });\n          }).catch(() => {\n            res.status(503).json({\n              status: 'fail'\n            });\n          });\n        } else {\n          res.json({\n            status: 'pass'\n          });\n        }\n      });\n    }\n\n    let uploadsMiddleware;\n\n    if (this.uploadsConfig && typeof apollo_server_core_1.processFileUploads === 'function') {\n      uploadsMiddleware = fileUploadMiddleware(this.uploadsConfig, this);\n    }\n\n    this.graphqlPath = path;\n\n    if (cors === true) {\n      router.use(path, cors_1.default());\n    } else if (cors !== false) {\n      router.use(path, cors_1.default(cors));\n    }\n\n    if (bodyParserConfig === true) {\n      router.use(path, body_parser_1.json());\n    } else if (bodyParserConfig !== false) {\n      router.use(path, body_parser_1.json(bodyParserConfig));\n    }\n\n    if (uploadsMiddleware) {\n      router.use(path, uploadsMiddleware);\n    }\n\n    router.use(path, (req, res, next) => {\n      if (this.playgroundOptions && req.method === 'GET') {\n        const accept = accepts_1.default(req);\n        const types = accept.types();\n        const prefersHTML = types.find(x => x === 'text/html' || x === 'application/json') === 'text/html';\n\n        if (prefersHTML) {\n          const playgroundRenderPageOptions = Object.assign({\n            endpoint: req.originalUrl,\n            subscriptionEndpoint: this.subscriptionsPath\n          }, this.playgroundOptions);\n          res.setHeader('Content-Type', 'text/html');\n          const playground = graphql_playground_html_1.renderPlaygroundPage(playgroundRenderPageOptions);\n          res.write(playground);\n          res.end();\n          return;\n        }\n      }\n\n      return expressApollo_1.graphqlExpress(() => this.createGraphQLServerOptions(req, res))(req, res, next);\n    });\n    return router;\n  }\n\n}\n\nexports.ApolloServer = ApolloServer;","map":{"version":3,"sources":["../src/ApolloServer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst body_parser_1 = require(\"body-parser\");\nconst graphql_playground_html_1 = require(\"@apollographql/graphql-playground-html\");\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nconst accepts_1 = __importDefault(require(\"accepts\"));\nconst type_is_1 = __importDefault(require(\"type-is\"));\nconst expressApollo_1 = require(\"./expressApollo\");\nvar apollo_server_core_2 = require(\"apollo-server-core\");\nObject.defineProperty(exports, \"GraphQLExtension\", { enumerable: true, get: function () { return apollo_server_core_2.GraphQLExtension; } });\nconst fileUploadMiddleware = (uploadsConfig, server) => (req, res, next) => {\n    if (typeof apollo_server_core_1.processFileUploads === 'function' &&\n        type_is_1.default(req, ['multipart/form-data'])) {\n        apollo_server_core_1.processFileUploads(req, res, uploadsConfig)\n            .then(body => {\n            req.body = body;\n            next();\n        })\n            .catch(error => {\n            if (error.status && error.expose)\n                res.status(error.status);\n            next(apollo_server_core_1.formatApolloErrors([error], {\n                formatter: server.requestOptions.formatError,\n                debug: server.requestOptions.debug,\n            }));\n        });\n    }\n    else {\n        next();\n    }\n};\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n    constructor(config) {\n        super(config);\n    }\n    createGraphQLServerOptions(req, res) {\n        const _super = Object.create(null, {\n            graphQLServerOptions: { get: () => super.graphQLServerOptions }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.graphQLServerOptions.call(this, { req, res });\n        });\n    }\n    supportsSubscriptions() {\n        return true;\n    }\n    supportsUploads() {\n        return true;\n    }\n    applyMiddleware(_a) {\n        var { app } = _a, rest = __rest(_a, [\"app\"]);\n        app.use(this.getMiddleware(rest));\n    }\n    getMiddleware({ path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, } = {}) {\n        if (!path)\n            path = '/graphql';\n        this.ensureStarting();\n        const router = express_1.default.Router();\n        if (!disableHealthCheck) {\n            router.use('/.well-known/apollo/server-health', (req, res) => {\n                res.type('application/health+json');\n                if (onHealthCheck) {\n                    onHealthCheck(req)\n                        .then(() => {\n                        res.json({ status: 'pass' });\n                    })\n                        .catch(() => {\n                        res.status(503).json({ status: 'fail' });\n                    });\n                }\n                else {\n                    res.json({ status: 'pass' });\n                }\n            });\n        }\n        let uploadsMiddleware;\n        if (this.uploadsConfig && typeof apollo_server_core_1.processFileUploads === 'function') {\n            uploadsMiddleware = fileUploadMiddleware(this.uploadsConfig, this);\n        }\n        this.graphqlPath = path;\n        if (cors === true) {\n            router.use(path, cors_1.default());\n        }\n        else if (cors !== false) {\n            router.use(path, cors_1.default(cors));\n        }\n        if (bodyParserConfig === true) {\n            router.use(path, body_parser_1.json());\n        }\n        else if (bodyParserConfig !== false) {\n            router.use(path, body_parser_1.json(bodyParserConfig));\n        }\n        if (uploadsMiddleware) {\n            router.use(path, uploadsMiddleware);\n        }\n        router.use(path, (req, res, next) => {\n            if (this.playgroundOptions && req.method === 'GET') {\n                const accept = accepts_1.default(req);\n                const types = accept.types();\n                const prefersHTML = types.find((x) => x === 'text/html' || x === 'application/json') === 'text/html';\n                if (prefersHTML) {\n                    const playgroundRenderPageOptions = Object.assign({ endpoint: req.originalUrl, subscriptionEndpoint: this.subscriptionsPath }, this.playgroundOptions);\n                    res.setHeader('Content-Type', 'text/html');\n                    const playground = graphql_playground_html_1.renderPlaygroundPage(playgroundRenderPageOptions);\n                    res.write(playground);\n                    res.end();\n                    return;\n                }\n            }\n            return expressApollo_1.graphqlExpress(() => this.createGraphQLServerOptions(req, res))(req, res, next);\n        });\n        return router;\n    }\n}\nexports.ApolloServer = ApolloServer;\n//# sourceMappingURL=ApolloServer.js.map"]},"metadata":{},"sourceType":"script"}