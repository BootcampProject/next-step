{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nvar filterExtensionDefinitions_1 = require(\"./filterExtensionDefinitions\");\n\nfunction buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {\n  // TODO: accept only array here, otherwise interfaces get confusing.\n  var myDefinitions = typeDefinitions;\n  var astDocument;\n\n  if (isDocumentNode(typeDefinitions)) {\n    astDocument = typeDefinitions;\n  } else if (typeof myDefinitions !== 'string') {\n    if (!Array.isArray(myDefinitions)) {\n      var type = typeof myDefinitions;\n      throw new _1.SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n    }\n\n    myDefinitions = _1.concatenateTypeDefs(myDefinitions);\n  }\n\n  if (typeof myDefinitions === 'string') {\n    astDocument = graphql_1.parse(myDefinitions, parseOptions);\n  }\n\n  var backcompatOptions = {\n    commentDescriptions: true\n  };\n  var typesAst = filterExtensionDefinitions_1.default(astDocument); // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n\n  var schema = graphql_1.buildASTSchema(typesAst, backcompatOptions);\n\n  var extensionsAst = _1.extractExtensionDefinitions(astDocument);\n\n  if (extensionsAst.definitions.length > 0) {\n    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n    schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);\n  }\n\n  return schema;\n}\n\nfunction isDocumentNode(typeDefinitions) {\n  return typeDefinitions.kind !== undefined;\n}\n\nexports.default = buildSchemaFromTypeDefinitions;","map":{"version":3,"sources":["../../src/generate/buildSchemaFromTypeDefinitions.ts"],"names":[],"mappings":";;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AASA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAKA,IAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAEA,SAAS,8BAAT,CACE,eADF,EAEE,YAFF,EAEoC;AAElC;AACA,MAAI,aAAa,GAAG,eAApB;AACA,MAAI,WAAJ;;AAEA,MAAI,cAAc,CAAC,eAAD,CAAlB,EAAqC;AACnC,IAAA,WAAW,GAAG,eAAd;AACD,GAFD,MAEO,IAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AAC5C,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,aAAd,CAAL,EAAmC;AACjC,UAAM,IAAI,GAAG,OAAO,aAApB;AACA,YAAM,IAAI,EAAA,CAAA,WAAJ,CACJ,yDAAuD,IADnD,CAAN;AAGD;;AACD,IAAA,aAAa,GAAG,EAAA,CAAA,mBAAA,CAAoB,aAApB,CAAhB;AACD;;AAED,MAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,IAAA,WAAW,GAAG,SAAA,CAAA,KAAA,CAAM,aAAN,EAAqB,YAArB,CAAd;AACD;;AAED,MAAM,iBAAiB,GAAG;AAAE,IAAA,mBAAmB,EAAE;AAAvB,GAA1B;AACA,MAAM,QAAQ,GAAG,4BAAA,CAAA,OAAA,CAA2B,WAA3B,CAAjB,CAvBkC,CAyBlC;;AACA,MAAI,MAAM,GAAmB,SAAA,CAAA,cAAA,CAC3B,QAD2B,EAE3B,iBAF2B,CAA7B;;AAKA,MAAM,aAAa,GAAG,EAAA,CAAA,2BAAA,CAA4B,WAA5B,CAAtB;;AACA,MAAI,aAAa,CAAC,WAAd,CAA0B,MAA1B,GAAmC,CAAvC,EAA0C;AACxC;AACA,IAAA,MAAM,GAAI,SAAA,CAAA,YAAA,CAAqB,MAArB,EAA6B,aAA7B,EAA4C,iBAA5C,CAAV;AACD;;AAED,SAAO,MAAP;AACD;;AAED,SAAS,cAAT,CACE,eADF,EACmC;AAEjC,SAAsB,eAAgB,CAAC,IAAjB,KAA0B,SAAhD;AACD;;AAED,OAAA,CAAA,OAAA,GAAe,8BAAf","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\nvar filterExtensionDefinitions_1 = require(\"./filterExtensionDefinitions\");\nfunction buildSchemaFromTypeDefinitions(typeDefinitions, parseOptions) {\n    // TODO: accept only array here, otherwise interfaces get confusing.\n    var myDefinitions = typeDefinitions;\n    var astDocument;\n    if (isDocumentNode(typeDefinitions)) {\n        astDocument = typeDefinitions;\n    }\n    else if (typeof myDefinitions !== 'string') {\n        if (!Array.isArray(myDefinitions)) {\n            var type = typeof myDefinitions;\n            throw new _1.SchemaError(\"typeDefs must be a string, array or schema AST, got \" + type);\n        }\n        myDefinitions = _1.concatenateTypeDefs(myDefinitions);\n    }\n    if (typeof myDefinitions === 'string') {\n        astDocument = graphql_1.parse(myDefinitions, parseOptions);\n    }\n    var backcompatOptions = { commentDescriptions: true };\n    var typesAst = filterExtensionDefinitions_1.default(astDocument);\n    // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n    var schema = graphql_1.buildASTSchema(typesAst, backcompatOptions);\n    var extensionsAst = _1.extractExtensionDefinitions(astDocument);\n    if (extensionsAst.definitions.length > 0) {\n        // TODO fix types https://github.com/apollographql/graphql-tools/issues/542\n        schema = graphql_1.extendSchema(schema, extensionsAst, backcompatOptions);\n    }\n    return schema;\n}\nfunction isDocumentNode(typeDefinitions) {\n    return typeDefinitions.kind !== undefined;\n}\nexports.default = buildSchemaFromTypeDefinitions;\n//# sourceMappingURL=buildSchemaFromTypeDefinitions.js.map"]},"metadata":{},"sourceType":"script"}