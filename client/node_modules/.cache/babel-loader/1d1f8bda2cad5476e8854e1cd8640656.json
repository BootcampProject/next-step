{"ast":null,"code":"const {\n  AuthenticationError\n} = require('apollo-server-express');\n\nconst {\n  User,\n  Questions,\n  Category\n} = require('../models');\n\nconst {\n  signToken\n} = require('../utils/auth');\n\nconst resolvers = {\n  Query: {\n    categories: async () => {\n      return await Category.find();\n    },\n    Questions: async (parent, _ref) => {\n      let {\n        category,\n        question\n      } = _ref;\n      const params = {};\n\n      if (category) {\n        params.category = category;\n      }\n\n      if (question) {\n        params.question = {\n          $regex: question\n        };\n      }\n\n      return await Questions.find(params).populate('category');\n    },\n    // question: async (parent, { _id }) => {\n    //   return await Question.findById(_id).populate('category');\n    // },\n    user: async (parent, args, context) => {\n      if (context.user) {\n        const user = await User.findById(context.user._id).populate({\n          path: 'questions',\n          populate: 'category'\n        });\n        return user;\n      }\n\n      throw new AuthenticationError('Not logged in');\n    }\n  },\n  Mutation: {\n    addUser: async (parent, args) => {\n      const user = await User.create(args);\n      const token = signToken(user);\n      return {\n        token,\n        user\n      };\n    },\n    updateUser: async (parent, args, context) => {\n      if (context.user) {\n        return await User.findByIdAndUpdate(context.user._id, args, {\n          new: true\n        });\n      }\n\n      throw new AuthenticationError('Not logged in');\n    },\n    login: async (parent, _ref2) => {\n      let {\n        email,\n        password\n      } = _ref2;\n      const user = await User.findOne({\n        email\n      });\n\n      if (!user) {\n        throw new AuthenticationError('Incorrect credentials');\n      }\n\n      const correctPw = await user.isCorrectPassword(password);\n\n      if (!correctPw) {\n        throw new AuthenticationError('Incorrect credentials');\n      }\n\n      const token = signToken(user);\n      return {\n        token,\n        user\n      };\n    }\n  }\n};\nmodule.exports = resolvers;","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/schemas/resolvers.js"],"names":["AuthenticationError","require","User","Questions","Category","signToken","resolvers","Query","categories","find","parent","category","question","params","$regex","populate","user","args","context","findById","_id","path","Mutation","addUser","create","token","updateUser","findByIdAndUpdate","new","login","email","password","findOne","correctPw","isCorrectPassword","module","exports"],"mappings":"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","sourcesContent":["const { AuthenticationError } = require('apollo-server-express');\nconst { User, Questions, Category} = require('../models');\nconst { signToken } = require('../utils/auth');\n\nconst resolvers = {\n  Query: {\n    categories: async () => {\n      return await Category.find();\n    },\n    Questions: async (parent, { category, question }) => {\n      const params = {};\n\n      if (category) {\n        params.category = category;\n      }\n\n      if (question) {\n        params.question = {\n          $regex: question\n        };\n      }\n\n      return await Questions.find(params).populate('category');\n    },\n    // question: async (parent, { _id }) => {\n    //   return await Question.findById(_id).populate('category');\n    // },\n   \n    user: async (parent, args, context) => {\n      if (context.user) {\n        const user = await User.findById(context.user._id).populate({\n          path: 'questions',\n          populate: 'category'\n        });\n\n        return user;\n      }\n\n      throw new AuthenticationError('Not logged in');\n    },\n  },\n  Mutation: {\n    addUser: async (parent, args) => {\n      const user = await User.create(args);\n      const token = signToken(user);\n\n      return { token, user };\n    },\n    updateUser: async (parent, args, context) => {\n      if (context.user) {\n        return await User.findByIdAndUpdate(context.user._id, args, { new: true });\n      }\n\n      throw new AuthenticationError('Not logged in');\n    },\n    login: async (parent, { email, password }) => {\n      const user = await User.findOne({ email });\n\n      if (!user) {\n        throw new AuthenticationError('Incorrect credentials');\n      }\n\n      const correctPw = await user.isCorrectPassword(password);\n\n      if (!correctPw) {\n        throw new AuthenticationError('Incorrect credentials');\n      }\n\n      const token = signToken(user);\n\n      return { token, user };\n    }\n  }\n};\n\nmodule.exports = resolvers;\n"]},"metadata":{},"sourceType":"script"}