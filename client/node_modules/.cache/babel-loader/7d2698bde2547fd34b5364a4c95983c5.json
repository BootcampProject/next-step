{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.__testing__ = exports.plugin = exports.CacheScope = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nvar CacheScope;\n\n(function (CacheScope) {\n  CacheScope[\"Public\"] = \"PUBLIC\";\n  CacheScope[\"Private\"] = \"PRIVATE\";\n})(CacheScope = exports.CacheScope || (exports.CacheScope = {}));\n\nexports.plugin = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  return {\n    requestDidStart(requestContext) {\n      const defaultMaxAge = options.defaultMaxAge || 0;\n      const hints = new Map();\n\n      function setOverallCachePolicyWhenUnset() {\n        if (!requestContext.overallCachePolicy) {\n          requestContext.overallCachePolicy = computeOverallCachePolicy(hints);\n        }\n      }\n\n      return {\n        executionDidStart: () => ({\n          executionDidEnd: () => setOverallCachePolicyWhenUnset(),\n\n          willResolveField(_ref) {\n            let {\n              info\n            } = _ref;\n            let hint = {};\n            const targetType = graphql_1.getNamedType(info.returnType);\n\n            if (targetType instanceof graphql_1.GraphQLObjectType || targetType instanceof graphql_1.GraphQLInterfaceType) {\n              if (targetType.astNode) {\n                hint = mergeHints(hint, cacheHintFromDirectives(targetType.astNode.directives));\n              }\n            }\n\n            const fieldDef = info.parentType.getFields()[info.fieldName];\n\n            if (fieldDef.astNode) {\n              hint = mergeHints(hint, cacheHintFromDirectives(fieldDef.astNode.directives));\n            }\n\n            if ((targetType instanceof graphql_1.GraphQLObjectType || targetType instanceof graphql_1.GraphQLInterfaceType || !info.path.prev) && hint.maxAge === undefined) {\n              hint.maxAge = defaultMaxAge;\n            }\n\n            if (hint.maxAge !== undefined || hint.scope !== undefined) {\n              addHint(hints, info.path, hint);\n            }\n\n            info.cacheControl = {\n              setCacheHint: hint => {\n                addHint(hints, info.path, hint);\n              },\n              cacheHint: hint\n            };\n          }\n\n        }),\n\n        responseForOperation() {\n          setOverallCachePolicyWhenUnset();\n          return null;\n        },\n\n        willSendResponse(requestContext) {\n          const {\n            response,\n            overallCachePolicy: overallCachePolicyOverride\n          } = requestContext;\n\n          if (response.errors) {\n            return;\n          }\n\n          const overallCachePolicy = overallCachePolicyOverride || (requestContext.overallCachePolicy = computeOverallCachePolicy(hints));\n\n          if (overallCachePolicy && options.calculateHttpHeaders && response.http) {\n            response.http.headers.set('Cache-Control', `max-age=${overallCachePolicy.maxAge}, ${overallCachePolicy.scope.toLowerCase()}`);\n          }\n\n          if (options.stripFormattedExtensions !== false) return;\n          const extensions = response.extensions || (response.extensions = Object.create(null));\n\n          if (typeof extensions.cacheControl !== 'undefined') {\n            throw new Error(\"The cacheControl information already existed.\");\n          }\n\n          extensions.cacheControl = {\n            version: 1,\n            hints: Array.from(hints).map(_ref2 => {\n              let [path, hint] = _ref2;\n              return Object.assign({\n                path: [...graphql_1.responsePathAsArray(path)]\n              }, hint);\n            })\n          };\n        }\n\n      };\n    }\n\n  };\n};\n\nfunction cacheHintFromDirectives(directives) {\n  if (!directives) return undefined;\n  const cacheControlDirective = directives.find(directive => directive.name.value === 'cacheControl');\n  if (!cacheControlDirective) return undefined;\n  if (!cacheControlDirective.arguments) return undefined;\n  const maxAgeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'maxAge');\n  const scopeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'scope');\n  return {\n    maxAge: maxAgeArgument && maxAgeArgument.value && maxAgeArgument.value.kind === 'IntValue' ? parseInt(maxAgeArgument.value.value) : undefined,\n    scope: scopeArgument && scopeArgument.value && scopeArgument.value.kind === 'EnumValue' ? scopeArgument.value.value : undefined\n  };\n}\n\nfunction mergeHints(hint, otherHint) {\n  if (!otherHint) return hint;\n  return {\n    maxAge: otherHint.maxAge !== undefined ? otherHint.maxAge : hint.maxAge,\n    scope: otherHint.scope || hint.scope\n  };\n}\n\nfunction computeOverallCachePolicy(hints) {\n  let lowestMaxAge = undefined;\n  let scope = CacheScope.Public;\n\n  for (const hint of hints.values()) {\n    if (hint.maxAge !== undefined) {\n      lowestMaxAge = lowestMaxAge !== undefined ? Math.min(lowestMaxAge, hint.maxAge) : hint.maxAge;\n    }\n\n    if (hint.scope === CacheScope.Private) {\n      scope = CacheScope.Private;\n    }\n  }\n\n  return lowestMaxAge ? {\n    maxAge: lowestMaxAge,\n    scope\n  } : undefined;\n}\n\nfunction addHint(hints, path, hint) {\n  const existingCacheHint = hints.get(path);\n\n  if (existingCacheHint) {\n    hints.set(path, mergeHints(existingCacheHint, hint));\n  } else {\n    hints.set(path, hint);\n  }\n}\n\nexports.__testing__ = {\n  addHint,\n  computeOverallCachePolicy\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.__testing__ = exports.plugin = exports.CacheScope = void 0;\nconst graphql_1 = require(\"graphql\");\nvar CacheScope;\n(function (CacheScope) {\n    CacheScope[\"Public\"] = \"PUBLIC\";\n    CacheScope[\"Private\"] = \"PRIVATE\";\n})(CacheScope = exports.CacheScope || (exports.CacheScope = {}));\nexports.plugin = (options = Object.create(null)) => ({\n    requestDidStart(requestContext) {\n        const defaultMaxAge = options.defaultMaxAge || 0;\n        const hints = new Map();\n        function setOverallCachePolicyWhenUnset() {\n            if (!requestContext.overallCachePolicy) {\n                requestContext.overallCachePolicy = computeOverallCachePolicy(hints);\n            }\n        }\n        return {\n            executionDidStart: () => ({\n                executionDidEnd: () => setOverallCachePolicyWhenUnset(),\n                willResolveField({ info }) {\n                    let hint = {};\n                    const targetType = graphql_1.getNamedType(info.returnType);\n                    if (targetType instanceof graphql_1.GraphQLObjectType ||\n                        targetType instanceof graphql_1.GraphQLInterfaceType) {\n                        if (targetType.astNode) {\n                            hint = mergeHints(hint, cacheHintFromDirectives(targetType.astNode.directives));\n                        }\n                    }\n                    const fieldDef = info.parentType.getFields()[info.fieldName];\n                    if (fieldDef.astNode) {\n                        hint = mergeHints(hint, cacheHintFromDirectives(fieldDef.astNode.directives));\n                    }\n                    if ((targetType instanceof graphql_1.GraphQLObjectType ||\n                        targetType instanceof graphql_1.GraphQLInterfaceType ||\n                        !info.path.prev) &&\n                        hint.maxAge === undefined) {\n                        hint.maxAge = defaultMaxAge;\n                    }\n                    if (hint.maxAge !== undefined || hint.scope !== undefined) {\n                        addHint(hints, info.path, hint);\n                    }\n                    info.cacheControl = {\n                        setCacheHint: (hint) => {\n                            addHint(hints, info.path, hint);\n                        },\n                        cacheHint: hint,\n                    };\n                },\n            }),\n            responseForOperation() {\n                setOverallCachePolicyWhenUnset();\n                return null;\n            },\n            willSendResponse(requestContext) {\n                const { response, overallCachePolicy: overallCachePolicyOverride, } = requestContext;\n                if (response.errors) {\n                    return;\n                }\n                const overallCachePolicy = overallCachePolicyOverride ||\n                    (requestContext.overallCachePolicy =\n                        computeOverallCachePolicy(hints));\n                if (overallCachePolicy &&\n                    options.calculateHttpHeaders &&\n                    response.http) {\n                    response.http.headers.set('Cache-Control', `max-age=${overallCachePolicy.maxAge}, ${overallCachePolicy.scope.toLowerCase()}`);\n                }\n                if (options.stripFormattedExtensions !== false)\n                    return;\n                const extensions = response.extensions || (response.extensions = Object.create(null));\n                if (typeof extensions.cacheControl !== 'undefined') {\n                    throw new Error(\"The cacheControl information already existed.\");\n                }\n                extensions.cacheControl = {\n                    version: 1,\n                    hints: Array.from(hints).map(([path, hint]) => (Object.assign({ path: [...graphql_1.responsePathAsArray(path)] }, hint))),\n                };\n            }\n        };\n    }\n});\nfunction cacheHintFromDirectives(directives) {\n    if (!directives)\n        return undefined;\n    const cacheControlDirective = directives.find(directive => directive.name.value === 'cacheControl');\n    if (!cacheControlDirective)\n        return undefined;\n    if (!cacheControlDirective.arguments)\n        return undefined;\n    const maxAgeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'maxAge');\n    const scopeArgument = cacheControlDirective.arguments.find(argument => argument.name.value === 'scope');\n    return {\n        maxAge: maxAgeArgument &&\n            maxAgeArgument.value &&\n            maxAgeArgument.value.kind === 'IntValue'\n            ? parseInt(maxAgeArgument.value.value)\n            : undefined,\n        scope: scopeArgument &&\n            scopeArgument.value &&\n            scopeArgument.value.kind === 'EnumValue'\n            ? scopeArgument.value.value\n            : undefined,\n    };\n}\nfunction mergeHints(hint, otherHint) {\n    if (!otherHint)\n        return hint;\n    return {\n        maxAge: otherHint.maxAge !== undefined ? otherHint.maxAge : hint.maxAge,\n        scope: otherHint.scope || hint.scope,\n    };\n}\nfunction computeOverallCachePolicy(hints) {\n    let lowestMaxAge = undefined;\n    let scope = CacheScope.Public;\n    for (const hint of hints.values()) {\n        if (hint.maxAge !== undefined) {\n            lowestMaxAge =\n                lowestMaxAge !== undefined\n                    ? Math.min(lowestMaxAge, hint.maxAge)\n                    : hint.maxAge;\n        }\n        if (hint.scope === CacheScope.Private) {\n            scope = CacheScope.Private;\n        }\n    }\n    return lowestMaxAge\n        ? {\n            maxAge: lowestMaxAge,\n            scope,\n        }\n        : undefined;\n}\nfunction addHint(hints, path, hint) {\n    const existingCacheHint = hints.get(path);\n    if (existingCacheHint) {\n        hints.set(path, mergeHints(existingCacheHint, hint));\n    }\n    else {\n        hints.set(path, hint);\n    }\n}\nexports.__testing__ = {\n    addHint,\n    computeOverallCachePolicy,\n};\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}