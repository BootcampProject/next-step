{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar implementsAbstractType_1 = require(\"../implementsAbstractType\");\n\nvar FilterToSchema =\n/** @class */\nfunction () {\n  function FilterToSchema(targetSchema) {\n    this.targetSchema = targetSchema;\n  }\n\n  FilterToSchema.prototype.transformRequest = function (originalRequest) {\n    var document = filterDocumentToSchema(this.targetSchema, originalRequest.document);\n    return __assign(__assign({}, originalRequest), {\n      document: document\n    });\n  };\n\n  return FilterToSchema;\n}();\n\nexports.default = FilterToSchema;\n\nfunction filterDocumentToSchema(targetSchema, document) {\n  var operations = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.OPERATION_DEFINITION;\n  });\n  var fragments = document.definitions.filter(function (def) {\n    return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION;\n  });\n  var usedFragments = [];\n  var newOperations = [];\n  var newFragments = [];\n  var validFragments = fragments.filter(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    return Boolean(targetSchema.getType(typeName));\n  });\n  var validFragmentsWithType = {};\n  validFragments.forEach(function (fragment) {\n    var typeName = fragment.typeCondition.name.value;\n    var type = targetSchema.getType(typeName);\n    validFragmentsWithType[fragment.name.value] = type;\n  });\n  var fragmentSet = Object.create(null);\n  operations.forEach(function (operation) {\n    var type;\n\n    if (operation.operation === 'subscription') {\n      type = targetSchema.getSubscriptionType();\n    } else if (operation.operation === 'mutation') {\n      type = targetSchema.getMutationType();\n    } else {\n      type = targetSchema.getQueryType();\n    }\n\n    var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, operation.selectionSet),\n        selectionSet = _a.selectionSet,\n        operationUsedFragments = _a.usedFragments,\n        operationUsedVariables = _a.usedVariables;\n\n    usedFragments = union(usedFragments, operationUsedFragments);\n\n    var _b = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments),\n        collectedUsedVariables = _b.usedVariables,\n        collectedNewFragments = _b.newFragments,\n        collectedFragmentSet = _b.fragmentSet;\n\n    var fullUsedVariables = union(operationUsedVariables, collectedUsedVariables);\n    newFragments = collectedNewFragments;\n    fragmentSet = collectedFragmentSet;\n    var variableDefinitions = operation.variableDefinitions.filter(function (variable) {\n      return fullUsedVariables.indexOf(variable.variable.name.value) !== -1;\n    });\n    newOperations.push({\n      kind: graphql_1.Kind.OPERATION_DEFINITION,\n      operation: operation.operation,\n      name: operation.name,\n      directives: operation.directives,\n      variableDefinitions: variableDefinitions,\n      selectionSet: selectionSet\n    });\n  });\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: __spreadArrays(newOperations, newFragments)\n  };\n}\n\nfunction collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {\n  var usedVariables = [];\n  var newFragments = [];\n\n  var _loop_1 = function () {\n    var nextFragmentName = usedFragments.pop();\n    var fragment = validFragments.find(function (fr) {\n      return fr.name.value === nextFragmentName;\n    });\n\n    if (fragment) {\n      var name_1 = nextFragmentName;\n      var typeName = fragment.typeCondition.name.value;\n      var type = targetSchema.getType(typeName);\n\n      var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, fragment.selectionSet),\n          selectionSet = _a.selectionSet,\n          fragmentUsedFragments = _a.usedFragments,\n          fragmentUsedVariables = _a.usedVariables;\n\n      usedFragments = union(usedFragments, fragmentUsedFragments);\n      usedVariables = union(usedVariables, fragmentUsedVariables);\n\n      if (!fragmentSet[name_1]) {\n        fragmentSet[name_1] = true;\n        newFragments.push({\n          kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n          name: {\n            kind: graphql_1.Kind.NAME,\n            value: name_1\n          },\n          typeCondition: fragment.typeCondition,\n          selectionSet: selectionSet\n        });\n      }\n    }\n  };\n\n  while (usedFragments.length !== 0) {\n    _loop_1();\n  }\n\n  return {\n    usedVariables: usedVariables,\n    newFragments: newFragments,\n    fragmentSet: fragmentSet\n  };\n}\n\nfunction filterSelectionSet(schema, type, validFragments, selectionSet) {\n  var _a;\n\n  var usedFragments = [];\n  var usedVariables = [];\n  var typeStack = [type]; // Should be rewritten using visitWithSchema\n\n  var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {}, _a[graphql_1.Kind.FIELD] = {\n    enter: function (node) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n\n      if (parentType instanceof graphql_1.GraphQLObjectType || parentType instanceof graphql_1.GraphQLInterfaceType) {\n        var fields = parentType.getFields();\n        var field = node.name.value === '__typename' ? graphql_1.TypeNameMetaFieldDef : fields[node.name.value];\n\n        if (!field) {\n          return null;\n        } else {\n          typeStack.push(field.type);\n        }\n\n        var argNames_1 = (field.args || []).map(function (arg) {\n          return arg.name;\n        });\n\n        if (node.arguments) {\n          var args = node.arguments.filter(function (arg) {\n            return argNames_1.indexOf(arg.name.value) !== -1;\n          });\n\n          if (args.length !== node.arguments.length) {\n            return __assign(__assign({}, node), {\n              arguments: args\n            });\n          }\n        }\n      } else if (parentType instanceof graphql_1.GraphQLUnionType && node.name.value === '__typename') {\n        typeStack.push(graphql_1.TypeNameMetaFieldDef.type);\n      }\n    },\n    leave: function (node) {\n      var _a;\n\n      var currentType = typeStack.pop();\n      var resolvedType = resolveType(currentType);\n\n      if (resolvedType instanceof graphql_1.GraphQLObjectType || resolvedType instanceof graphql_1.GraphQLInterfaceType) {\n        var selections = node.selectionSet && node.selectionSet.selections || null;\n\n        if (!selections || selections.length === 0) {\n          // need to remove any added variables. Is there a better way to do this?\n          graphql_1.visit(node, (_a = {}, _a[graphql_1.Kind.VARIABLE] = function (variableNode) {\n            var index = usedVariables.indexOf(variableNode.name.value);\n\n            if (index !== -1) {\n              usedVariables.splice(index, 1);\n            }\n          }, _a));\n          return null;\n        }\n      }\n    }\n  }, _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {\n    if (node.name.value in validFragments) {\n      var parentType = resolveType(typeStack[typeStack.length - 1]);\n      var innerType = validFragments[node.name.value];\n\n      if (!implementsAbstractType_1.default(schema, parentType, innerType)) {\n        return null;\n      } else {\n        usedFragments.push(node.name.value);\n        return;\n      }\n    } else {\n      return null;\n    }\n  }, _a[graphql_1.Kind.INLINE_FRAGMENT] = {\n    enter: function (node) {\n      if (node.typeCondition) {\n        var innerType = schema.getType(node.typeCondition.name.value);\n        var parentType = resolveType(typeStack[typeStack.length - 1]);\n\n        if (implementsAbstractType_1.default(schema, parentType, innerType)) {\n          typeStack.push(innerType);\n        } else {\n          return null;\n        }\n      }\n    },\n    leave: function (node) {\n      typeStack.pop();\n    }\n  }, _a[graphql_1.Kind.VARIABLE] = function (node) {\n    usedVariables.push(node.name.value);\n  }, _a));\n  return {\n    selectionSet: filteredSelectionSet,\n    usedFragments: usedFragments,\n    usedVariables: usedVariables\n  };\n}\n\nfunction resolveType(type) {\n  var lastType = type;\n\n  while (lastType instanceof graphql_1.GraphQLNonNull || lastType instanceof graphql_1.GraphQLList) {\n    lastType = lastType.ofType;\n  }\n\n  return lastType;\n}\n\nfunction union() {\n  var arrays = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    arrays[_i] = arguments[_i];\n  }\n\n  var cache = {};\n  var result = [];\n  arrays.forEach(function (array) {\n    array.forEach(function (item) {\n      if (!cache[item]) {\n        cache[item] = true;\n        result.push(item);\n      }\n    });\n  });\n  return result;\n}","map":{"version":3,"sources":["../../src/transforms/FilterToSchema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar implementsAbstractType_1 = require(\"../implementsAbstractType\");\nvar FilterToSchema = /** @class */ (function () {\n    function FilterToSchema(targetSchema) {\n        this.targetSchema = targetSchema;\n    }\n    FilterToSchema.prototype.transformRequest = function (originalRequest) {\n        var document = filterDocumentToSchema(this.targetSchema, originalRequest.document);\n        return __assign(__assign({}, originalRequest), { document: document });\n    };\n    return FilterToSchema;\n}());\nexports.default = FilterToSchema;\nfunction filterDocumentToSchema(targetSchema, document) {\n    var operations = document.definitions.filter(function (def) { return def.kind === graphql_1.Kind.OPERATION_DEFINITION; });\n    var fragments = document.definitions.filter(function (def) { return def.kind === graphql_1.Kind.FRAGMENT_DEFINITION; });\n    var usedFragments = [];\n    var newOperations = [];\n    var newFragments = [];\n    var validFragments = fragments.filter(function (fragment) {\n        var typeName = fragment.typeCondition.name.value;\n        return Boolean(targetSchema.getType(typeName));\n    });\n    var validFragmentsWithType = {};\n    validFragments.forEach(function (fragment) {\n        var typeName = fragment.typeCondition.name.value;\n        var type = targetSchema.getType(typeName);\n        validFragmentsWithType[fragment.name.value] = type;\n    });\n    var fragmentSet = Object.create(null);\n    operations.forEach(function (operation) {\n        var type;\n        if (operation.operation === 'subscription') {\n            type = targetSchema.getSubscriptionType();\n        }\n        else if (operation.operation === 'mutation') {\n            type = targetSchema.getMutationType();\n        }\n        else {\n            type = targetSchema.getQueryType();\n        }\n        var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, operation.selectionSet), selectionSet = _a.selectionSet, operationUsedFragments = _a.usedFragments, operationUsedVariables = _a.usedVariables;\n        usedFragments = union(usedFragments, operationUsedFragments);\n        var _b = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments), collectedUsedVariables = _b.usedVariables, collectedNewFragments = _b.newFragments, collectedFragmentSet = _b.fragmentSet;\n        var fullUsedVariables = union(operationUsedVariables, collectedUsedVariables);\n        newFragments = collectedNewFragments;\n        fragmentSet = collectedFragmentSet;\n        var variableDefinitions = operation.variableDefinitions.filter(function (variable) {\n            return fullUsedVariables.indexOf(variable.variable.name.value) !== -1;\n        });\n        newOperations.push({\n            kind: graphql_1.Kind.OPERATION_DEFINITION,\n            operation: operation.operation,\n            name: operation.name,\n            directives: operation.directives,\n            variableDefinitions: variableDefinitions,\n            selectionSet: selectionSet,\n        });\n    });\n    return {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: __spreadArrays(newOperations, newFragments),\n    };\n}\nfunction collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {\n    var usedVariables = [];\n    var newFragments = [];\n    var _loop_1 = function () {\n        var nextFragmentName = usedFragments.pop();\n        var fragment = validFragments.find(function (fr) { return fr.name.value === nextFragmentName; });\n        if (fragment) {\n            var name_1 = nextFragmentName;\n            var typeName = fragment.typeCondition.name.value;\n            var type = targetSchema.getType(typeName);\n            var _a = filterSelectionSet(targetSchema, type, validFragmentsWithType, fragment.selectionSet), selectionSet = _a.selectionSet, fragmentUsedFragments = _a.usedFragments, fragmentUsedVariables = _a.usedVariables;\n            usedFragments = union(usedFragments, fragmentUsedFragments);\n            usedVariables = union(usedVariables, fragmentUsedVariables);\n            if (!fragmentSet[name_1]) {\n                fragmentSet[name_1] = true;\n                newFragments.push({\n                    kind: graphql_1.Kind.FRAGMENT_DEFINITION,\n                    name: {\n                        kind: graphql_1.Kind.NAME,\n                        value: name_1,\n                    },\n                    typeCondition: fragment.typeCondition,\n                    selectionSet: selectionSet,\n                });\n            }\n        }\n    };\n    while (usedFragments.length !== 0) {\n        _loop_1();\n    }\n    return {\n        usedVariables: usedVariables,\n        newFragments: newFragments,\n        fragmentSet: fragmentSet,\n    };\n}\nfunction filterSelectionSet(schema, type, validFragments, selectionSet) {\n    var _a;\n    var usedFragments = [];\n    var usedVariables = [];\n    var typeStack = [type];\n    // Should be rewritten using visitWithSchema\n    var filteredSelectionSet = graphql_1.visit(selectionSet, (_a = {},\n        _a[graphql_1.Kind.FIELD] = {\n            enter: function (node) {\n                var parentType = resolveType(typeStack[typeStack.length - 1]);\n                if (parentType instanceof graphql_1.GraphQLObjectType ||\n                    parentType instanceof graphql_1.GraphQLInterfaceType) {\n                    var fields = parentType.getFields();\n                    var field = node.name.value === '__typename'\n                        ? graphql_1.TypeNameMetaFieldDef\n                        : fields[node.name.value];\n                    if (!field) {\n                        return null;\n                    }\n                    else {\n                        typeStack.push(field.type);\n                    }\n                    var argNames_1 = (field.args || []).map(function (arg) { return arg.name; });\n                    if (node.arguments) {\n                        var args = node.arguments.filter(function (arg) {\n                            return argNames_1.indexOf(arg.name.value) !== -1;\n                        });\n                        if (args.length !== node.arguments.length) {\n                            return __assign(__assign({}, node), { arguments: args });\n                        }\n                    }\n                }\n                else if (parentType instanceof graphql_1.GraphQLUnionType &&\n                    node.name.value === '__typename') {\n                    typeStack.push(graphql_1.TypeNameMetaFieldDef.type);\n                }\n            },\n            leave: function (node) {\n                var _a;\n                var currentType = typeStack.pop();\n                var resolvedType = resolveType(currentType);\n                if (resolvedType instanceof graphql_1.GraphQLObjectType ||\n                    resolvedType instanceof graphql_1.GraphQLInterfaceType) {\n                    var selections = node.selectionSet && node.selectionSet.selections || null;\n                    if (!selections || selections.length === 0) {\n                        // need to remove any added variables. Is there a better way to do this?\n                        graphql_1.visit(node, (_a = {},\n                            _a[graphql_1.Kind.VARIABLE] = function (variableNode) {\n                                var index = usedVariables.indexOf(variableNode.name.value);\n                                if (index !== -1) {\n                                    usedVariables.splice(index, 1);\n                                }\n                            },\n                            _a));\n                        return null;\n                    }\n                }\n            },\n        },\n        _a[graphql_1.Kind.FRAGMENT_SPREAD] = function (node) {\n            if (node.name.value in validFragments) {\n                var parentType = resolveType(typeStack[typeStack.length - 1]);\n                var innerType = validFragments[node.name.value];\n                if (!implementsAbstractType_1.default(schema, parentType, innerType)) {\n                    return null;\n                }\n                else {\n                    usedFragments.push(node.name.value);\n                    return;\n                }\n            }\n            else {\n                return null;\n            }\n        },\n        _a[graphql_1.Kind.INLINE_FRAGMENT] = {\n            enter: function (node) {\n                if (node.typeCondition) {\n                    var innerType = schema.getType(node.typeCondition.name.value);\n                    var parentType = resolveType(typeStack[typeStack.length - 1]);\n                    if (implementsAbstractType_1.default(schema, parentType, innerType)) {\n                        typeStack.push(innerType);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n            leave: function (node) {\n                typeStack.pop();\n            },\n        },\n        _a[graphql_1.Kind.VARIABLE] = function (node) {\n            usedVariables.push(node.name.value);\n        },\n        _a));\n    return {\n        selectionSet: filteredSelectionSet,\n        usedFragments: usedFragments,\n        usedVariables: usedVariables,\n    };\n}\nfunction resolveType(type) {\n    var lastType = type;\n    while (lastType instanceof graphql_1.GraphQLNonNull ||\n        lastType instanceof graphql_1.GraphQLList) {\n        lastType = lastType.ofType;\n    }\n    return lastType;\n}\nfunction union() {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    var cache = {};\n    var result = [];\n    arrays.forEach(function (array) {\n        array.forEach(function (item) {\n            if (!cache[item]) {\n                cache[item] = true;\n                result.push(item);\n            }\n        });\n    });\n    return result;\n}\n//# sourceMappingURL=FilterToSchema.js.map"]},"metadata":{},"sourceType":"script"}