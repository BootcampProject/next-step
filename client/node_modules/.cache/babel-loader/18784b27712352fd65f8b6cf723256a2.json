{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar isEmptyObject_1 = require(\"../isEmptyObject\");\n\nvar visitSchema_1 = require(\"./visitSchema\");\n\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\n\nvar TransformRootFields =\n/** @class */\nfunction () {\n  function TransformRootFields(transform) {\n    this.transform = transform;\n  }\n\n  TransformRootFields.prototype.transformSchema = function (originalSchema) {\n    var _a;\n\n    var _this = this;\n\n    return visitSchema_1.visitSchema(originalSchema, (_a = {}, _a[visitSchema_1.VisitSchemaKind.QUERY] = function (type) {\n      return transformFields(type, function (fieldName, field) {\n        return _this.transform('Query', fieldName, field);\n      });\n    }, _a[visitSchema_1.VisitSchemaKind.MUTATION] = function (type) {\n      return transformFields(type, function (fieldName, field) {\n        return _this.transform('Mutation', fieldName, field);\n      });\n    }, _a[visitSchema_1.VisitSchemaKind.SUBSCRIPTION] = function (type) {\n      return transformFields(type, function (fieldName, field) {\n        return _this.transform('Subscription', fieldName, field);\n      });\n    }, _a));\n  };\n\n  return TransformRootFields;\n}();\n\nexports.default = TransformRootFields;\n\nfunction transformFields(type, transformer) {\n  var resolveType = schemaRecreation_1.createResolveType(function (name, originalType) {\n    return originalType;\n  });\n  var fields = type.getFields();\n  var newFields = {};\n  Object.keys(fields).forEach(function (fieldName) {\n    var field = fields[fieldName];\n    var newField = transformer(fieldName, field);\n\n    if (typeof newField === 'undefined') {\n      newFields[fieldName] = schemaRecreation_1.fieldToFieldConfig(field, resolveType, true);\n    } else if (newField !== null) {\n      if (newField.name) {\n        newFields[newField.name] = newField.field;\n      } else {\n        newFields[fieldName] = newField;\n      }\n    }\n  });\n\n  if (isEmptyObject_1.default(newFields)) {\n    return null;\n  } else {\n    return new graphql_1.GraphQLObjectType({\n      name: type.name,\n      description: type.description,\n      astNode: type.astNode,\n      fields: newFields\n    });\n  }\n}","map":{"version":3,"sources":["../../src/transforms/TransformRootFields.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar isEmptyObject_1 = require(\"../isEmptyObject\");\nvar visitSchema_1 = require(\"./visitSchema\");\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\nvar TransformRootFields = /** @class */ (function () {\n    function TransformRootFields(transform) {\n        this.transform = transform;\n    }\n    TransformRootFields.prototype.transformSchema = function (originalSchema) {\n        var _a;\n        var _this = this;\n        return visitSchema_1.visitSchema(originalSchema, (_a = {},\n            _a[visitSchema_1.VisitSchemaKind.QUERY] = function (type) {\n                return transformFields(type, function (fieldName, field) {\n                    return _this.transform('Query', fieldName, field);\n                });\n            },\n            _a[visitSchema_1.VisitSchemaKind.MUTATION] = function (type) {\n                return transformFields(type, function (fieldName, field) {\n                    return _this.transform('Mutation', fieldName, field);\n                });\n            },\n            _a[visitSchema_1.VisitSchemaKind.SUBSCRIPTION] = function (type) {\n                return transformFields(type, function (fieldName, field) {\n                    return _this.transform('Subscription', fieldName, field);\n                });\n            },\n            _a));\n    };\n    return TransformRootFields;\n}());\nexports.default = TransformRootFields;\nfunction transformFields(type, transformer) {\n    var resolveType = schemaRecreation_1.createResolveType(function (name, originalType) {\n        return originalType;\n    });\n    var fields = type.getFields();\n    var newFields = {};\n    Object.keys(fields).forEach(function (fieldName) {\n        var field = fields[fieldName];\n        var newField = transformer(fieldName, field);\n        if (typeof newField === 'undefined') {\n            newFields[fieldName] = schemaRecreation_1.fieldToFieldConfig(field, resolveType, true);\n        }\n        else if (newField !== null) {\n            if (newField.name) {\n                newFields[newField.name] = newField.field;\n            }\n            else {\n                newFields[fieldName] = newField;\n            }\n        }\n    });\n    if (isEmptyObject_1.default(newFields)) {\n        return null;\n    }\n    else {\n        return new graphql_1.GraphQLObjectType({\n            name: type.name,\n            description: type.description,\n            astNode: type.astNode,\n            fields: newFields,\n        });\n    }\n}\n//# sourceMappingURL=TransformRootFields.js.map"]},"metadata":{},"sourceType":"script"}