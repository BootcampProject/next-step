{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerPluginInlineTraceDisabled = exports.ApolloServerPluginInlineTrace = void 0;\n\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\n\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\n\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\n\nfunction ApolloServerPluginInlineTrace() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  let enabled = options.__onlyIfSchemaIsFederated ? null : true;\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    },\n\n    serverWillStart(_ref) {\n      let {\n        schema,\n        logger\n      } = _ref;\n\n      if (enabled === null) {\n        enabled = schemaIsFederated_1.schemaIsFederated(schema);\n\n        if (enabled) {\n          logger.info('Enabling inline tracing for this federated service. To disable, use ' + 'ApolloServerPluginInlineTraceDisabled.');\n        }\n      }\n    },\n\n    requestDidStart(_ref2) {\n      let {\n        request: {\n          http\n        }\n      } = _ref2;\n\n      if (!enabled) {\n        return;\n      }\n\n      const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n        rewriteError: options.rewriteError\n      });\n\n      if ((http === null || http === void 0 ? void 0 : http.headers.get('apollo-federation-include-trace')) !== 'ftv1') {\n        return;\n      }\n\n      treeBuilder.startTiming();\n      return {\n        executionDidStart: () => ({\n          willResolveField(_ref3) {\n            let {\n              info\n            } = _ref3;\n            return treeBuilder.willResolveField(info);\n          }\n\n        }),\n\n        didEncounterErrors(_ref4) {\n          let {\n            errors\n          } = _ref4;\n          treeBuilder.didEncounterErrors(errors);\n        },\n\n        willSendResponse(_ref5) {\n          let {\n            response\n          } = _ref5;\n          treeBuilder.stopTiming();\n          const encodedUint8Array = apollo_reporting_protobuf_1.Trace.encode(treeBuilder.trace).finish();\n          const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n          const extensions = response.extensions || (response.extensions = Object.create(null));\n\n          if (typeof extensions.ftv1 !== 'undefined') {\n            throw new Error('The `ftv1` extension was already present.');\n          }\n\n          extensions.ftv1 = encodedBuffer.toString('base64');\n        }\n\n      };\n    }\n\n  };\n}\n\nexports.ApolloServerPluginInlineTrace = ApolloServerPluginInlineTrace;\n\nfunction ApolloServerPluginInlineTraceDisabled() {\n  return {\n    __internal_plugin_id__() {\n      return 'InlineTrace';\n    }\n\n  };\n}\n\nexports.ApolloServerPluginInlineTraceDisabled = ApolloServerPluginInlineTraceDisabled;","map":{"version":3,"sources":["../../../src/plugin/inlineTrace/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,2BAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAGA,MAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AA4BA,SAAgB,6BAAhB,GACqE;AAAA,MAAnE,OAAmE,uEAAnB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAmB;AAEnE,MAAI,OAAO,GAAmB,OAAO,CAAC,yBAAR,GAAoC,IAApC,GAA2C,IAAzE;AACA,SAAO;AACL,IAAA,sBAAsB,GAAA;AACpB,aAAO,aAAP;AACD,KAHI;;AAIL,IAAA,eAAe,OAAmB;AAAA,UAAlB;AAAE,QAAA,MAAF;AAAU,QAAA;AAAV,OAAkB;;AAKhC,UAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAA,OAAO,GAAG,mBAAA,CAAA,iBAAA,CAAkB,MAAlB,CAAV;;AACA,YAAI,OAAJ,EAAa;AACX,UAAA,MAAM,CAAC,IAAP,CACE,yEACE,wCAFJ;AAID;AACF;AACF,KAlBI;;AAmBL,IAAA,eAAe,QAAsB;AAAA,UAArB;AAAE,QAAA,OAAO,EAAE;AAAE,UAAA;AAAF;AAAX,OAAqB;;AACnC,UAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,YAAM,WAAW,GAAG,IAAI,kBAAA,CAAA,gBAAJ,CAAqB;AACvC,QAAA,YAAY,EAAE,OAAO,CAAC;AADiB,OAArB,CAApB;;AAKA,UAAI,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,OAAN,CAAc,GAAd,CAAkB,iCAAlB,CAAA,MAAyD,MAA7D,EAAqE;AACnE;AACD;;AAED,MAAA,WAAW,CAAC,WAAZ;AAEA,aAAO;AACL,QAAA,iBAAiB,EAAE,OAAO;AACxB,UAAA,gBAAgB,QAAS;AAAA,gBAAR;AAAE,cAAA;AAAF,aAAQ;AACvB,mBAAO,WAAW,CAAC,gBAAZ,CAA6B,IAA7B,CAAP;AACD;;AAHuB,SAAP,CADd;;AAOL,QAAA,kBAAkB,QAAW;AAAA,cAAV;AAAE,YAAA;AAAF,WAAU;AAC3B,UAAA,WAAW,CAAC,kBAAZ,CAA+B,MAA/B;AACD,SATI;;AAWL,QAAA,gBAAgB,QAAa;AAAA,cAAZ;AAAE,YAAA;AAAF,WAAY;AAG3B,UAAA,WAAW,CAAC,UAAZ;AAEA,gBAAM,iBAAiB,GAAG,2BAAA,CAAA,KAAA,CAAM,MAAN,CAAa,WAAW,CAAC,KAAzB,EAAgC,MAAhC,EAA1B;AACA,gBAAM,aAAa,GAAG,MAAM,CAAC,IAAP,CACpB,iBADoB,EAEpB,iBAAiB,CAAC,UAFE,EAGpB,iBAAiB,CAAC,UAHE,CAAtB;AAMA,gBAAM,UAAU,GACd,QAAQ,CAAC,UAAT,KAAwB,QAAQ,CAAC,UAAT,GAAsB,MAAM,CAAC,MAAP,CAAc,IAAd,CAA9C,CADF;;AAKA,cAAI,OAAO,UAAU,CAAC,IAAlB,KAA2B,WAA/B,EAA4C;AAC1C,kBAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,UAAA,UAAU,CAAC,IAAX,GAAkB,aAAa,CAAC,QAAd,CAAuB,QAAvB,CAAlB;AACD;;AAjCI,OAAP;AAmCD;;AAtEI,GAAP;AAwED;;AA5ED,OAAA,CAAA,6BAAA,GAAA,6BAAA;;AAgFA,SAAgB,qCAAhB,GAAqD;AACnD,SAAO;AACL,IAAA,sBAAsB,GAAA;AACpB,aAAO,aAAP;AACD;;AAHI,GAAP;AAKD;;AAND,OAAA,CAAA,qCAAA,GAAA,qCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApolloServerPluginInlineTraceDisabled = exports.ApolloServerPluginInlineTrace = void 0;\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginInlineTrace(options = Object.create(null)) {\n    let enabled = options.__onlyIfSchemaIsFederated ? null : true;\n    return {\n        __internal_plugin_id__() {\n            return 'InlineTrace';\n        },\n        serverWillStart({ schema, logger }) {\n            if (enabled === null) {\n                enabled = schemaIsFederated_1.schemaIsFederated(schema);\n                if (enabled) {\n                    logger.info('Enabling inline tracing for this federated service. To disable, use ' +\n                        'ApolloServerPluginInlineTraceDisabled.');\n                }\n            }\n        },\n        requestDidStart({ request: { http } }) {\n            if (!enabled) {\n                return;\n            }\n            const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n                rewriteError: options.rewriteError,\n            });\n            if ((http === null || http === void 0 ? void 0 : http.headers.get('apollo-federation-include-trace')) !== 'ftv1') {\n                return;\n            }\n            treeBuilder.startTiming();\n            return {\n                executionDidStart: () => ({\n                    willResolveField({ info }) {\n                        return treeBuilder.willResolveField(info);\n                    },\n                }),\n                didEncounterErrors({ errors }) {\n                    treeBuilder.didEncounterErrors(errors);\n                },\n                willSendResponse({ response }) {\n                    treeBuilder.stopTiming();\n                    const encodedUint8Array = apollo_reporting_protobuf_1.Trace.encode(treeBuilder.trace).finish();\n                    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n                    const extensions = response.extensions || (response.extensions = Object.create(null));\n                    if (typeof extensions.ftv1 !== 'undefined') {\n                        throw new Error('The `ftv1` extension was already present.');\n                    }\n                    extensions.ftv1 = encodedBuffer.toString('base64');\n                },\n            };\n        },\n    };\n}\nexports.ApolloServerPluginInlineTrace = ApolloServerPluginInlineTrace;\nfunction ApolloServerPluginInlineTraceDisabled() {\n    return {\n        __internal_plugin_id__() {\n            return 'InlineTrace';\n        },\n    };\n}\nexports.ApolloServerPluginInlineTraceDisabled = ApolloServerPluginInlineTraceDisabled;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}