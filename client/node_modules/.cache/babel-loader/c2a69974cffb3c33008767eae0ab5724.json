{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\n\nvar TransformRootFields_1 = require(\"./TransformRootFields\");\n\nvar RenameRootFields =\n/** @class */\nfunction () {\n  function RenameRootFields(renamer) {\n    var resolveType = schemaRecreation_1.createResolveType(function (name, type) {\n      return type;\n    });\n    this.transformer = new TransformRootFields_1.default(function (operation, fieldName, field) {\n      return {\n        name: renamer(operation, fieldName, field),\n        field: schemaRecreation_1.fieldToFieldConfig(field, resolveType, true)\n      };\n    });\n  }\n\n  RenameRootFields.prototype.transformSchema = function (originalSchema) {\n    return this.transformer.transformSchema(originalSchema);\n  };\n\n  return RenameRootFields;\n}();\n\nexports.default = RenameRootFields;","map":{"version":3,"sources":["../../src/transforms/RenameRootFields.ts"],"names":[],"mappings":";;;;AAEA,IAAA,kBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAIA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAGE,WAAA,gBAAA,CACE,OADF,EAKa;AAEX,QAAM,WAAW,GAAG,kBAAA,CAAA,iBAAA,CAClB,UAAC,IAAD,EAAe,IAAf,EAAqC;AAAuB,aAAA,IAAA;AAAI,KAD9C,CAApB;AAGA,SAAK,WAAL,GAAmB,IAAI,qBAAA,CAAA,OAAJ,CACjB,UACE,SADF,EAEE,SAFF,EAGE,KAHF,EAG+B;AAE7B,aAAO;AACL,QAAA,IAAI,EAAE,OAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,KAAvB,CADR;AAEL,QAAA,KAAK,EAAE,kBAAA,CAAA,kBAAA,CAAmB,KAAnB,EAA0B,WAA1B,EAAuC,IAAvC;AAFF,OAAP;AAID,KAVgB,CAAnB;AAYD;;AAEM,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,cAAvB,EAAoD;AAClD,WAAO,KAAK,WAAL,CAAiB,eAAjB,CAAiC,cAAjC,CAAP;AACD,GAFM;;AAGT,SAAA,gBAAA;AAAC,CA9BD,EAAA","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\nvar TransformRootFields_1 = require(\"./TransformRootFields\");\nvar RenameRootFields = /** @class */ (function () {\n    function RenameRootFields(renamer) {\n        var resolveType = schemaRecreation_1.createResolveType(function (name, type) { return type; });\n        this.transformer = new TransformRootFields_1.default(function (operation, fieldName, field) {\n            return {\n                name: renamer(operation, fieldName, field),\n                field: schemaRecreation_1.fieldToFieldConfig(field, resolveType, true),\n            };\n        });\n    }\n    RenameRootFields.prototype.transformSchema = function (originalSchema) {\n        return this.transformer.transformSchema(originalSchema);\n    };\n    return RenameRootFields;\n}());\nexports.default = RenameRootFields;\n//# sourceMappingURL=RenameRootFields.js.map"]},"metadata":{},"sourceType":"script"}