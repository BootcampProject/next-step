{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.printWithReducedWhitespace = exports.removeAliases = exports.sortAST = exports.dropUnusedDefinitions = exports.hideStringAndNumericLiterals = exports.hideLiterals = void 0;\n\nconst visitor_1 = require(\"graphql/language/visitor\");\n\nconst printer_1 = require(\"graphql/language/printer\");\n\nconst utilities_1 = require(\"graphql/utilities\");\n\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\n\nfunction hideLiterals(ast) {\n  return visitor_1.visit(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    },\n\n    ListValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        values: []\n      });\n    },\n\n    ObjectValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        fields: []\n      });\n    }\n\n  });\n}\n\nexports.hideLiterals = hideLiterals;\n\nfunction hideStringAndNumericLiterals(ast) {\n  return visitor_1.visit(ast, {\n    IntValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    FloatValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"0\"\n      });\n    },\n\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: \"\",\n        block: false\n      });\n    }\n\n  });\n}\n\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\n\nfunction dropUnusedDefinitions(ast, operationName) {\n  const separated = utilities_1.separateOperations(ast)[operationName];\n\n  if (!separated) {\n    return ast;\n  }\n\n  return separated;\n}\n\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\n\nfunction sorted(items) {\n  if (items) {\n    for (var _len = arguments.length, iteratees = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      iteratees[_key - 1] = arguments[_key];\n    }\n\n    return lodash_sortby_1.default(items, ...iteratees);\n  }\n\n  return undefined;\n}\n\nfunction sortAST(ast) {\n  return visitor_1.visit(ast, {\n    Document(node) {\n      return Object.assign(Object.assign({}, node), {\n        definitions: lodash_sortby_1.default(node.definitions, \"kind\", \"name.value\")\n      });\n    },\n\n    OperationDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    SelectionSet(node) {\n      return Object.assign(Object.assign({}, node), {\n        selections: lodash_sortby_1.default(node.selections, \"kind\", \"name.value\")\n      });\n    },\n\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    },\n\n    FragmentSpread(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    InlineFragment(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\")\n      });\n    },\n\n    FragmentDefinition(node) {\n      return Object.assign(Object.assign({}, node), {\n        directives: sorted(node.directives, \"name.value\"),\n        variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\")\n      });\n    },\n\n    Directive(node) {\n      return Object.assign(Object.assign({}, node), {\n        arguments: sorted(node.arguments, \"name.value\")\n      });\n    }\n\n  });\n}\n\nexports.sortAST = sortAST;\n\nfunction removeAliases(ast) {\n  return visitor_1.visit(ast, {\n    Field(node) {\n      return Object.assign(Object.assign({}, node), {\n        alias: undefined\n      });\n    }\n\n  });\n}\n\nexports.removeAliases = removeAliases;\n\nfunction printWithReducedWhitespace(ast) {\n  const sanitizedAST = visitor_1.visit(ast, {\n    StringValue(node) {\n      return Object.assign(Object.assign({}, node), {\n        value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n        block: false\n      });\n    }\n\n  });\n  const withWhitespace = printer_1.print(sanitizedAST);\n  const minimizedButStillHex = withWhitespace.replace(/\\s+/g, \" \").replace(/([^_a-zA-Z0-9]) /g, (_, c) => c).replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n  return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\n\nexports.printWithReducedWhitespace = printWithReducedWhitespace;","map":{"version":3,"sources":["../src/transforms.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAgBA,MAAA,SAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAKA,MAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAQA,SAAgB,YAAhB,CAA6B,GAA7B,EAA8C;AAC5C,SAAO,SAAA,CAAA,KAAA,CAAM,GAAN,EAAW;AAChB,IAAA,QAAQ,CAAC,IAAD,EAAmB;AACzB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,CAAA;AACD,KAHe;;AAIhB,IAAA,UAAU,CAAC,IAAD,EAAqB;AAC7B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,CAAA;AACD,KANe;;AAOhB,IAAA,WAAW,CAAC,IAAD,EAAsB;AAC/B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE,EAAT;AAAa,QAAA,KAAK,EAAE;AAApB,OAAhB,CAAA;AACD,KATe;;AAUhB,IAAA,SAAS,CAAC,IAAD,EAAoB;AAC3B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAhB,CAAA;AACD,KAZe;;AAahB,IAAA,WAAW,CAAC,IAAD,EAAsB;AAC/B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAhB,CAAA;AACD;;AAfe,GAAX,CAAP;AAiBD;;AAlBD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAsBA,SAAgB,4BAAhB,CAA6C,GAA7C,EAA8D;AAC5D,SAAO,SAAA,CAAA,KAAA,CAAM,GAAN,EAAW;AAChB,IAAA,QAAQ,CAAC,IAAD,EAAmB;AACzB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,CAAA;AACD,KAHe;;AAIhB,IAAA,UAAU,CAAC,IAAD,EAAqB;AAC7B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAhB,CAAA;AACD,KANe;;AAOhB,IAAA,WAAW,CAAC,IAAD,EAAsB;AAC/B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,KAAK,EAAE,EAAT;AAAa,QAAA,KAAK,EAAE;AAApB,OAAhB,CAAA;AACD;;AATe,GAAX,CAAP;AAWD;;AAZD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAmBA,SAAgB,qBAAhB,CACE,GADF,EAEE,aAFF,EAEuB;AAErB,QAAM,SAAS,GAAG,WAAA,CAAA,kBAAA,CAAmB,GAAnB,EAAwB,aAAxB,CAAlB;;AACA,MAAI,CAAC,SAAL,EAAgB;AAGd,WAAO,GAAP;AACD;;AACD,SAAO,SAAP;AACD;;AAXD,OAAA,CAAA,qBAAA,GAAA,qBAAA;;AAeA,SAAS,MAAT,CACE,KADF,EAEsC;AAEpC,MAAI,KAAJ,EAAW;AAAA,sCAFR,SAEQ;AAFR,MAAA,SAEQ;AAAA;;AACT,WAAO,eAAA,CAAA,OAAA,CAAO,KAAP,EAAc,GAAG,SAAjB,CAAP;AACD;;AACD,SAAO,SAAP;AACD;;AAOD,SAAgB,OAAhB,CAAwB,GAAxB,EAAyC;AACvC,SAAO,SAAA,CAAA,KAAA,CAAM,GAAN,EAAW;AAChB,IAAA,QAAQ,CAAC,IAAD,EAAmB;AACzB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AAGP,QAAA,WAAW,EAAE,eAAA,CAAA,OAAA,CAAO,IAAI,CAAC,WAAZ,EAAyB,MAAzB,EAAiC,YAAjC;AAHN,OADT,CAAA;AAMD,KARe;;AAShB,IAAA,mBAAmB,CACjB,IADiB,EACY;AAE7B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,mBAAmB,EAAE,MAAM,CACzB,IAAI,CAAC,mBADoB,EAEzB,qBAFyB;AADpB,OADT,CAAA;AAOD,KAnBe;;AAoBhB,IAAA,YAAY,CAAC,IAAD,EAAuB;AACjC,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AAKP,QAAA,UAAU,EAAE,eAAA,CAAA,OAAA,CAAO,IAAI,CAAC,UAAZ,EAAwB,MAAxB,EAAgC,YAAhC;AALL,OADT,CAAA;AAQD,KA7Be;;AA8BhB,IAAA,KAAK,CAAC,IAAD,EAAgB;AACnB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAN,EAAiB,YAAjB;AADV,OADT,CAAA;AAID,KAnCe;;AAoChB,IAAA,cAAc,CAAC,IAAD,EAAyB;AACrC,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAN,EAAkB,YAAlB;AAApB,OAAhB,CAAA;AACD,KAtCe;;AAuChB,IAAA,cAAc,CAAC,IAAD,EAAyB;AACrC,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAN,EAAkB,YAAlB;AAApB,OAAhB,CAAA;AACD,KAzCe;;AA0ChB,IAAA,kBAAkB,CAAC,IAAD,EAA6B;AAC7C,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,UAAN,EAAkB,YAAlB,CADX;AAEP,QAAA,mBAAmB,EAAE,MAAM,CACzB,IAAI,CAAC,mBADoB,EAEzB,qBAFyB;AAFpB,OADT,CAAA;AAQD,KAnDe;;AAoDhB,IAAA,SAAS,CAAC,IAAD,EAAoB;AAC3B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,IAAZ,CAAA,EAAgB;AAAE,QAAA,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAN,EAAiB,YAAjB;AAAnB,OAAhB,CAAA;AACD;;AAtDe,GAAX,CAAP;AAwDD;;AAzDD,OAAA,CAAA,OAAA,GAAA,OAAA;;AA+DA,SAAgB,aAAhB,CAA8B,GAA9B,EAA+C;AAC7C,SAAO,SAAA,CAAA,KAAA,CAAM,GAAN,EAAW;AAChB,IAAA,KAAK,CAAC,IAAD,EAAgB;AACnB,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,KAAK,EAAE;AADA,OADT,CAAA;AAID;;AANe,GAAX,CAAP;AAQD;;AATD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAeA,SAAgB,0BAAhB,CAA2C,GAA3C,EAA4D;AAU1D,QAAM,YAAY,GAAG,SAAA,CAAA,KAAA,CAAM,GAAN,EAAW;AAC9B,IAAA,WAAW,CAAC,IAAD,EAAsB;AAC/B,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,QAAA,KAAK,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,KAAjB,EAAwB,MAAxB,EAAgC,QAAhC,CAAyC,KAAzC,CADA;AAEP,QAAA,KAAK,EAAE;AAFA,OADT,CAAA;AAKD;;AAP6B,GAAX,CAArB;AASA,QAAM,cAAc,GAAG,SAAA,CAAA,KAAA,CAAM,YAAN,CAAvB;AACA,QAAM,oBAAoB,GAAG,cAAc,CACxC,OAD0B,CAClB,MADkB,EACV,GADU,EAE1B,OAF0B,CAElB,mBAFkB,EAEG,CAAC,CAAD,EAAI,CAAJ,KAAU,CAFb,EAG1B,OAH0B,CAGlB,mBAHkB,EAGG,CAAC,CAAD,EAAI,CAAJ,KAAU,CAHb,CAA7B;AAIA,SAAO,oBAAoB,CAAC,OAArB,CAA6B,gBAA7B,EAA+C,CAAC,CAAD,EAAI,GAAJ,KACpD,IAAI,CAAC,SAAL,CAAe,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,KAAjB,EAAwB,QAAxB,CAAiC,MAAjC,CAAf,CADK,CAAP;AAGD;;AA3BD,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printWithReducedWhitespace = exports.removeAliases = exports.sortAST = exports.dropUnusedDefinitions = exports.hideStringAndNumericLiterals = exports.hideLiterals = void 0;\nconst visitor_1 = require(\"graphql/language/visitor\");\nconst printer_1 = require(\"graphql/language/printer\");\nconst utilities_1 = require(\"graphql/utilities\");\nconst lodash_sortby_1 = __importDefault(require(\"lodash.sortby\"));\nfunction hideLiterals(ast) {\n    return visitor_1.visit(ast, {\n        IntValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"\", block: false });\n        },\n        ListValue(node) {\n            return Object.assign(Object.assign({}, node), { values: [] });\n        },\n        ObjectValue(node) {\n            return Object.assign(Object.assign({}, node), { fields: [] });\n        }\n    });\n}\nexports.hideLiterals = hideLiterals;\nfunction hideStringAndNumericLiterals(ast) {\n    return visitor_1.visit(ast, {\n        IntValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        FloatValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"0\" });\n        },\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: \"\", block: false });\n        }\n    });\n}\nexports.hideStringAndNumericLiterals = hideStringAndNumericLiterals;\nfunction dropUnusedDefinitions(ast, operationName) {\n    const separated = utilities_1.separateOperations(ast)[operationName];\n    if (!separated) {\n        return ast;\n    }\n    return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\nfunction sorted(items, ...iteratees) {\n    if (items) {\n        return lodash_sortby_1.default(items, ...iteratees);\n    }\n    return undefined;\n}\nfunction sortAST(ast) {\n    return visitor_1.visit(ast, {\n        Document(node) {\n            return Object.assign(Object.assign({}, node), { definitions: lodash_sortby_1.default(node.definitions, \"kind\", \"name.value\") });\n        },\n        OperationDefinition(node) {\n            return Object.assign(Object.assign({}, node), { variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        SelectionSet(node) {\n            return Object.assign(Object.assign({}, node), { selections: lodash_sortby_1.default(node.selections, \"kind\", \"name.value\") });\n        },\n        Field(node) {\n            return Object.assign(Object.assign({}, node), { arguments: sorted(node.arguments, \"name.value\") });\n        },\n        FragmentSpread(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\") });\n        },\n        InlineFragment(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\") });\n        },\n        FragmentDefinition(node) {\n            return Object.assign(Object.assign({}, node), { directives: sorted(node.directives, \"name.value\"), variableDefinitions: sorted(node.variableDefinitions, \"variable.name.value\") });\n        },\n        Directive(node) {\n            return Object.assign(Object.assign({}, node), { arguments: sorted(node.arguments, \"name.value\") });\n        }\n    });\n}\nexports.sortAST = sortAST;\nfunction removeAliases(ast) {\n    return visitor_1.visit(ast, {\n        Field(node) {\n            return Object.assign(Object.assign({}, node), { alias: undefined });\n        }\n    });\n}\nexports.removeAliases = removeAliases;\nfunction printWithReducedWhitespace(ast) {\n    const sanitizedAST = visitor_1.visit(ast, {\n        StringValue(node) {\n            return Object.assign(Object.assign({}, node), { value: Buffer.from(node.value, \"utf8\").toString(\"hex\"), block: false });\n        }\n    });\n    const withWhitespace = printer_1.print(sanitizedAST);\n    const minimizedButStillHex = withWhitespace\n        .replace(/\\s+/g, \" \")\n        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n    return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;\n//# sourceMappingURL=transforms.js.map"]},"metadata":{},"sourceType":"script"}