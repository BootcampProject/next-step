{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneObject = exports.processHTTPRequest = exports.runHttpQuery = exports.throwHttpGraphQLError = exports.HttpQueryError = void 0;\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nconst graphqlOptions_1 = require(\"./graphqlOptions\");\n\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\n\nconst requestPipeline_1 = require(\"./requestPipeline\");\n\nclass HttpQueryError extends Error {\n  constructor(statusCode, message) {\n    let isGraphQLError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let headers = arguments.length > 3 ? arguments[3] : undefined;\n    super(message);\n    this.name = 'HttpQueryError';\n    this.statusCode = statusCode;\n    this.isGraphQLError = isGraphQLError;\n    this.headers = headers;\n  }\n\n}\n\nexports.HttpQueryError = HttpQueryError;\n\nfunction throwHttpGraphQLError(statusCode, errors, options, extensions) {\n  const defaultHeaders = {\n    'Content-Type': 'application/json'\n  };\n  const headers = apollo_server_errors_1.hasPersistedQueryError(errors) ? Object.assign(Object.assign({}, defaultHeaders), {\n    'Cache-Control': 'private, no-cache, must-revalidate'\n  }) : defaultHeaders;\n  const result = {\n    errors: options ? apollo_server_errors_1.formatApolloErrors(errors, {\n      debug: options.debug,\n      formatter: options.formatError\n    }) : errors\n  };\n\n  if (extensions) {\n    result.extensions = extensions;\n  }\n\n  throw new HttpQueryError(statusCode, prettyJSONStringify(result), true, headers);\n}\n\nexports.throwHttpGraphQLError = throwHttpGraphQLError;\n\nfunction runHttpQuery(handlerArguments, request) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let options;\n    const debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n\n    try {\n      options = yield graphqlOptions_1.resolveGraphqlOptions(request.options, ...handlerArguments);\n    } catch (e) {\n      return throwHttpGraphQLError(500, [e], {\n        debug: debugDefault\n      });\n    }\n\n    if (options.debug === undefined) {\n      options.debug = debugDefault;\n    }\n\n    if (typeof options.context === 'function') {\n      try {\n        options.context();\n      } catch (e) {\n        e.message = `Context creation failed: ${e.message}`;\n\n        if (e.extensions && e.extensions.code && e.extensions.code !== 'INTERNAL_SERVER_ERROR') {\n          return throwHttpGraphQLError(400, [e], options);\n        } else {\n          return throwHttpGraphQLError(500, [e], options);\n        }\n      }\n    }\n\n    const config = {\n      schema: options.schema,\n      schemaHash: options.schemaHash,\n      logger: options.logger,\n      rootValue: options.rootValue,\n      context: options.context || {},\n      validationRules: options.validationRules,\n      executor: options.executor,\n      fieldResolver: options.fieldResolver,\n      cache: options.cache,\n      dataSources: options.dataSources,\n      documentStore: options.documentStore,\n      extensions: options.extensions,\n      persistedQueries: options.persistedQueries,\n      tracing: options.tracing,\n      formatError: options.formatError,\n      formatResponse: options.formatResponse,\n      debug: options.debug,\n      plugins: options.plugins || []\n    };\n    return processHTTPRequest(config, request);\n  });\n}\n\nexports.runHttpQuery = runHttpQuery;\n\nfunction processHTTPRequest(options, httpRequest) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let requestPayload;\n\n    switch (httpRequest.method) {\n      case 'POST':\n        if (!httpRequest.query || Object.keys(httpRequest.query).length === 0) {\n          throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n        }\n\n        requestPayload = httpRequest.query;\n        break;\n\n      case 'GET':\n        if (!httpRequest.query || Object.keys(httpRequest.query).length === 0) {\n          throw new HttpQueryError(400, 'GET query missing.');\n        }\n\n        requestPayload = httpRequest.query;\n        break;\n\n      default:\n        throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n          Allow: 'GET, POST'\n        });\n    }\n\n    options = Object.assign(Object.assign({}, options), {\n      plugins: [checkOperationPlugin, ...options.plugins]\n    });\n\n    function buildRequestContext(request) {\n      const context = cloneObject(options.context);\n      return {\n        logger: options.logger || console,\n        schema: options.schema,\n        schemaHash: options.schemaHash,\n        request,\n        response: {\n          http: {\n            headers: new apollo_server_env_1.Headers()\n          }\n        },\n        context,\n        cache: options.cache,\n        debug: options.debug,\n        metrics: {}\n      };\n    }\n\n    const responseInit = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    let body;\n\n    try {\n      if (Array.isArray(requestPayload)) {\n        const requests = requestPayload.map(requestParams => parseGraphQLRequest(httpRequest.request, requestParams));\n        const responses = yield Promise.all(requests.map(request => __awaiter(this, void 0, void 0, function* () {\n          try {\n            const requestContext = buildRequestContext(request);\n            return yield requestPipeline_1.processGraphQLRequest(options, requestContext);\n          } catch (error) {\n            return {\n              errors: apollo_server_errors_1.formatApolloErrors([error], options)\n            };\n          }\n        })));\n        body = prettyJSONStringify(responses.map(serializeGraphQLResponse));\n      } else {\n        const request = parseGraphQLRequest(httpRequest.request, requestPayload);\n\n        try {\n          const requestContext = buildRequestContext(request);\n          const response = yield requestPipeline_1.processGraphQLRequest(options, requestContext);\n\n          if (response.errors && typeof response.data === 'undefined') {\n            return throwHttpGraphQLError(response.http && response.http.status || 400, response.errors, undefined, response.extensions);\n          }\n\n          if (response.http) {\n            for (const [name, value] of response.http.headers) {\n              responseInit.headers[name] = value;\n            }\n          }\n\n          body = prettyJSONStringify(serializeGraphQLResponse(response));\n        } catch (error) {\n          if (error instanceof requestPipeline_1.InvalidGraphQLRequestError) {\n            throw new HttpQueryError(400, error.message);\n          } else if (error instanceof apollo_server_errors_1.PersistedQueryNotSupportedError || error instanceof apollo_server_errors_1.PersistedQueryNotFoundError) {\n            return throwHttpGraphQLError(200, [error], options);\n          } else {\n            throw error;\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof HttpQueryError) {\n        throw error;\n      }\n\n      return throwHttpGraphQLError(500, [error], options);\n    }\n\n    responseInit.headers['Content-Length'] = Buffer.byteLength(body, 'utf8').toString();\n    return {\n      graphqlResponse: body,\n      responseInit\n    };\n  });\n}\n\nexports.processHTTPRequest = processHTTPRequest;\n\nfunction parseGraphQLRequest(httpRequest, requestParams) {\n  let queryString = requestParams.query;\n  let extensions = requestParams.extensions;\n\n  if (typeof extensions === 'string' && extensions !== '') {\n    try {\n      extensions = JSON.parse(extensions);\n    } catch (error) {\n      throw new HttpQueryError(400, 'Extensions are invalid JSON.');\n    }\n  }\n\n  if (queryString && typeof queryString !== 'string') {\n    if (queryString.kind === 'Document') {\n      throw new HttpQueryError(400, \"GraphQL queries must be strings. It looks like you're sending the \" + 'internal graphql-js representation of a parsed query in your ' + 'request instead of a request in the GraphQL query language. You ' + 'can convert an AST to a string using the `print` function from ' + '`graphql`, or use a client like `apollo-client` which converts ' + 'the internal representation to a string for you.');\n    } else {\n      throw new HttpQueryError(400, 'GraphQL queries must be strings.');\n    }\n  }\n\n  const operationName = requestParams.operationName;\n  let variables = requestParams.variables;\n\n  if (typeof variables === 'string' && variables !== '') {\n    try {\n      variables = JSON.parse(variables);\n    } catch (error) {\n      throw new HttpQueryError(400, 'Variables are invalid JSON.');\n    }\n  }\n\n  return {\n    query: queryString,\n    operationName,\n    variables,\n    extensions,\n    http: httpRequest\n  };\n}\n\nconst checkOperationPlugin = {\n  requestDidStart() {\n    return {\n      didResolveOperation(_ref) {\n        let {\n          request,\n          operation\n        } = _ref;\n        if (!request.http) return;\n\n        if (request.http.method === 'GET' && operation.operation !== 'query') {\n          throw new HttpQueryError(405, `GET supports only query operation`, false, {\n            Allow: 'POST'\n          });\n        }\n      }\n\n    };\n  }\n\n};\n\nfunction serializeGraphQLResponse(response) {\n  return {\n    errors: response.errors,\n    data: response.data,\n    extensions: response.extensions\n  };\n}\n\nfunction prettyJSONStringify(value) {\n  return JSON.stringify(value) + '\\n';\n}\n\nfunction cloneObject(object) {\n  return Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n}\n\nexports.cloneObject = cloneObject;","map":{"version":3,"sources":["../src/runHttpQuery.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneObject = exports.processHTTPRequest = exports.runHttpQuery = exports.throwHttpGraphQLError = exports.HttpQueryError = void 0;\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst graphqlOptions_1 = require(\"./graphqlOptions\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst requestPipeline_1 = require(\"./requestPipeline\");\nclass HttpQueryError extends Error {\n    constructor(statusCode, message, isGraphQLError = false, headers) {\n        super(message);\n        this.name = 'HttpQueryError';\n        this.statusCode = statusCode;\n        this.isGraphQLError = isGraphQLError;\n        this.headers = headers;\n    }\n}\nexports.HttpQueryError = HttpQueryError;\nfunction throwHttpGraphQLError(statusCode, errors, options, extensions) {\n    const defaultHeaders = { 'Content-Type': 'application/json' };\n    const headers = apollo_server_errors_1.hasPersistedQueryError(errors)\n        ? Object.assign(Object.assign({}, defaultHeaders), { 'Cache-Control': 'private, no-cache, must-revalidate' }) : defaultHeaders;\n    const result = {\n        errors: options\n            ? apollo_server_errors_1.formatApolloErrors(errors, {\n                debug: options.debug,\n                formatter: options.formatError,\n            })\n            : errors,\n    };\n    if (extensions) {\n        result.extensions = extensions;\n    }\n    throw new HttpQueryError(statusCode, prettyJSONStringify(result), true, headers);\n}\nexports.throwHttpGraphQLError = throwHttpGraphQLError;\nfunction runHttpQuery(handlerArguments, request) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let options;\n        const debugDefault = process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test';\n        try {\n            options = yield graphqlOptions_1.resolveGraphqlOptions(request.options, ...handlerArguments);\n        }\n        catch (e) {\n            return throwHttpGraphQLError(500, [e], { debug: debugDefault });\n        }\n        if (options.debug === undefined) {\n            options.debug = debugDefault;\n        }\n        if (typeof options.context === 'function') {\n            try {\n                options.context();\n            }\n            catch (e) {\n                e.message = `Context creation failed: ${e.message}`;\n                if (e.extensions &&\n                    e.extensions.code &&\n                    e.extensions.code !== 'INTERNAL_SERVER_ERROR') {\n                    return throwHttpGraphQLError(400, [e], options);\n                }\n                else {\n                    return throwHttpGraphQLError(500, [e], options);\n                }\n            }\n        }\n        const config = {\n            schema: options.schema,\n            schemaHash: options.schemaHash,\n            logger: options.logger,\n            rootValue: options.rootValue,\n            context: options.context || {},\n            validationRules: options.validationRules,\n            executor: options.executor,\n            fieldResolver: options.fieldResolver,\n            cache: options.cache,\n            dataSources: options.dataSources,\n            documentStore: options.documentStore,\n            extensions: options.extensions,\n            persistedQueries: options.persistedQueries,\n            tracing: options.tracing,\n            formatError: options.formatError,\n            formatResponse: options.formatResponse,\n            debug: options.debug,\n            plugins: options.plugins || [],\n        };\n        return processHTTPRequest(config, request);\n    });\n}\nexports.runHttpQuery = runHttpQuery;\nfunction processHTTPRequest(options, httpRequest) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let requestPayload;\n        switch (httpRequest.method) {\n            case 'POST':\n                if (!httpRequest.query || Object.keys(httpRequest.query).length === 0) {\n                    throw new HttpQueryError(500, 'POST body missing. Did you forget use body-parser middleware?');\n                }\n                requestPayload = httpRequest.query;\n                break;\n            case 'GET':\n                if (!httpRequest.query || Object.keys(httpRequest.query).length === 0) {\n                    throw new HttpQueryError(400, 'GET query missing.');\n                }\n                requestPayload = httpRequest.query;\n                break;\n            default:\n                throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n                    Allow: 'GET, POST',\n                });\n        }\n        options = Object.assign(Object.assign({}, options), { plugins: [checkOperationPlugin, ...options.plugins] });\n        function buildRequestContext(request) {\n            const context = cloneObject(options.context);\n            return {\n                logger: options.logger || console,\n                schema: options.schema,\n                schemaHash: options.schemaHash,\n                request,\n                response: {\n                    http: {\n                        headers: new apollo_server_env_1.Headers(),\n                    },\n                },\n                context,\n                cache: options.cache,\n                debug: options.debug,\n                metrics: {},\n            };\n        }\n        const responseInit = {\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        };\n        let body;\n        try {\n            if (Array.isArray(requestPayload)) {\n                const requests = requestPayload.map(requestParams => parseGraphQLRequest(httpRequest.request, requestParams));\n                const responses = yield Promise.all(requests.map((request) => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        const requestContext = buildRequestContext(request);\n                        return yield requestPipeline_1.processGraphQLRequest(options, requestContext);\n                    }\n                    catch (error) {\n                        return {\n                            errors: apollo_server_errors_1.formatApolloErrors([error], options),\n                        };\n                    }\n                })));\n                body = prettyJSONStringify(responses.map(serializeGraphQLResponse));\n            }\n            else {\n                const request = parseGraphQLRequest(httpRequest.request, requestPayload);\n                try {\n                    const requestContext = buildRequestContext(request);\n                    const response = yield requestPipeline_1.processGraphQLRequest(options, requestContext);\n                    if (response.errors && typeof response.data === 'undefined') {\n                        return throwHttpGraphQLError((response.http && response.http.status) || 400, response.errors, undefined, response.extensions);\n                    }\n                    if (response.http) {\n                        for (const [name, value] of response.http.headers) {\n                            responseInit.headers[name] = value;\n                        }\n                    }\n                    body = prettyJSONStringify(serializeGraphQLResponse(response));\n                }\n                catch (error) {\n                    if (error instanceof requestPipeline_1.InvalidGraphQLRequestError) {\n                        throw new HttpQueryError(400, error.message);\n                    }\n                    else if (error instanceof apollo_server_errors_1.PersistedQueryNotSupportedError ||\n                        error instanceof apollo_server_errors_1.PersistedQueryNotFoundError) {\n                        return throwHttpGraphQLError(200, [error], options);\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            if (error instanceof HttpQueryError) {\n                throw error;\n            }\n            return throwHttpGraphQLError(500, [error], options);\n        }\n        responseInit.headers['Content-Length'] = Buffer.byteLength(body, 'utf8').toString();\n        return {\n            graphqlResponse: body,\n            responseInit,\n        };\n    });\n}\nexports.processHTTPRequest = processHTTPRequest;\nfunction parseGraphQLRequest(httpRequest, requestParams) {\n    let queryString = requestParams.query;\n    let extensions = requestParams.extensions;\n    if (typeof extensions === 'string' && extensions !== '') {\n        try {\n            extensions = JSON.parse(extensions);\n        }\n        catch (error) {\n            throw new HttpQueryError(400, 'Extensions are invalid JSON.');\n        }\n    }\n    if (queryString && typeof queryString !== 'string') {\n        if (queryString.kind === 'Document') {\n            throw new HttpQueryError(400, \"GraphQL queries must be strings. It looks like you're sending the \" +\n                'internal graphql-js representation of a parsed query in your ' +\n                'request instead of a request in the GraphQL query language. You ' +\n                'can convert an AST to a string using the `print` function from ' +\n                '`graphql`, or use a client like `apollo-client` which converts ' +\n                'the internal representation to a string for you.');\n        }\n        else {\n            throw new HttpQueryError(400, 'GraphQL queries must be strings.');\n        }\n    }\n    const operationName = requestParams.operationName;\n    let variables = requestParams.variables;\n    if (typeof variables === 'string' && variables !== '') {\n        try {\n            variables = JSON.parse(variables);\n        }\n        catch (error) {\n            throw new HttpQueryError(400, 'Variables are invalid JSON.');\n        }\n    }\n    return {\n        query: queryString,\n        operationName,\n        variables,\n        extensions,\n        http: httpRequest,\n    };\n}\nconst checkOperationPlugin = {\n    requestDidStart() {\n        return {\n            didResolveOperation({ request, operation }) {\n                if (!request.http)\n                    return;\n                if (request.http.method === 'GET' && operation.operation !== 'query') {\n                    throw new HttpQueryError(405, `GET supports only query operation`, false, {\n                        Allow: 'POST',\n                    });\n                }\n            },\n        };\n    },\n};\nfunction serializeGraphQLResponse(response) {\n    return {\n        errors: response.errors,\n        data: response.data,\n        extensions: response.extensions,\n    };\n}\nfunction prettyJSONStringify(value) {\n    return JSON.stringify(value) + '\\n';\n}\nfunction cloneObject(object) {\n    return Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n}\nexports.cloneObject = cloneObject;\n//# sourceMappingURL=runHttpQuery.js.map"]},"metadata":{},"sourceType":"script"}