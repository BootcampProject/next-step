{"ast":null,"code":"export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nexport function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('nextStep', 1);\n    let db, tx, store;\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      db.createObjectStore('questions', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n    }; // request.onerror = function(e) {\n    //   console.log('There was an error');\n    // };\n    // request.onsuccess = function(e) {\n    //   db = request.result;\n    //   tx = db.transaction(storeName, 'readwrite');\n    //   store = tx.objectStore(storeName);\n    //   db.onerror = function(e) {\n    //     console.log('error', e);\n    //   };\n    //   switch (method) {\n    //     case 'put':\n    //       store.put(object);\n    //       resolve(object);\n    //       break;\n    //     case 'get':\n    //       const all = store.getAll();\n    //       all.onsuccess = function() {\n    //         resolve(all.result);\n    //       };\n    //       break;\n    //     case 'delete':\n    //       store.delete(object._id);\n    //       break;\n    //     default:\n    //       console.log('No valid method');\n    //       break;\n    //   }\n    //   tx.oncomplete = function() {\n    //     db.close();\n    //   };\n    // };\n\n  });\n}","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/client/src/utils/helpers.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","validateEmail","email","re","test","String","toLowerCase","pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,MAA/B,EAAuC;AAC1C,SAAOA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAxC;AACD;AAED,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,MAAIC,EAAE,GAAG,uJAAT;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQC,MAAM,CAACH,KAAD,CAAN,CAAcI,WAAd,EAAR,CAAP;AACD;AAED,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AACrC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,WAAOD,IAAP;AACD;;AACD,SAAOA,IAAI,GAAG,GAAd;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AACpD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,UAAtB,EAAkC,CAAlC,CAAhB;AACA,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ;;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0B,UAASC,CAAT,EAAY;AACpC,YAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB;AACAL,MAAAA,EAAE,CAACM,iBAAH,CAAqB,WAArB,EAAkC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAlC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAnC;AACD,KAJD,CAHsC,CAStC;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACD,GA7CM,CAAP;AA8CD","sourcesContent":["export function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  \n  export function validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  export function pluralize(name, count) {\n    if (count === 1) {\n      return name;\n    }\n    return name + 's';\n  }\n  \n  export function idbPromise(storeName, method, object) {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open('nextStep', 1);\n      let db, tx, store;\n      request.onupgradeneeded = function(e) {\n        const db = request.result;\n        db.createObjectStore('questions', { keyPath: '_id' });\n        db.createObjectStore('categories', { keyPath: '_id' });\n      };\n  \n      // request.onerror = function(e) {\n      //   console.log('There was an error');\n      // };\n  \n      // request.onsuccess = function(e) {\n      //   db = request.result;\n      //   tx = db.transaction(storeName, 'readwrite');\n      //   store = tx.objectStore(storeName);\n  \n      //   db.onerror = function(e) {\n      //     console.log('error', e);\n      //   };\n  \n      //   switch (method) {\n      //     case 'put':\n      //       store.put(object);\n      //       resolve(object);\n      //       break;\n      //     case 'get':\n      //       const all = store.getAll();\n      //       all.onsuccess = function() {\n      //         resolve(all.result);\n      //       };\n      //       break;\n      //     case 'delete':\n      //       store.delete(object._id);\n      //       break;\n      //     default:\n      //       console.log('No valid method');\n      //       break;\n      //   }\n  \n      //   tx.oncomplete = function() {\n      //     db.close();\n      //   };\n      // };\n    });\n  }\n  "]},"metadata":{},"sourceType":"module"}