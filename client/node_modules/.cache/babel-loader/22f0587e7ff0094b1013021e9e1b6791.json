{"ast":null,"code":"function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = {\n      forever: options\n    };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\n\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function () {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n};\n\nRetryOperation.prototype.stop = function () {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function (err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n\n  var currentTime = new Date().getTime();\n\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function () {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function () {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n        self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n    this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function (fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function () {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function (fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function (fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function () {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function () {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function () {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/node_modules/retry/lib/retry_operation.js"],"names":["RetryOperation","timeouts","options","forever","_originalTimeouts","JSON","parse","stringify","_timeouts","_options","_maxRetryTime","maxRetryTime","Infinity","_fn","_errors","_attempts","_operationTimeout","_operationTimeoutCb","_timeout","_operationStart","_timer","_cachedTimeouts","slice","module","exports","prototype","reset","stop","clearTimeout","retry","err","currentTime","Date","getTime","push","unshift","Error","timeout","shift","undefined","splice","length","self","setTimeout","unref","attempt","fn","timeoutOps","cb","try","console","log","start","errors","attempts","mainError","counts","mainErrorCount","i","error","message","count"],"mappings":"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","sourcesContent":["function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n"]},"metadata":{},"sourceType":"script"}