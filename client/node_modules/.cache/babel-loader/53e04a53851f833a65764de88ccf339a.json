{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dateToProtoTimestamp = exports.TraceTreeBuilder = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\n\nfunction internalError(message) {\n  return new Error(`[internal apollo-server error] ${message}`);\n}\n\nclass TraceTreeBuilder {\n  constructor(options) {\n    this.rootNode = new apollo_reporting_protobuf_1.Trace.Node();\n    this.logger = console;\n    this.trace = new apollo_reporting_protobuf_1.Trace({\n      root: this.rootNode\n    });\n    this.stopped = false;\n    this.nodes = new Map([[responsePathAsString(), this.rootNode]]);\n    this.rewriteError = options.rewriteError;\n    if (options.logger) this.logger = options.logger;\n  }\n\n  startTiming() {\n    if (this.startHrTime) {\n      throw internalError('startTiming called twice!');\n    }\n\n    if (this.stopped) {\n      throw internalError('startTiming called after stopTiming!');\n    }\n\n    this.trace.startTime = dateToProtoTimestamp(new Date());\n    this.startHrTime = process.hrtime();\n  }\n\n  stopTiming() {\n    if (!this.startHrTime) {\n      throw internalError('stopTiming called before startTiming!');\n    }\n\n    if (this.stopped) {\n      throw internalError('stopTiming called twice!');\n    }\n\n    this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n    this.trace.endTime = dateToProtoTimestamp(new Date());\n    this.stopped = true;\n  }\n\n  willResolveField(info) {\n    if (!this.startHrTime) {\n      throw internalError('willResolveField called before startTiming!');\n    }\n\n    if (this.stopped) {\n      throw internalError('willResolveField called after stopTiming!');\n    }\n\n    const path = info.path;\n    const node = this.newNode(path);\n    node.type = info.returnType.toString();\n    node.parentType = info.parentType.toString();\n    node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n\n    if (typeof path.key === 'string' && path.key !== info.fieldName) {\n      node.originalFieldName = info.fieldName;\n    }\n\n    return () => {\n      node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n    };\n  }\n\n  didEncounterErrors(errors) {\n    errors.forEach(err => {\n      if (err.extensions && err.extensions.serviceName) {\n        return;\n      }\n\n      const errorForReporting = this.rewriteAndNormalizeError(err);\n\n      if (errorForReporting === null) {\n        return;\n      }\n\n      this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));\n    });\n  }\n\n  addProtobufError(path, error) {\n    if (!this.startHrTime) {\n      throw internalError('addProtobufError called before startTiming!');\n    }\n\n    if (this.stopped) {\n      throw internalError('addProtobufError called after stopTiming!');\n    }\n\n    let node = this.rootNode;\n\n    if (Array.isArray(path)) {\n      const specificNode = this.nodes.get(path.join('.'));\n\n      if (specificNode) {\n        node = specificNode;\n      } else {\n        this.logger.warn(`Could not find node with path ${path.join('.')}; defaulting to put errors on root node.`);\n      }\n    }\n\n    node.error.push(error);\n  }\n\n  newNode(path) {\n    const node = new apollo_reporting_protobuf_1.Trace.Node();\n    const id = path.key;\n\n    if (typeof id === 'number') {\n      node.index = id;\n    } else {\n      node.responseName = id;\n    }\n\n    this.nodes.set(responsePathAsString(path), node);\n    const parentNode = this.ensureParentNode(path);\n    parentNode.child.push(node);\n    return node;\n  }\n\n  ensureParentNode(path) {\n    const parentPath = responsePathAsString(path.prev);\n    const parentNode = this.nodes.get(parentPath);\n\n    if (parentNode) {\n      return parentNode;\n    }\n\n    return this.newNode(path.prev);\n  }\n\n  rewriteAndNormalizeError(err) {\n    if (this.rewriteError) {\n      const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);\n      const rewrittenError = this.rewriteError(clonedError);\n\n      if (rewrittenError === null) {\n        return null;\n      }\n\n      if (!(rewrittenError instanceof graphql_1.GraphQLError)) {\n        return err;\n      }\n\n      return new graphql_1.GraphQLError(rewrittenError.message, err.nodes, err.source, err.positions, err.path, err.originalError, rewrittenError.extensions || err.extensions);\n    }\n\n    return err;\n  }\n\n}\n\nexports.TraceTreeBuilder = TraceTreeBuilder;\n\nfunction durationHrTimeToNanos(hrtime) {\n  return hrtime[0] * 1e9 + hrtime[1];\n}\n\nfunction responsePathAsString(p) {\n  if (p === undefined) {\n    return '';\n  }\n\n  let res = String(p.key);\n\n  while ((p = p.prev) !== undefined) {\n    res = `${p.key}.${res}`;\n  }\n\n  return res;\n}\n\nfunction errorToProtobufError(error) {\n  return new apollo_reporting_protobuf_1.Trace.Error({\n    message: error.message,\n    location: (error.locations || []).map(_ref => {\n      let {\n        line,\n        column\n      } = _ref;\n      return new apollo_reporting_protobuf_1.Trace.Location({\n        line,\n        column\n      });\n    }),\n    json: JSON.stringify(error)\n  });\n}\n\nfunction dateToProtoTimestamp(date) {\n  const totalMillis = +date;\n  const millis = totalMillis % 1000;\n  return new apollo_reporting_protobuf_1.google.protobuf.Timestamp({\n    seconds: (totalMillis - millis) / 1000,\n    nanos: millis * 1e6\n  });\n}\n\nexports.dateToProtoTimestamp = dateToProtoTimestamp;","map":{"version":3,"sources":["../../src/plugin/traceTreeBuilder.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,2BAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAGA,SAAS,aAAT,CAAuB,OAAvB,EAAsC;AACpC,SAAO,IAAI,KAAJ,CAAU,kCAAkC,OAAO,EAAnD,CAAP;AACD;;AAED,MAAa,gBAAb,CAA6B;AAW3B,EAAA,WAAA,CAAmB,OAAnB,EAGC;AAbO,SAAA,QAAA,GAAW,IAAI,2BAAA,CAAA,KAAA,CAAM,IAAV,EAAX;AACA,SAAA,MAAA,GAAiB,OAAjB;AACD,SAAA,KAAA,GAAQ,IAAI,2BAAA,CAAA,KAAJ,CAAU;AAAE,MAAA,IAAI,EAAE,KAAK;AAAb,KAAV,CAAR;AAEC,SAAA,OAAA,GAAU,KAAV;AACA,SAAA,KAAA,GAAQ,IAAI,GAAJ,CAA4B,CAC1C,CAAC,oBAAoB,EAArB,EAAyB,KAAK,QAA9B,CAD0C,CAA5B,CAAR;AASN,SAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;AACA,QAAI,OAAO,CAAC,MAAZ,EAAoB,KAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACrB;;AAEM,EAAA,WAAW,GAAA;AAChB,QAAI,KAAK,WAAT,EAAsB;AACpB,YAAM,aAAa,CAAC,2BAAD,CAAnB;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,YAAM,aAAa,CAAC,sCAAD,CAAnB;AACD;;AACD,SAAK,KAAL,CAAW,SAAX,GAAuB,oBAAoB,CAAC,IAAI,IAAJ,EAAD,CAA3C;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,MAAR,EAAnB;AACD;;AAEM,EAAA,UAAU,GAAA;AACf,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,YAAM,aAAa,CAAC,uCAAD,CAAnB;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,YAAM,aAAa,CAAC,0BAAD,CAAnB;AACD;;AAED,SAAK,KAAL,CAAW,UAAX,GAAwB,qBAAqB,CAC3C,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB,CAD2C,CAA7C;AAGA,SAAK,KAAL,CAAW,OAAX,GAAqB,oBAAoB,CAAC,IAAI,IAAJ,EAAD,CAAzC;AACA,SAAK,OAAL,GAAe,IAAf;AACD;;AAEM,EAAA,gBAAgB,CAAC,IAAD,EAAyB;AAC9C,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,YAAM,aAAa,CAAC,6CAAD,CAAnB;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,YAAM,aAAa,CAAC,2CAAD,CAAnB;AACD;;AAED,UAAM,IAAI,GAAG,IAAI,CAAC,IAAlB;AACA,UAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAAb,CAAb;AACA,IAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,UAAL,CAAgB,QAAhB,EAAZ;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,IAAI,CAAC,UAAL,CAAgB,QAAhB,EAAlB;AACA,IAAA,IAAI,CAAC,SAAL,GAAiB,qBAAqB,CAAC,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB,CAAD,CAAtC;;AACA,QAAI,OAAO,IAAI,CAAC,GAAZ,KAAoB,QAApB,IAAgC,IAAI,CAAC,GAAL,KAAa,IAAI,CAAC,SAAtD,EAAiE;AAE/D,MAAA,IAAI,CAAC,iBAAL,GAAyB,IAAI,CAAC,SAA9B;AACD;;AAED,WAAO,MAAK;AACV,MAAA,IAAI,CAAC,OAAL,GAAe,qBAAqB,CAAC,OAAO,CAAC,MAAR,CAAe,KAAK,WAApB,CAAD,CAApC;AACD,KAFD;AAGD;;AAEM,EAAA,kBAAkB,CAAC,MAAD,EAAgC;AACvD,IAAA,MAAM,CAAC,OAAP,CAAgB,GAAD,IAAQ;AAOrB,UAAI,GAAG,CAAC,UAAJ,IAAkB,GAAG,CAAC,UAAJ,CAAe,WAArC,EAAkD;AAChD;AACD;;AAMD,YAAM,iBAAiB,GAAG,KAAK,wBAAL,CAA8B,GAA9B,CAA1B;;AAEA,UAAI,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B;AACD;;AAED,WAAK,gBAAL,CACE,iBAAiB,CAAC,IADpB,EAEE,oBAAoB,CAAC,iBAAD,CAFtB;AAID,KAzBD;AA0BD;;AAEO,EAAA,gBAAgB,CACtB,IADsB,EAEtB,KAFsB,EAEJ;AAElB,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,YAAM,aAAa,CAAC,6CAAD,CAAnB;AACD;;AACD,QAAI,KAAK,OAAT,EAAkB;AAChB,YAAM,aAAa,CAAC,2CAAD,CAAnB;AACD;;AAGD,QAAI,IAAI,GAAG,KAAK,QAAhB;;AAGA,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,YAAM,YAAY,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,IAAI,CAAC,IAAL,CAAU,GAAV,CAAf,CAArB;;AACA,UAAI,YAAJ,EAAkB;AAChB,QAAA,IAAI,GAAG,YAAP;AACD,OAFD,MAEO;AACL,aAAK,MAAL,CAAY,IAAZ,CACE,iCAAiC,IAAI,CAAC,IAAL,CAC/B,GAD+B,CAEhC,0CAHH;AAKD;AACF;;AAED,IAAA,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,KAAhB;AACD;;AAEO,EAAA,OAAO,CAAC,IAAD,EAAmB;AAChC,UAAM,IAAI,GAAG,IAAI,2BAAA,CAAA,KAAA,CAAM,IAAV,EAAb;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,GAAhB;;AACA,QAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,MAAA,IAAI,CAAC,KAAL,GAAa,EAAb;AACD,KAFD,MAEO;AACL,MAAA,IAAI,CAAC,YAAL,GAAoB,EAApB;AACD;;AACD,SAAK,KAAL,CAAW,GAAX,CAAe,oBAAoB,CAAC,IAAD,CAAnC,EAA2C,IAA3C;AACA,UAAM,UAAU,GAAG,KAAK,gBAAL,CAAsB,IAAtB,CAAnB;AACA,IAAA,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAsB,IAAtB;AACA,WAAO,IAAP;AACD;;AAEO,EAAA,gBAAgB,CAAC,IAAD,EAAmB;AACzC,UAAM,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,IAAN,CAAvC;AACA,UAAM,UAAU,GAAG,KAAK,KAAL,CAAW,GAAX,CAAe,UAAf,CAAnB;;AACA,QAAI,UAAJ,EAAgB;AACd,aAAO,UAAP;AACD;;AAGD,WAAO,KAAK,OAAL,CAAa,IAAI,CAAC,IAAlB,CAAP;AACD;;AAEO,EAAA,wBAAwB,CAAC,GAAD,EAAkB;AAChD,QAAI,KAAK,YAAT,EAAuB;AAYrB,YAAM,WAAW,GAAG,MAAM,CAAC,MAAP,CAClB,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,cAAP,CAAsB,GAAtB,CAAd,CADkB,EAElB,GAFkB,CAApB;AAKA,YAAM,cAAc,GAAG,KAAK,YAAL,CAAkB,WAAlB,CAAvB;;AAIA,UAAI,cAAc,KAAK,IAAvB,EAA6B;AAC3B,eAAO,IAAP;AACD;;AAKD,UAAI,EAAE,cAAc,YAAY,SAAA,CAAA,YAA5B,CAAJ,EAA+C;AAC7C,eAAO,GAAP;AACD;;AAQD,aAAO,IAAI,SAAA,CAAA,YAAJ,CACL,cAAc,CAAC,OADV,EAEL,GAAG,CAAC,KAFC,EAGL,GAAG,CAAC,MAHC,EAIL,GAAG,CAAC,SAJC,EAKL,GAAG,CAAC,IALC,EAML,GAAG,CAAC,aANC,EAOL,cAAc,CAAC,UAAf,IAA6B,GAAG,CAAC,UAP5B,CAAP;AASD;;AACD,WAAO,GAAP;AACD;;AA3M0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AA4NA,SAAS,qBAAT,CAA+B,MAA/B,EAAuD;AACrD,SAAO,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,GAAkB,MAAM,CAAC,CAAD,CAA/B;AACD;;AAID,SAAS,oBAAT,CAA8B,CAA9B,EAA8C;AAC5C,MAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAO,EAAP;AACD;;AAID,MAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,GAAH,CAAhB;;AAEA,SAAO,CAAC,CAAC,GAAG,CAAC,CAAC,IAAP,MAAiB,SAAxB,EAAmC;AACjC,IAAA,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,EAArB;AACD;;AAED,SAAO,GAAP;AACD;;AAED,SAAS,oBAAT,CAA8B,KAA9B,EAAiD;AAC/C,SAAO,IAAI,2BAAA,CAAA,KAAA,CAAM,KAAV,CAAgB;AACrB,IAAA,OAAO,EAAE,KAAK,CAAC,OADM;AAErB,IAAA,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAN,IAAmB,EAApB,EAAwB,GAAxB,CACR;AAAA,UAAC;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,OAAD;AAAA,aAAsB,IAAI,2BAAA,CAAA,KAAA,CAAM,QAAV,CAAmB;AAAE,QAAA,IAAF;AAAQ,QAAA;AAAR,OAAnB,CAAtB;AAAA,KADQ,CAFW;AAKrB,IAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,KAAf;AALe,GAAhB,CAAP;AAOD;;AAGD,SAAgB,oBAAhB,CAAqC,IAArC,EAA+C;AAC7C,QAAM,WAAW,GAAG,CAAC,IAArB;AACA,QAAM,MAAM,GAAG,WAAW,GAAG,IAA7B;AACA,SAAO,IAAI,2BAAA,CAAA,MAAA,CAAO,QAAP,CAAgB,SAApB,CAA8B;AACnC,IAAA,OAAO,EAAE,CAAC,WAAW,GAAG,MAAf,IAAyB,IADC;AAEnC,IAAA,KAAK,EAAE,MAAM,GAAG;AAFmB,GAA9B,CAAP;AAID;;AAPD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dateToProtoTimestamp = exports.TraceTreeBuilder = void 0;\nconst graphql_1 = require(\"graphql\");\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nfunction internalError(message) {\n    return new Error(`[internal apollo-server error] ${message}`);\n}\nclass TraceTreeBuilder {\n    constructor(options) {\n        this.rootNode = new apollo_reporting_protobuf_1.Trace.Node();\n        this.logger = console;\n        this.trace = new apollo_reporting_protobuf_1.Trace({ root: this.rootNode });\n        this.stopped = false;\n        this.nodes = new Map([\n            [responsePathAsString(), this.rootNode],\n        ]);\n        this.rewriteError = options.rewriteError;\n        if (options.logger)\n            this.logger = options.logger;\n    }\n    startTiming() {\n        if (this.startHrTime) {\n            throw internalError('startTiming called twice!');\n        }\n        if (this.stopped) {\n            throw internalError('startTiming called after stopTiming!');\n        }\n        this.trace.startTime = dateToProtoTimestamp(new Date());\n        this.startHrTime = process.hrtime();\n    }\n    stopTiming() {\n        if (!this.startHrTime) {\n            throw internalError('stopTiming called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('stopTiming called twice!');\n        }\n        this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        this.trace.endTime = dateToProtoTimestamp(new Date());\n        this.stopped = true;\n    }\n    willResolveField(info) {\n        if (!this.startHrTime) {\n            throw internalError('willResolveField called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('willResolveField called after stopTiming!');\n        }\n        const path = info.path;\n        const node = this.newNode(path);\n        node.type = info.returnType.toString();\n        node.parentType = info.parentType.toString();\n        node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        if (typeof path.key === 'string' && path.key !== info.fieldName) {\n            node.originalFieldName = info.fieldName;\n        }\n        return () => {\n            node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        };\n    }\n    didEncounterErrors(errors) {\n        errors.forEach((err) => {\n            if (err.extensions && err.extensions.serviceName) {\n                return;\n            }\n            const errorForReporting = this.rewriteAndNormalizeError(err);\n            if (errorForReporting === null) {\n                return;\n            }\n            this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));\n        });\n    }\n    addProtobufError(path, error) {\n        if (!this.startHrTime) {\n            throw internalError('addProtobufError called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('addProtobufError called after stopTiming!');\n        }\n        let node = this.rootNode;\n        if (Array.isArray(path)) {\n            const specificNode = this.nodes.get(path.join('.'));\n            if (specificNode) {\n                node = specificNode;\n            }\n            else {\n                this.logger.warn(`Could not find node with path ${path.join('.')}; defaulting to put errors on root node.`);\n            }\n        }\n        node.error.push(error);\n    }\n    newNode(path) {\n        const node = new apollo_reporting_protobuf_1.Trace.Node();\n        const id = path.key;\n        if (typeof id === 'number') {\n            node.index = id;\n        }\n        else {\n            node.responseName = id;\n        }\n        this.nodes.set(responsePathAsString(path), node);\n        const parentNode = this.ensureParentNode(path);\n        parentNode.child.push(node);\n        return node;\n    }\n    ensureParentNode(path) {\n        const parentPath = responsePathAsString(path.prev);\n        const parentNode = this.nodes.get(parentPath);\n        if (parentNode) {\n            return parentNode;\n        }\n        return this.newNode(path.prev);\n    }\n    rewriteAndNormalizeError(err) {\n        if (this.rewriteError) {\n            const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);\n            const rewrittenError = this.rewriteError(clonedError);\n            if (rewrittenError === null) {\n                return null;\n            }\n            if (!(rewrittenError instanceof graphql_1.GraphQLError)) {\n                return err;\n            }\n            return new graphql_1.GraphQLError(rewrittenError.message, err.nodes, err.source, err.positions, err.path, err.originalError, rewrittenError.extensions || err.extensions);\n        }\n        return err;\n    }\n}\nexports.TraceTreeBuilder = TraceTreeBuilder;\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\nfunction responsePathAsString(p) {\n    if (p === undefined) {\n        return '';\n    }\n    let res = String(p.key);\n    while ((p = p.prev) !== undefined) {\n        res = `${p.key}.${res}`;\n    }\n    return res;\n}\nfunction errorToProtobufError(error) {\n    return new apollo_reporting_protobuf_1.Trace.Error({\n        message: error.message,\n        location: (error.locations || []).map(({ line, column }) => new apollo_reporting_protobuf_1.Trace.Location({ line, column })),\n        json: JSON.stringify(error),\n    });\n}\nfunction dateToProtoTimestamp(date) {\n    const totalMillis = +date;\n    const millis = totalMillis % 1000;\n    return new apollo_reporting_protobuf_1.google.protobuf.Timestamp({\n        seconds: (totalMillis - millis) / 1000,\n        nanos: millis * 1e6,\n    });\n}\nexports.dateToProtoTimestamp = dateToProtoTimestamp;\n//# sourceMappingURL=traceTreeBuilder.js.map"]},"metadata":{},"sourceType":"script"}