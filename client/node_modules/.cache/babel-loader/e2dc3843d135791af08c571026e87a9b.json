{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar visitSchema_1 = require(\"../transforms/visitSchema\"); // Transformation used to modifiy `GraphQLEnumType` values in a schema.\n\n\nvar ConvertEnumValues =\n/** @class */\nfunction () {\n  function ConvertEnumValues(enumValueMap) {\n    this.enumValueMap = enumValueMap;\n  } // Walk a schema looking for `GraphQLEnumType` types. If found, and\n  // matching types have been identified in `this.enumValueMap`, create new\n  // `GraphQLEnumType` types using the `this.enumValueMap` specified new\n  // values, and return them in the new schema.\n\n\n  ConvertEnumValues.prototype.transformSchema = function (schema) {\n    var _a;\n\n    var enumValueMap = this.enumValueMap;\n\n    if (!enumValueMap || Object.keys(enumValueMap).length === 0) {\n      return schema;\n    }\n\n    var transformedSchema = visitSchema_1.visitSchema(schema, (_a = {}, _a[visitSchema_1.VisitSchemaKind.ENUM_TYPE] = function (enumType) {\n      var externalToInternalValueMap = enumValueMap[enumType.name];\n\n      if (externalToInternalValueMap) {\n        var values = enumType.getValues();\n        var newValues_1 = {};\n        values.forEach(function (value) {\n          var newValue = Object.keys(externalToInternalValueMap).includes(value.name) ? externalToInternalValueMap[value.name] : value.name;\n          newValues_1[value.name] = {\n            value: newValue,\n            deprecationReason: value.deprecationReason,\n            description: value.description,\n            astNode: value.astNode\n          };\n        });\n        return new graphql_1.GraphQLEnumType({\n          name: enumType.name,\n          description: enumType.description,\n          astNode: enumType.astNode,\n          values: newValues_1\n        });\n      }\n\n      return enumType;\n    }, _a));\n    return transformedSchema;\n  };\n\n  return ConvertEnumValues;\n}();\n\nexports.default = ConvertEnumValues;","map":{"version":3,"sources":["../../src/transforms/ConvertEnumValues.ts"],"names":[],"mappings":";;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,2BAAA,CAAA,C,CAEA;;;AACA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAKE,WAAA,iBAAA,CAAY,YAAZ,EAAgC;AAC9B,SAAK,YAAL,GAAoB,YAApB;AACD,GAPH,CASE;AACA;AACA;AACA;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,MAAvB,EAA4C;;;AAClC,QAAA,YAAA,GAAA,KAAA,YAAA;;AACR,QAAI,CAAC,YAAD,IAAiB,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,MAA1B,KAAqC,CAA1D,EAA6D;AAC3D,aAAO,MAAP;AACD;;AAED,QAAM,iBAAiB,GAAG,aAAA,CAAA,WAAA,CAAY,MAAZ,GAAkB,EAAA,GAAA,EAAA,EAC1C,EAAA,CAAC,aAAA,CAAA,eAAA,CAAgB,SAAjB,CAAA,GAAA,UAA4B,QAA5B,EAAqD;AACnD,UAAM,0BAA0B,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAV,CAA/C;;AAEA,UAAI,0BAAJ,EAAgC;AAC9B,YAAM,MAAM,GAAG,QAAQ,CAAC,SAAT,EAAf;AACA,YAAM,WAAS,GAAG,EAAlB;AACA,QAAA,MAAM,CAAC,OAAP,CAAe,UAAA,KAAA,EAAK;AAClB,cAAM,QAAQ,GAAG,MAAM,CAAC,IAAP,CAAY,0BAAZ,EAAwC,QAAxC,CACf,KAAK,CAAC,IADS,IAGb,0BAA0B,CAAC,KAAK,CAAC,IAAP,CAHb,GAIb,KAAK,CAAC,IAJV;AAKA,UAAA,WAAS,CAAC,KAAK,CAAC,IAAP,CAAT,GAAwB;AACtB,YAAA,KAAK,EAAE,QADe;AAEtB,YAAA,iBAAiB,EAAE,KAAK,CAAC,iBAFH;AAGtB,YAAA,WAAW,EAAE,KAAK,CAAC,WAHG;AAItB,YAAA,OAAO,EAAE,KAAK,CAAC;AAJO,WAAxB;AAMD,SAZD;AAcA,eAAO,IAAI,SAAA,CAAA,eAAJ,CAAoB;AACzB,UAAA,IAAI,EAAE,QAAQ,CAAC,IADU;AAEzB,UAAA,WAAW,EAAE,QAAQ,CAAC,WAFG;AAGzB,UAAA,OAAO,EAAE,QAAQ,CAAC,OAHO;AAIzB,UAAA,MAAM,EAAE;AAJiB,SAApB,CAAP;AAMD;;AAED,aAAO,QAAP;AACD,KA9ByC,EA+B1C,EA/BwB,EAA1B;AAiCA,WAAO,iBAAP;AACD,GAxCM;;AAyCT,SAAA,iBAAA;AAAC,CAtDD,EAAA","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar visitSchema_1 = require(\"../transforms/visitSchema\");\n// Transformation used to modifiy `GraphQLEnumType` values in a schema.\nvar ConvertEnumValues = /** @class */ (function () {\n    function ConvertEnumValues(enumValueMap) {\n        this.enumValueMap = enumValueMap;\n    }\n    // Walk a schema looking for `GraphQLEnumType` types. If found, and\n    // matching types have been identified in `this.enumValueMap`, create new\n    // `GraphQLEnumType` types using the `this.enumValueMap` specified new\n    // values, and return them in the new schema.\n    ConvertEnumValues.prototype.transformSchema = function (schema) {\n        var _a;\n        var enumValueMap = this.enumValueMap;\n        if (!enumValueMap || Object.keys(enumValueMap).length === 0) {\n            return schema;\n        }\n        var transformedSchema = visitSchema_1.visitSchema(schema, (_a = {},\n            _a[visitSchema_1.VisitSchemaKind.ENUM_TYPE] = function (enumType) {\n                var externalToInternalValueMap = enumValueMap[enumType.name];\n                if (externalToInternalValueMap) {\n                    var values = enumType.getValues();\n                    var newValues_1 = {};\n                    values.forEach(function (value) {\n                        var newValue = Object.keys(externalToInternalValueMap).includes(value.name)\n                            ? externalToInternalValueMap[value.name]\n                            : value.name;\n                        newValues_1[value.name] = {\n                            value: newValue,\n                            deprecationReason: value.deprecationReason,\n                            description: value.description,\n                            astNode: value.astNode,\n                        };\n                    });\n                    return new graphql_1.GraphQLEnumType({\n                        name: enumType.name,\n                        description: enumType.description,\n                        astNode: enumType.astNode,\n                        values: newValues_1,\n                    });\n                }\n                return enumType;\n            },\n            _a));\n        return transformedSchema;\n    };\n    return ConvertEnumValues;\n}());\nexports.default = ConvertEnumValues;\n//# sourceMappingURL=ConvertEnumValues.js.map"]},"metadata":{},"sourceType":"script"}