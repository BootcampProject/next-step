{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar makeExecutableSchema_1 = require(\"../makeExecutableSchema\");\n\nvar schemaRecreation_1 = require(\"./schemaRecreation\");\n\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\n\nvar typeFromAST_1 = require(\"./typeFromAST\");\n\nvar transforms_1 = require(\"../transforms\");\n\nvar mergeDeep_1 = require(\"../mergeDeep\");\n\nvar schemaVisitor_1 = require(\"../schemaVisitor\");\n\nfunction mergeSchemas(_a) {\n  var schemas = _a.schemas,\n      onTypeConflict = _a.onTypeConflict,\n      resolvers = _a.resolvers,\n      schemaDirectives = _a.schemaDirectives,\n      inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces,\n      mergeDirectives = _a.mergeDirectives;\n  return mergeSchemasImplementation({\n    schemas: schemas,\n    resolvers: resolvers,\n    schemaDirectives: schemaDirectives,\n    inheritResolversFromInterfaces: inheritResolversFromInterfaces,\n    mergeDirectives: mergeDirectives\n  });\n}\n\nexports.default = mergeSchemas;\n\nfunction mergeSchemasImplementation(_a) {\n  var schemas = _a.schemas,\n      resolvers = _a.resolvers,\n      schemaDirectives = _a.schemaDirectives,\n      inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces,\n      mergeDirectives = _a.mergeDirectives;\n  var allSchemas = [];\n  var typeCandidates = {};\n  var types = {};\n  var extensions = [];\n  var directives = [];\n  var fragments = [];\n  var resolveType = schemaRecreation_1.createResolveType(function (name) {\n    if (types[name] === undefined) {\n      throw new Error(\"Can't find type \" + name + \".\");\n    }\n\n    return types[name];\n  });\n  schemas.forEach(function (schema) {\n    if (schema instanceof graphql_1.GraphQLSchema) {\n      allSchemas.push(schema);\n      var queryType_1 = schema.getQueryType();\n      var mutationType_1 = schema.getMutationType();\n      var subscriptionType_1 = schema.getSubscriptionType();\n\n      if (queryType_1) {\n        addTypeCandidate(typeCandidates, 'Query', {\n          schema: schema,\n          type: queryType_1\n        });\n      }\n\n      if (mutationType_1) {\n        addTypeCandidate(typeCandidates, 'Mutation', {\n          schema: schema,\n          type: mutationType_1\n        });\n      }\n\n      if (subscriptionType_1) {\n        addTypeCandidate(typeCandidates, 'Subscription', {\n          schema: schema,\n          type: subscriptionType_1\n        });\n      }\n\n      if (mergeDirectives) {\n        var directiveInstances = schema.getDirectives();\n        directiveInstances.forEach(function (directive) {\n          directives.push(directive);\n        });\n      }\n\n      var typeMap_1 = schema.getTypeMap();\n      Object.keys(typeMap_1).forEach(function (typeName) {\n        var type = typeMap_1[typeName];\n\n        if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__' && type !== queryType_1 && type !== mutationType_1 && type !== subscriptionType_1) {\n          addTypeCandidate(typeCandidates, type.name, {\n            schema: schema,\n            type: type\n          });\n        }\n      });\n    } else if (typeof schema === 'string' || schema && schema.kind === graphql_1.Kind.DOCUMENT) {\n      var parsedSchemaDocument = typeof schema === 'string' ? graphql_1.parse(schema) : schema;\n      parsedSchemaDocument.definitions.forEach(function (def) {\n        var type = typeFromAST_1.default(def);\n\n        if (type instanceof graphql_1.GraphQLDirective && mergeDirectives) {\n          directives.push(type);\n        } else if (type && !(type instanceof graphql_1.GraphQLDirective)) {\n          addTypeCandidate(typeCandidates, type.name, {\n            type: type\n          });\n        }\n      });\n      var extensionsDocument = makeExecutableSchema_1.extractExtensionDefinitions(parsedSchemaDocument);\n\n      if (extensionsDocument.definitions.length > 0) {\n        extensions.push(extensionsDocument);\n      }\n    } else if (Array.isArray(schema)) {\n      schema.forEach(function (type) {\n        addTypeCandidate(typeCandidates, type.name, {\n          type: type\n        });\n      });\n    } else {\n      throw new Error(\"Invalid schema passed\");\n    }\n  });\n  var mergeInfo = createMergeInfo(allSchemas, fragments);\n\n  if (!resolvers) {\n    resolvers = {};\n  } else if (typeof resolvers === 'function') {\n    console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n    resolvers = resolvers(mergeInfo);\n  } else if (Array.isArray(resolvers)) {\n    resolvers = resolvers.reduce(function (left, right) {\n      if (typeof right === 'function') {\n        console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n        right = right(mergeInfo);\n      }\n\n      return mergeDeep_1.default(left, right);\n    }, {});\n  }\n\n  var generatedResolvers = {};\n  Object.keys(typeCandidates).forEach(function (typeName) {\n    var resultType = defaultVisitType(typeName, typeCandidates[typeName]);\n\n    if (resultType === null) {\n      types[typeName] = null;\n    } else {\n      var type = void 0;\n      var typeResolvers = void 0;\n\n      if (graphql_1.isNamedType(resultType)) {\n        type = resultType;\n      } else if (resultType.type) {\n        type = resultType.type;\n        typeResolvers = resultType.resolvers;\n      } else {\n        throw new Error(\"Invalid visitType result for type \" + typeName);\n      }\n\n      types[typeName] = schemaRecreation_1.recreateType(type, resolveType, false);\n\n      if (typeResolvers) {\n        generatedResolvers[typeName] = typeResolvers;\n      }\n    }\n  });\n  var mergedSchema = new graphql_1.GraphQLSchema({\n    query: types.Query,\n    mutation: types.Mutation,\n    subscription: types.Subscription,\n    types: Object.keys(types).map(function (key) {\n      return types[key];\n    }),\n    directives: directives.map(function (directive) {\n      return schemaRecreation_1.recreateDirective(directive, resolveType);\n    })\n  });\n  extensions.forEach(function (extension) {\n    mergedSchema = graphql_1.extendSchema(mergedSchema, extension, {\n      commentDescriptions: true\n    });\n  });\n\n  if (!resolvers) {\n    resolvers = {};\n  } else if (Array.isArray(resolvers)) {\n    resolvers = resolvers.reduce(mergeDeep_1.default, {});\n  }\n\n  Object.keys(resolvers).forEach(function (typeName) {\n    var type = resolvers[typeName];\n\n    if (type instanceof graphql_1.GraphQLScalarType) {\n      return;\n    }\n\n    Object.keys(type).forEach(function (fieldName) {\n      var field = type[fieldName];\n\n      if (field.fragment) {\n        fragments.push({\n          field: fieldName,\n          fragment: field.fragment\n        });\n      }\n    });\n  });\n  mergedSchema = makeExecutableSchema_1.addResolveFunctionsToSchema({\n    schema: mergedSchema,\n    resolvers: mergeDeep_1.default(generatedResolvers, resolvers),\n    inheritResolversFromInterfaces: inheritResolversFromInterfaces\n  });\n  forEachField(mergedSchema, function (field) {\n    if (field.resolve) {\n      var fieldResolver_1 = field.resolve;\n\n      field.resolve = function (parent, args, context, info) {\n        var newInfo = __assign(__assign({}, info), {\n          mergeInfo: mergeInfo\n        });\n\n        return fieldResolver_1(parent, args, context, newInfo);\n      };\n    }\n\n    if (field.subscribe) {\n      var fieldResolver_2 = field.subscribe;\n\n      field.subscribe = function (parent, args, context, info) {\n        var newInfo = __assign(__assign({}, info), {\n          mergeInfo: mergeInfo\n        });\n\n        return fieldResolver_2(parent, args, context, newInfo);\n      };\n    }\n  });\n\n  if (schemaDirectives) {\n    schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(mergedSchema, schemaDirectives);\n  }\n\n  return mergedSchema;\n}\n\nfunction createMergeInfo(allSchemas, fragments) {\n  return {\n    delegate: function (operation, fieldName, args, context, info, transforms) {\n      console.warn('`mergeInfo.delegate` is deprecated. ' + 'Use `mergeInfo.delegateToSchema and pass explicit schema instances.');\n      var schema = guessSchemaByRootField(allSchemas, operation, fieldName);\n      var expandTransforms = new transforms_1.ExpandAbstractTypes(info.schema, schema);\n      var fragmentTransform = new transforms_1.ReplaceFieldWithFragment(schema, fragments);\n      return delegateToSchema_1.default({\n        schema: schema,\n        operation: operation,\n        fieldName: fieldName,\n        args: args,\n        context: context,\n        info: info,\n        transforms: __spreadArrays(transforms || [], [expandTransforms, fragmentTransform])\n      });\n    },\n    delegateToSchema: function (options) {\n      return delegateToSchema_1.default(__assign(__assign({}, options), {\n        transforms: options.transforms\n      }));\n    },\n    fragments: fragments\n  };\n}\n\nfunction guessSchemaByRootField(schemas, operation, fieldName) {\n  for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {\n    var schema = schemas_1[_i];\n    var rootObject = void 0;\n\n    if (operation === 'subscription') {\n      rootObject = schema.getSubscriptionType();\n    } else if (operation === 'mutation') {\n      rootObject = schema.getMutationType();\n    } else {\n      rootObject = schema.getQueryType();\n    }\n\n    if (rootObject) {\n      var fields = rootObject.getFields();\n\n      if (fields[fieldName]) {\n        return schema;\n      }\n    }\n  }\n\n  throw new Error(\"Could not find subschema with field `\" + operation + \".\" + fieldName + \"`\");\n}\n\nfunction createDelegatingResolver(schema, operation, fieldName) {\n  return function (root, args, context, info) {\n    return info.mergeInfo.delegateToSchema({\n      schema: schema,\n      operation: operation,\n      fieldName: fieldName,\n      args: args,\n      context: context,\n      info: info\n    });\n  };\n}\n\nfunction forEachField(schema, fn) {\n  var typeMap = schema.getTypeMap();\n  Object.keys(typeMap).forEach(function (typeName) {\n    var type = typeMap[typeName];\n\n    if (!graphql_1.getNamedType(type).name.startsWith('__') && type instanceof graphql_1.GraphQLObjectType) {\n      var fields_1 = type.getFields();\n      Object.keys(fields_1).forEach(function (fieldName) {\n        var field = fields_1[fieldName];\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}\n\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n  if (!typeCandidates[name]) {\n    typeCandidates[name] = [];\n  }\n\n  typeCandidates[name].push(typeCandidate);\n}\n\nfunction defaultVisitType(name, candidates, candidateSelector) {\n  if (!candidateSelector) {\n    candidateSelector = function (cands) {\n      return cands[cands.length - 1];\n    };\n  }\n\n  var resolveType = schemaRecreation_1.createResolveType(function (_, type) {\n    return type;\n  });\n\n  if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {\n    var fields_2 = {};\n    var operationName_1;\n\n    switch (name) {\n      case 'Query':\n        operationName_1 = 'query';\n        break;\n\n      case 'Mutation':\n        operationName_1 = 'mutation';\n        break;\n\n      case 'Subscription':\n        operationName_1 = 'subscription';\n        break;\n\n      default:\n        break;\n    }\n\n    var resolvers_1 = {};\n    var resolverKey_1 = operationName_1 === 'subscription' ? 'subscribe' : 'resolve';\n    candidates.forEach(function (_a) {\n      var candidateType = _a.type,\n          schema = _a.schema;\n      var candidateFields = candidateType.getFields();\n      fields_2 = __assign(__assign({}, fields_2), candidateFields);\n      Object.keys(candidateFields).forEach(function (fieldName) {\n        var _a;\n\n        resolvers_1[fieldName] = (_a = {}, _a[resolverKey_1] = createDelegatingResolver(schema, operationName_1, fieldName), _a);\n      });\n    });\n    var type = new graphql_1.GraphQLObjectType({\n      name: name,\n      fields: schemaRecreation_1.fieldMapToFieldConfigMap(fields_2, resolveType, false)\n    });\n    return {\n      type: type,\n      resolvers: resolvers_1\n    };\n  } else {\n    var candidate = candidateSelector(candidates);\n    return candidate.type;\n  }\n}","map":{"version":3,"sources":["../../src/stitching/mergeSchemas.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAyBA,IAAA,sBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAIA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAMA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAKA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAeA,SAAwB,YAAxB,CAAqC,EAArC,EAiBC;MAhBC,OAAA,GAAA,EAAA,CAAA,O;MACA,cAAA,GAAA,EAAA,CAAA,c;MACA,SAAA,GAAA,EAAA,CAAA,S;MACA,gBAAA,GAAA,EAAA,CAAA,gB;MACA,8BAAA,GAAA,EAAA,CAAA,8B;MACA,eAAA,GAAA,EAAA,CAAA,e;AAYA,SAAO,0BAA0B,CAAC;AAChC,IAAA,OAAO,EAAA,OADyB;AAEhC,IAAA,SAAS,EAAA,SAFuB;AAGhC,IAAA,gBAAgB,EAAA,gBAHgB;AAIhC,IAAA,8BAA8B,EAAA,8BAJE;AAKhC,IAAA,eAAe,EAAA;AALiB,GAAD,CAAjC;AAOD;;AAzBD,OAAA,CAAA,OAAA,GAAA,YAAA;;AA2BA,SAAS,0BAAT,CAAoC,EAApC,EAeC;MAdC,OAAA,GAAA,EAAA,CAAA,O;MACA,SAAA,GAAA,EAAA,CAAA,S;MACA,gBAAA,GAAA,EAAA,CAAA,gB;MACA,8BAAA,GAAA,EAAA,CAAA,8B;MACA,eAAA,GAAA,EAAA,CAAA,e;AAWA,MAAM,UAAU,GAAyB,EAAzC;AACA,MAAM,cAAc,GAAkD,EAAtE;AACA,MAAM,KAAK,GAAyC,EAApD;AACA,MAAM,UAAU,GAAwB,EAAxC;AACA,MAAM,UAAU,GAA4B,EAA5C;AACA,MAAM,SAAS,GAGV,EAHL;AAKA,MAAM,WAAW,GAAG,kBAAA,CAAA,iBAAA,CAAkB,UAAA,IAAA,EAAI;AACxC,QAAI,KAAK,CAAC,IAAD,CAAL,KAAgB,SAApB,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,qBAAmB,IAAnB,GAAuB,GAAjC,CAAN;AACD;;AACD,WAAO,KAAK,CAAC,IAAD,CAAZ;AACD,GALmB,CAApB;AAOA,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAA,EAAM;AACpB,QAAI,MAAM,YAAY,SAAA,CAAA,aAAtB,EAAqC;AACnC,MAAA,UAAU,CAAC,IAAX,CAAgB,MAAhB;AACA,UAAM,WAAS,GAAG,MAAM,CAAC,YAAP,EAAlB;AACA,UAAM,cAAY,GAAG,MAAM,CAAC,eAAP,EAArB;AACA,UAAM,kBAAgB,GAAG,MAAM,CAAC,mBAAP,EAAzB;;AACA,UAAI,WAAJ,EAAe;AACb,QAAA,gBAAgB,CAAC,cAAD,EAAiB,OAAjB,EAA0B;AACxC,UAAA,MAAM,EAAA,MADkC;AAExC,UAAA,IAAI,EAAE;AAFkC,SAA1B,CAAhB;AAID;;AACD,UAAI,cAAJ,EAAkB;AAChB,QAAA,gBAAgB,CAAC,cAAD,EAAiB,UAAjB,EAA6B;AAC3C,UAAA,MAAM,EAAA,MADqC;AAE3C,UAAA,IAAI,EAAE;AAFqC,SAA7B,CAAhB;AAID;;AACD,UAAI,kBAAJ,EAAsB;AACpB,QAAA,gBAAgB,CAAC,cAAD,EAAiB,cAAjB,EAAiC;AAC/C,UAAA,MAAM,EAAA,MADyC;AAE/C,UAAA,IAAI,EAAE;AAFyC,SAAjC,CAAhB;AAID;;AAED,UAAI,eAAJ,EAAqB;AACnB,YAAM,kBAAkB,GAAG,MAAM,CAAC,aAAP,EAA3B;AACA,QAAA,kBAAkB,CAAC,OAAnB,CAA2B,UAAA,SAAA,EAAS;AAClC,UAAA,UAAU,CAAC,IAAX,CAAgB,SAAhB;AACD,SAFD;AAGD;;AAED,UAAM,SAAO,GAAG,MAAM,CAAC,UAAP,EAAhB;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAqB,OAArB,CAA6B,UAAA,QAAA,EAAQ;AACnC,YAAM,IAAI,GAAqB,SAAO,CAAC,QAAD,CAAtC;;AACA,YACE,SAAA,CAAA,WAAA,CAAY,IAAZ,KACA,SAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,MAAwC,IADxC,IAEA,IAAI,KAAK,WAFT,IAGA,IAAI,KAAK,cAHT,IAIA,IAAI,KAAK,kBALX,EAME;AACA,UAAA,gBAAgB,CAAC,cAAD,EAAiB,IAAI,CAAC,IAAtB,EAA4B;AAC1C,YAAA,MAAM,EAAA,MADoC;AAE1C,YAAA,IAAI,EAAE;AAFoC,WAA5B,CAAhB;AAID;AACF,OAdD;AAeD,KA/CD,MA+CO,IACL,OAAO,MAAP,KAAkB,QAAlB,IACC,MAAM,IAAK,MAAuB,CAAC,IAAxB,KAAiC,SAAA,CAAA,IAAA,CAAK,QAF7C,EAGL;AACA,UAAI,oBAAoB,GACxB,OAAO,MAAP,KAAkB,QAAlB,GAA6B,SAAA,CAAA,KAAA,CAAM,MAAN,CAA7B,GAA8C,MAD9C;AAEA,MAAA,oBAAoB,CAAC,WAArB,CAAiC,OAAjC,CAAyC,UAAA,GAAA,EAAG;AAC1C,YAAM,IAAI,GAAG,aAAA,CAAA,OAAA,CAAY,GAAZ,CAAb;;AACA,YAAI,IAAI,YAAY,SAAA,CAAA,gBAAhB,IAAoC,eAAxC,EAAyD;AACvD,UAAA,UAAU,CAAC,IAAX,CAAgB,IAAhB;AACD,SAFD,MAEO,IAAI,IAAI,IAAI,EAAE,IAAI,YAAY,SAAA,CAAA,gBAAlB,CAAZ,EAAiD;AACtD,UAAA,gBAAgB,CAAC,cAAD,EAAiB,IAAI,CAAC,IAAtB,EAA4B;AAC1C,YAAA,IAAI,EAAE;AADoC,WAA5B,CAAhB;AAGD;AACF,OATD;AAWA,UAAM,kBAAkB,GAAG,sBAAA,CAAA,2BAAA,CACzB,oBADyB,CAA3B;;AAGA,UAAI,kBAAkB,CAAC,WAAnB,CAA+B,MAA/B,GAAwC,CAA5C,EAA+C;AAC7C,QAAA,UAAU,CAAC,IAAX,CAAgB,kBAAhB;AACD;AACF,KAvBM,MAuBA,IAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AAChC,MAAA,MAAM,CAAC,OAAP,CAAe,UAAA,IAAA,EAAI;AACjB,QAAA,gBAAgB,CAAC,cAAD,EAAiB,IAAI,CAAC,IAAtB,EAA4B;AAC1C,UAAA,IAAI,EAAE;AADoC,SAA5B,CAAhB;AAGD,OAJD;AAKD,KANM,MAMA;AACL,YAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF,GAhFD;AAkFA,MAAM,SAAS,GAAG,eAAe,CAAC,UAAD,EAAa,SAAb,CAAjC;;AAEA,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,SAAS,GAAG,EAAZ;AACD,GAFD,MAEO,IAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AAC1C,IAAA,OAAO,CAAC,IAAR,CACE,sFADF;AAGA,IAAA,SAAS,GAAG,SAAS,CAAC,SAAD,CAArB;AACD,GALM,MAKA,IAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;AACnC,IAAA,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,UAAC,IAAD,EAAO,KAAP,EAAY;AACvC,UAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,QAAA,OAAO,CAAC,IAAR,CACE,sFADF;AAGA,QAAA,KAAK,GAAG,KAAK,CAAC,SAAD,CAAb;AACD;;AACD,aAAO,WAAA,CAAA,OAAA,CAAU,IAAV,EAAgB,KAAhB,CAAP;AACD,KARW,EAQT,EARS,CAAZ;AASD;;AAED,MAAI,kBAAkB,GAAG,EAAzB;AAEA,EAAA,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,OAA5B,CAAoC,UAAA,QAAA,EAAQ;AAC1C,QAAM,UAAU,GAAoB,gBAAgB,CAClD,QADkD,EAElD,cAAc,CAAC,QAAD,CAFoC,CAApD;;AAIA,QAAI,UAAU,KAAK,IAAnB,EAAyB;AACvB,MAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,IAAlB;AACD,KAFD,MAEO;AACL,UAAI,IAAI,GAAA,KAAA,CAAR;AACA,UAAI,aAAa,GAAA,KAAA,CAAjB;;AACA,UAAI,SAAA,CAAA,WAAA,CAA8B,UAA9B,CAAJ,EAA+C;AAC7C,QAAA,IAAI,GAAqB,UAAzB;AACD,OAFD,MAEO,IAAwB,UAAW,CAAC,IAApC,EAA0C;AAC/C,QAAA,IAAI,GAAuB,UAAW,CAAC,IAAvC;AACA,QAAA,aAAa,GAAuB,UAAW,CAAC,SAAhD;AACD,OAHM,MAGA;AACL,cAAM,IAAI,KAAJ,CAAU,uCAAqC,QAA/C,CAAN;AACD;;AACD,MAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,kBAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,WAAnB,EAAgC,KAAhC,CAAlB;;AACA,UAAI,aAAJ,EAAmB;AACjB,QAAA,kBAAkB,CAAC,QAAD,CAAlB,GAA+B,aAA/B;AACD;AACF;AACF,GAvBD;AAyBA,MAAI,YAAY,GAAG,IAAI,SAAA,CAAA,aAAJ,CAAkB;AACnC,IAAA,KAAK,EAAE,KAAK,CAAC,KADsB;AAEnC,IAAA,QAAQ,EAAE,KAAK,CAAC,QAFmB;AAGnC,IAAA,YAAY,EAAE,KAAK,CAAC,YAHe;AAInC,IAAA,KAAK,EAAE,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,GAAnB,CAAuB,UAAA,GAAA,EAAG;AAAI,aAAA,KAAK,CAAL,GAAK,CAAL;AAAU,KAAxC,CAJ4B;AAKnC,IAAA,UAAU,EAAE,UAAU,CAAC,GAAX,CAAe,UAAC,SAAD,EAAU;AAAK,aAAA,kBAAA,CAAA,iBAAA,CAAkB,SAAlB,EAAA,WAAA,CAAA;AAAyC,KAAvE;AALuB,GAAlB,CAAnB;AAQA,EAAA,UAAU,CAAC,OAAX,CAAmB,UAAA,SAAA,EAAS;AAC1B,IAAA,YAAY,GAAI,SAAA,CAAA,YAAA,CAAqB,YAArB,EAAmC,SAAnC,EAA8C;AAC5D,MAAA,mBAAmB,EAAE;AADuC,KAA9C,CAAhB;AAGD,GAJD;;AAMA,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,SAAS,GAAG,EAAZ;AACD,GAFD,MAEO,IAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;AACnC,IAAA,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,WAAA,CAAA,OAAjB,EAA4B,EAA5B,CAAZ;AACD;;AAED,EAAA,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,OAAvB,CAA+B,UAAA,QAAA,EAAQ;AACrC,QAAM,IAAI,GAAG,SAAS,CAAC,QAAD,CAAtB;;AACA,QAAI,IAAI,YAAY,SAAA,CAAA,iBAApB,EAAuC;AACrC;AACD;;AACD,IAAA,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAA,SAAA,EAAS;AACjC,UAAM,KAAK,GAAG,IAAI,CAAC,SAAD,CAAlB;;AACA,UAAI,KAAK,CAAC,QAAV,EAAoB;AAClB,QAAA,SAAS,CAAC,IAAV,CAAe;AACb,UAAA,KAAK,EAAE,SADM;AAEb,UAAA,QAAQ,EAAE,KAAK,CAAC;AAFH,SAAf;AAID;AACF,KARD;AASD,GAdD;AAgBA,EAAA,YAAY,GAAG,sBAAA,CAAA,2BAAA,CAA4B;AACzC,IAAA,MAAM,EAAE,YADiC;AAEzC,IAAA,SAAS,EAAE,WAAA,CAAA,OAAA,CAAU,kBAAV,EAA8B,SAA9B,CAF8B;AAGzC,IAAA,8BAA8B,EAAA;AAHW,GAA5B,CAAf;AAMA,EAAA,YAAY,CAAC,YAAD,EAAe,UAAA,KAAA,EAAK;AAC9B,QAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,UAAM,eAAa,GAAG,KAAK,CAAC,OAA5B;;AACA,MAAA,KAAK,CAAC,OAAN,GAAgB,UAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB,EAA4B;AAC1C,YAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,IAAR,CAAA,EAAY;AAAE,UAAA,SAAS,EAAA;AAAX,SAAZ,CAAb;;AACA,eAAO,eAAa,CAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,OAAxB,CAApB;AACD,OAHD;AAID;;AACD,QAAI,KAAK,CAAC,SAAV,EAAqB;AACnB,UAAM,eAAa,GAAG,KAAK,CAAC,SAA5B;;AACA,MAAA,KAAK,CAAC,SAAN,GAAkB,UAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,IAAxB,EAA4B;AAC5C,YAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,IAAR,CAAA,EAAY;AAAE,UAAA,SAAS,EAAA;AAAX,SAAZ,CAAb;;AACA,eAAO,eAAa,CAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,OAAxB,CAApB;AACD,OAHD;AAID;AACF,GAfW,CAAZ;;AAiBA,MAAI,gBAAJ,EAAsB;AACpB,IAAA,eAAA,CAAA,sBAAA,CAAuB,qBAAvB,CACE,YADF,EAEE,gBAFF;AAID;;AAED,SAAO,YAAP;AACD;;AAED,SAAS,eAAT,CACE,UADF,EAEE,SAFF,EAKI;AAEF,SAAO;AACL,IAAA,QAAQ,EAAR,UACE,SADF,EAEE,SAFF,EAGE,IAHF,EAIE,OAJF,EAKE,IALF,EAME,UANF,EAM+B;AAE7B,MAAA,OAAO,CAAC,IAAR,CACE,yCACE,qEAFJ;AAIA,UAAM,MAAM,GAAG,sBAAsB,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,CAArC;AACA,UAAM,gBAAgB,GAAG,IAAI,YAAA,CAAA,mBAAJ,CAAwB,IAAI,CAAC,MAA7B,EAAqC,MAArC,CAAzB;AACA,UAAM,iBAAiB,GAAG,IAAI,YAAA,CAAA,wBAAJ,CAA6B,MAA7B,EAAqC,SAArC,CAA1B;AACA,aAAO,kBAAA,CAAA,OAAA,CAAiB;AACtB,QAAA,MAAM,EAAA,MADgB;AAEtB,QAAA,SAAS,EAAA,SAFa;AAGtB,QAAA,SAAS,EAAA,SAHa;AAItB,QAAA,IAAI,EAAA,IAJkB;AAKtB,QAAA,OAAO,EAAA,OALe;AAMtB,QAAA,IAAI,EAAA,IANkB;AAOtB,QAAA,UAAU,EAAA,cAAA,CACJ,UAAU,IAAI,EADV,EACa,CACrB,gBADqB,EAErB,iBAFqB,CADb;AAPY,OAAjB,CAAP;AAaD,KA7BI;AA+BL,IAAA,gBAAgB,EAAhB,UAAiB,OAAjB,EAAkD;AAChD,aAAO,kBAAA,CAAA,OAAA,CAAgB,QAAA,CAAA,QAAA,CAAA,EAAA,EAClB,OADkB,CAAA,EACX;AACV,QAAA,UAAU,EAAE,OAAO,CAAC;AADV,OADW,CAAhB,CAAP;AAID,KApCI;AAqCL,IAAA,SAAS,EAAA;AArCJ,GAAP;AAuCD;;AAED,SAAS,sBAAT,CACE,OADF,EAEE,SAFF,EAGE,SAHF,EAGmB;AAEjB,OAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,OAArB,EAAqB,EAAA,GAAA,SAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAA8B;AAAzB,QAAM,MAAM,GAAA,SAAA,CAAA,EAAA,CAAZ;AACH,QAAI,UAAU,GAAA,KAAA,CAAd;;AACA,QAAI,SAAS,KAAK,cAAlB,EAAkC;AAChC,MAAA,UAAU,GAAG,MAAM,CAAC,mBAAP,EAAb;AACD,KAFD,MAEO,IAAI,SAAS,KAAK,UAAlB,EAA8B;AACnC,MAAA,UAAU,GAAG,MAAM,CAAC,eAAP,EAAb;AACD,KAFM,MAEA;AACL,MAAA,UAAU,GAAG,MAAM,CAAC,YAAP,EAAb;AACD;;AACD,QAAI,UAAJ,EAAgB;AACd,UAAM,MAAM,GAAG,UAAU,CAAC,SAAX,EAAf;;AACA,UAAI,MAAM,CAAC,SAAD,CAAV,EAAuB;AACrB,eAAO,MAAP;AACD;AACF;AACF;;AACD,QAAM,IAAI,KAAJ,CACJ,0CAAyC,SAAzC,GAAkD,GAAlD,GAAsD,SAAtD,GAA+D,GAD3D,CAAN;AAGD;;AAED,SAAS,wBAAT,CACE,MADF,EAEE,SAFF,EAGE,SAHF,EAGmB;AAEjB,SAAO,UAAC,IAAD,EAAO,IAAP,EAAa,OAAb,EAAsB,IAAtB,EAA0B;AAC/B,WAAO,IAAI,CAAC,SAAL,CAAe,gBAAf,CAAgC;AACrC,MAAA,MAAM,EAAA,MAD+B;AAErC,MAAA,SAAS,EAAA,SAF4B;AAGrC,MAAA,SAAS,EAAA,SAH4B;AAIrC,MAAA,IAAI,EAAA,IAJiC;AAKrC,MAAA,OAAO,EAAA,OAL8B;AAMrC,MAAA,IAAI,EAAA;AANiC,KAAhC,CAAP;AAQD,GATD;AAUD;;AAQD,SAAS,YAAT,CAAsB,MAAtB,EAA6C,EAA7C,EAAgE;AAC9D,MAAM,OAAO,GAAG,MAAM,CAAC,UAAP,EAAhB;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,OAArB,CAA6B,UAAA,QAAA,EAAQ;AACnC,QAAM,IAAI,GAAG,OAAO,CAAC,QAAD,CAApB;;AAEA,QACE,CAAC,SAAA,CAAA,YAAA,CAAa,IAAb,EAAmB,IAAnB,CAAwB,UAAxB,CAAmC,IAAnC,CAAD,IACA,IAAI,YAAY,SAAA,CAAA,iBAFlB,EAGE;AACA,UAAM,QAAM,GAAG,IAAI,CAAC,SAAL,EAAf;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAoB,OAApB,CAA4B,UAAA,SAAA,EAAS;AACnC,YAAM,KAAK,GAAG,QAAM,CAAC,SAAD,CAApB;AACA,QAAA,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAAF;AACD,OAHD;AAID;AACF,GAbD;AAcD;;AAED,SAAS,gBAAT,CACE,cADF,EAEE,IAFF,EAGE,aAHF,EAGmC;AAEjC,MAAI,CAAC,cAAc,CAAC,IAAD,CAAnB,EAA2B;AACzB,IAAA,cAAc,CAAC,IAAD,CAAd,GAAuB,EAAvB;AACD;;AACD,EAAA,cAAc,CAAC,IAAD,CAAd,CAAqB,IAArB,CAA0B,aAA1B;AACD;;AAED,SAAS,gBAAT,CACE,IADF,EAEE,UAFF,EAGE,iBAHF,EAKyB;AAEvB,MAAI,CAAC,iBAAL,EAAwB;AACtB,IAAA,iBAAiB,GAAG,UAAA,KAAA,EAAK;AAAI,aAAA,KAAK,CAAC,KAAK,CAAC,MAAN,GAAN,CAAK,CAAL;AAAuB,KAApD;AACD;;AACD,MAAM,WAAW,GAAG,kBAAA,CAAA,iBAAA,CAAkB,UAAC,CAAD,EAAI,IAAJ,EAAQ;AAAK,WAAA,IAAA;AAAI,GAAnC,CAApB;;AACA,MAAI,IAAI,KAAK,OAAT,IAAoB,IAAI,KAAK,UAA7B,IAA2C,IAAI,KAAK,cAAxD,EAAwE;AACtE,QAAI,QAAM,GAAG,EAAb;AACA,QAAI,eAAJ;;AACA,YAAQ,IAAR;AACE,WAAK,OAAL;AACE,QAAA,eAAa,GAAG,OAAhB;AACA;;AACF,WAAK,UAAL;AACE,QAAA,eAAa,GAAG,UAAhB;AACA;;AACF,WAAK,cAAL;AACE,QAAA,eAAa,GAAG,cAAhB;AACA;;AACF;AACE;AAXJ;;AAaA,QAAM,WAAS,GAAG,EAAlB;AACA,QAAM,aAAW,GACf,eAAa,KAAK,cAAlB,GAAmC,WAAnC,GAAiD,SADnD;AAEA,IAAA,UAAU,CAAC,OAAX,CAAmB,UAAC,EAAD,EAAgC;UAA7B,aAAA,GAAA,EAAA,CAAA,I;UAAqB,MAAA,GAAA,EAAA,CAAA,M;AACzC,UAAM,eAAe,GAAI,aAAmC,CAAC,SAApC,EAAzB;AACA,MAAA,QAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,QAAR,CAAA,EAAmB,eAAnB,CAAN;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,OAA7B,CAAqC,UAAA,SAAA,EAAS;;;AAC5C,QAAA,WAAS,CAAC,SAAD,CAAT,IAAoB,EAAA,GAAA,EAAA,EAClB,EAAA,CAAC,aAAD,CAAA,GAAe,wBAAwB,CACrC,MADqC,EAErC,eAFqC,EAGrC,SAHqC,CADrB,EAMnB,EAND;AAOD,OARD;AASD,KAZD;AAaA,QAAM,IAAI,GAAG,IAAI,SAAA,CAAA,iBAAJ,CAAsB;AACjC,MAAA,IAAI,EAAA,IAD6B;AAEjC,MAAA,MAAM,EAAE,kBAAA,CAAA,wBAAA,CAAyB,QAAzB,EAAiC,WAAjC,EAA8C,KAA9C;AAFyB,KAAtB,CAAb;AAIA,WAAO;AACL,MAAA,IAAI,EAAA,IADC;AAEL,MAAA,SAAS,EAAA;AAFJ,KAAP;AAID,GAxCD,MAwCO;AACL,QAAM,SAAS,GAAG,iBAAiB,CAAC,UAAD,CAAnC;AACA,WAAO,SAAS,CAAC,IAAjB;AACD;AACF","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar makeExecutableSchema_1 = require(\"../makeExecutableSchema\");\nvar schemaRecreation_1 = require(\"./schemaRecreation\");\nvar delegateToSchema_1 = require(\"./delegateToSchema\");\nvar typeFromAST_1 = require(\"./typeFromAST\");\nvar transforms_1 = require(\"../transforms\");\nvar mergeDeep_1 = require(\"../mergeDeep\");\nvar schemaVisitor_1 = require(\"../schemaVisitor\");\nfunction mergeSchemas(_a) {\n    var schemas = _a.schemas, onTypeConflict = _a.onTypeConflict, resolvers = _a.resolvers, schemaDirectives = _a.schemaDirectives, inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces, mergeDirectives = _a.mergeDirectives;\n    return mergeSchemasImplementation({\n        schemas: schemas,\n        resolvers: resolvers,\n        schemaDirectives: schemaDirectives,\n        inheritResolversFromInterfaces: inheritResolversFromInterfaces,\n        mergeDirectives: mergeDirectives,\n    });\n}\nexports.default = mergeSchemas;\nfunction mergeSchemasImplementation(_a) {\n    var schemas = _a.schemas, resolvers = _a.resolvers, schemaDirectives = _a.schemaDirectives, inheritResolversFromInterfaces = _a.inheritResolversFromInterfaces, mergeDirectives = _a.mergeDirectives;\n    var allSchemas = [];\n    var typeCandidates = {};\n    var types = {};\n    var extensions = [];\n    var directives = [];\n    var fragments = [];\n    var resolveType = schemaRecreation_1.createResolveType(function (name) {\n        if (types[name] === undefined) {\n            throw new Error(\"Can't find type \" + name + \".\");\n        }\n        return types[name];\n    });\n    schemas.forEach(function (schema) {\n        if (schema instanceof graphql_1.GraphQLSchema) {\n            allSchemas.push(schema);\n            var queryType_1 = schema.getQueryType();\n            var mutationType_1 = schema.getMutationType();\n            var subscriptionType_1 = schema.getSubscriptionType();\n            if (queryType_1) {\n                addTypeCandidate(typeCandidates, 'Query', {\n                    schema: schema,\n                    type: queryType_1,\n                });\n            }\n            if (mutationType_1) {\n                addTypeCandidate(typeCandidates, 'Mutation', {\n                    schema: schema,\n                    type: mutationType_1,\n                });\n            }\n            if (subscriptionType_1) {\n                addTypeCandidate(typeCandidates, 'Subscription', {\n                    schema: schema,\n                    type: subscriptionType_1,\n                });\n            }\n            if (mergeDirectives) {\n                var directiveInstances = schema.getDirectives();\n                directiveInstances.forEach(function (directive) {\n                    directives.push(directive);\n                });\n            }\n            var typeMap_1 = schema.getTypeMap();\n            Object.keys(typeMap_1).forEach(function (typeName) {\n                var type = typeMap_1[typeName];\n                if (graphql_1.isNamedType(type) &&\n                    graphql_1.getNamedType(type).name.slice(0, 2) !== '__' &&\n                    type !== queryType_1 &&\n                    type !== mutationType_1 &&\n                    type !== subscriptionType_1) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        schema: schema,\n                        type: type,\n                    });\n                }\n            });\n        }\n        else if (typeof schema === 'string' ||\n            (schema && schema.kind === graphql_1.Kind.DOCUMENT)) {\n            var parsedSchemaDocument = typeof schema === 'string' ? graphql_1.parse(schema) : schema;\n            parsedSchemaDocument.definitions.forEach(function (def) {\n                var type = typeFromAST_1.default(def);\n                if (type instanceof graphql_1.GraphQLDirective && mergeDirectives) {\n                    directives.push(type);\n                }\n                else if (type && !(type instanceof graphql_1.GraphQLDirective)) {\n                    addTypeCandidate(typeCandidates, type.name, {\n                        type: type,\n                    });\n                }\n            });\n            var extensionsDocument = makeExecutableSchema_1.extractExtensionDefinitions(parsedSchemaDocument);\n            if (extensionsDocument.definitions.length > 0) {\n                extensions.push(extensionsDocument);\n            }\n        }\n        else if (Array.isArray(schema)) {\n            schema.forEach(function (type) {\n                addTypeCandidate(typeCandidates, type.name, {\n                    type: type,\n                });\n            });\n        }\n        else {\n            throw new Error(\"Invalid schema passed\");\n        }\n    });\n    var mergeInfo = createMergeInfo(allSchemas, fragments);\n    if (!resolvers) {\n        resolvers = {};\n    }\n    else if (typeof resolvers === 'function') {\n        console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n        resolvers = resolvers(mergeInfo);\n    }\n    else if (Array.isArray(resolvers)) {\n        resolvers = resolvers.reduce(function (left, right) {\n            if (typeof right === 'function') {\n                console.warn('Passing functions as resolver parameter is deprecated. Use `info.mergeInfo` instead.');\n                right = right(mergeInfo);\n            }\n            return mergeDeep_1.default(left, right);\n        }, {});\n    }\n    var generatedResolvers = {};\n    Object.keys(typeCandidates).forEach(function (typeName) {\n        var resultType = defaultVisitType(typeName, typeCandidates[typeName]);\n        if (resultType === null) {\n            types[typeName] = null;\n        }\n        else {\n            var type = void 0;\n            var typeResolvers = void 0;\n            if (graphql_1.isNamedType(resultType)) {\n                type = resultType;\n            }\n            else if (resultType.type) {\n                type = resultType.type;\n                typeResolvers = resultType.resolvers;\n            }\n            else {\n                throw new Error(\"Invalid visitType result for type \" + typeName);\n            }\n            types[typeName] = schemaRecreation_1.recreateType(type, resolveType, false);\n            if (typeResolvers) {\n                generatedResolvers[typeName] = typeResolvers;\n            }\n        }\n    });\n    var mergedSchema = new graphql_1.GraphQLSchema({\n        query: types.Query,\n        mutation: types.Mutation,\n        subscription: types.Subscription,\n        types: Object.keys(types).map(function (key) { return types[key]; }),\n        directives: directives.map(function (directive) { return schemaRecreation_1.recreateDirective(directive, resolveType); })\n    });\n    extensions.forEach(function (extension) {\n        mergedSchema = graphql_1.extendSchema(mergedSchema, extension, {\n            commentDescriptions: true,\n        });\n    });\n    if (!resolvers) {\n        resolvers = {};\n    }\n    else if (Array.isArray(resolvers)) {\n        resolvers = resolvers.reduce(mergeDeep_1.default, {});\n    }\n    Object.keys(resolvers).forEach(function (typeName) {\n        var type = resolvers[typeName];\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            return;\n        }\n        Object.keys(type).forEach(function (fieldName) {\n            var field = type[fieldName];\n            if (field.fragment) {\n                fragments.push({\n                    field: fieldName,\n                    fragment: field.fragment,\n                });\n            }\n        });\n    });\n    mergedSchema = makeExecutableSchema_1.addResolveFunctionsToSchema({\n        schema: mergedSchema,\n        resolvers: mergeDeep_1.default(generatedResolvers, resolvers),\n        inheritResolversFromInterfaces: inheritResolversFromInterfaces\n    });\n    forEachField(mergedSchema, function (field) {\n        if (field.resolve) {\n            var fieldResolver_1 = field.resolve;\n            field.resolve = function (parent, args, context, info) {\n                var newInfo = __assign(__assign({}, info), { mergeInfo: mergeInfo });\n                return fieldResolver_1(parent, args, context, newInfo);\n            };\n        }\n        if (field.subscribe) {\n            var fieldResolver_2 = field.subscribe;\n            field.subscribe = function (parent, args, context, info) {\n                var newInfo = __assign(__assign({}, info), { mergeInfo: mergeInfo });\n                return fieldResolver_2(parent, args, context, newInfo);\n            };\n        }\n    });\n    if (schemaDirectives) {\n        schemaVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(mergedSchema, schemaDirectives);\n    }\n    return mergedSchema;\n}\nfunction createMergeInfo(allSchemas, fragments) {\n    return {\n        delegate: function (operation, fieldName, args, context, info, transforms) {\n            console.warn('`mergeInfo.delegate` is deprecated. ' +\n                'Use `mergeInfo.delegateToSchema and pass explicit schema instances.');\n            var schema = guessSchemaByRootField(allSchemas, operation, fieldName);\n            var expandTransforms = new transforms_1.ExpandAbstractTypes(info.schema, schema);\n            var fragmentTransform = new transforms_1.ReplaceFieldWithFragment(schema, fragments);\n            return delegateToSchema_1.default({\n                schema: schema,\n                operation: operation,\n                fieldName: fieldName,\n                args: args,\n                context: context,\n                info: info,\n                transforms: __spreadArrays((transforms || []), [\n                    expandTransforms,\n                    fragmentTransform,\n                ]),\n            });\n        },\n        delegateToSchema: function (options) {\n            return delegateToSchema_1.default(__assign(__assign({}, options), { transforms: options.transforms }));\n        },\n        fragments: fragments\n    };\n}\nfunction guessSchemaByRootField(schemas, operation, fieldName) {\n    for (var _i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {\n        var schema = schemas_1[_i];\n        var rootObject = void 0;\n        if (operation === 'subscription') {\n            rootObject = schema.getSubscriptionType();\n        }\n        else if (operation === 'mutation') {\n            rootObject = schema.getMutationType();\n        }\n        else {\n            rootObject = schema.getQueryType();\n        }\n        if (rootObject) {\n            var fields = rootObject.getFields();\n            if (fields[fieldName]) {\n                return schema;\n            }\n        }\n    }\n    throw new Error(\"Could not find subschema with field `\" + operation + \".\" + fieldName + \"`\");\n}\nfunction createDelegatingResolver(schema, operation, fieldName) {\n    return function (root, args, context, info) {\n        return info.mergeInfo.delegateToSchema({\n            schema: schema,\n            operation: operation,\n            fieldName: fieldName,\n            args: args,\n            context: context,\n            info: info,\n        });\n    };\n}\nfunction forEachField(schema, fn) {\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).forEach(function (typeName) {\n        var type = typeMap[typeName];\n        if (!graphql_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            var fields_1 = type.getFields();\n            Object.keys(fields_1).forEach(function (fieldName) {\n                var field = fields_1[fieldName];\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n    if (!typeCandidates[name]) {\n        typeCandidates[name] = [];\n    }\n    typeCandidates[name].push(typeCandidate);\n}\nfunction defaultVisitType(name, candidates, candidateSelector) {\n    if (!candidateSelector) {\n        candidateSelector = function (cands) { return cands[cands.length - 1]; };\n    }\n    var resolveType = schemaRecreation_1.createResolveType(function (_, type) { return type; });\n    if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {\n        var fields_2 = {};\n        var operationName_1;\n        switch (name) {\n            case 'Query':\n                operationName_1 = 'query';\n                break;\n            case 'Mutation':\n                operationName_1 = 'mutation';\n                break;\n            case 'Subscription':\n                operationName_1 = 'subscription';\n                break;\n            default:\n                break;\n        }\n        var resolvers_1 = {};\n        var resolverKey_1 = operationName_1 === 'subscription' ? 'subscribe' : 'resolve';\n        candidates.forEach(function (_a) {\n            var candidateType = _a.type, schema = _a.schema;\n            var candidateFields = candidateType.getFields();\n            fields_2 = __assign(__assign({}, fields_2), candidateFields);\n            Object.keys(candidateFields).forEach(function (fieldName) {\n                var _a;\n                resolvers_1[fieldName] = (_a = {},\n                    _a[resolverKey_1] = createDelegatingResolver(schema, operationName_1, fieldName),\n                    _a);\n            });\n        });\n        var type = new graphql_1.GraphQLObjectType({\n            name: name,\n            fields: schemaRecreation_1.fieldMapToFieldConfigMap(fields_2, resolveType, false),\n        });\n        return {\n            type: type,\n            resolvers: resolvers_1,\n        };\n    }\n    else {\n        var candidate = candidateSelector(candidates);\n        return candidate.type;\n    }\n}\n//# sourceMappingURL=mergeSchemas.js.map"]},"metadata":{},"sourceType":"script"}