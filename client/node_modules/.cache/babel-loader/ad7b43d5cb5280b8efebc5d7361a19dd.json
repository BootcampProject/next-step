{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\dejay\\\\Documents\\\\UofT\\\\Project 3\\\\next-step\\\\next-step\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Link}from\"react-router-dom\";import{useParams}from\"react-router\";import{useQuery}from'@apollo/react-hooks';import{useQuestionContext}from\"../utils/GlobalState\";import{UPDATE_QUESTIONS}from\"../utils/actions\";import{QUERY_QUESTIONS}from\"../utils/queries\";import{idbPromise}from\"../utils/helpers\";function Detail(){var _useQuestionContext=useQuestionContext(),_useQuestionContext2=_slicedToArray(_useQuestionContext,2),state=_useQuestionContext2[0],dispatch=_useQuestionContext2[1];var _useParams=useParams(),id=_useParams.id;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),currentQuestion=_useState2[0],setCurrentQuestion=_useState2[1];var _useQuery=useQuery(QUERY_QUESTIONS),loading=_useQuery.loading,data=_useQuery.data;var questions=state.questions;useEffect(function(){// already in global store\nif(questions.length){setCurrentQuestion(questions.find(function(question){return question._id===id;}));}// retrieved from server\nelse if(data){dispatch({type:UPDATE_QUESTIONS,questions:data.questions});data.questions.forEach(function(question){idbPromise('questions','put',question);});}// get cache from idb\nelse if(!loading){idbPromise('questions','get').then(function(indexedQuestions){dispatch({type:UPDATE_QUESTIONS,questions:indexedQuestions});});}},[questions,data,loading,dispatch,id]);return/*#__PURE__*/React.createElement(React.Fragment,null,currentQuestion?/*#__PURE__*/React.createElement(\"div\",{className:\"container my-1\"},/*#__PURE__*/React.createElement(Link,{to:\"/\"},\"\\u2190 Back to Home\"),/*#__PURE__*/React.createElement(\"h2\",null,currentQuestion.question),/*#__PURE__*/React.createElement(\"p\",null,currentQuestion.answer)):null);};export default Detail;","map":{"version":3,"sources":["C:/Users/dejay/Documents/UofT/Project 3/next-step/next-step/client/src/pages/Details.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","useQuestionContext","UPDATE_QUESTIONS","QUERY_QUESTIONS","idbPromise","Detail","state","dispatch","id","currentQuestion","setCurrentQuestion","loading","data","questions","length","find","question","_id","type","forEach","then","indexedQuestions","answer"],"mappings":"sMAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,KAAoB,kBAApB,CACA,OAASC,SAAT,KAA0B,cAA1B,CACA,OAASC,QAAT,KAAyB,qBAAzB,CAEA,OAASC,kBAAT,KAAmC,sBAAnC,CACA,OAAQC,gBAAR,KAA+B,kBAA/B,CACA,OAASC,eAAT,KAAgC,kBAAhC,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,QAASC,CAAAA,MAAT,EAAkB,CAChB,wBAA0BJ,kBAAkB,EAA5C,4DAAOK,KAAP,yBAAcC,QAAd,yBACA,eAAeR,SAAS,EAAxB,CAAQS,EAAR,YAAQA,EAAR,CAEA,cAA8CX,QAAQ,CAAC,EAAD,CAAtD,wCAAOY,eAAP,eAAwBC,kBAAxB,eAEA,cAA0BV,QAAQ,CAACG,eAAD,CAAlC,CAAQQ,OAAR,WAAQA,OAAR,CAAiBC,IAAjB,WAAiBA,IAAjB,CAEA,GAAQC,CAAAA,SAAR,CAAqBP,KAArB,CAAQO,SAAR,CAEAjB,SAAS,CAAC,UAAM,CACd;AACA,GAAIiB,SAAS,CAACC,MAAd,CAAsB,CACpBJ,kBAAkB,CAACG,SAAS,CAACE,IAAV,CAAe,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,GAAT,GAAiBT,EAArB,EAAvB,CAAD,CAAlB,CACD,CACD;AAHA,IAIK,IAAII,IAAJ,CAAU,CACbL,QAAQ,CAAC,CACPW,IAAI,CAAEhB,gBADC,CAEPW,SAAS,CAAED,IAAI,CAACC,SAFT,CAAD,CAAR,CAKAD,IAAI,CAACC,SAAL,CAAeM,OAAf,CAAuB,SAACH,QAAD,CAAc,CACnCZ,UAAU,CAAC,WAAD,CAAc,KAAd,CAAqBY,QAArB,CAAV,CACD,CAFD,EAGD,CACD;AAVK,IAWA,IAAI,CAACL,OAAL,CAAc,CACjBP,UAAU,CAAC,WAAD,CAAc,KAAd,CAAV,CAA+BgB,IAA/B,CAAoC,SAACC,gBAAD,CAAsB,CACxDd,QAAQ,CAAC,CACPW,IAAI,CAAEhB,gBADC,CAEPW,SAAS,CAAEQ,gBAFJ,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAzBQ,CAyBN,CAACR,SAAD,CAAYD,IAAZ,CAAkBD,OAAlB,CAA2BJ,QAA3B,CAAqCC,EAArC,CAzBM,CAAT,CA4BA,mBACE,wCACGC,eAAe,cACd,2BAAK,SAAS,CAAC,gBAAf,eACE,oBAAC,IAAD,EAAM,EAAE,CAAC,GAAT,wBADF,cAKE,8BAAKA,eAAe,CAACO,QAArB,CALF,cAOE,6BACGP,eAAe,CAACa,MADnB,CAPF,CADc,CAaZ,IAdN,CADF,CAkBD,EAED,cAAejB,CAAAA,MAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link} from \"react-router-dom\";\nimport { useParams } from \"react-router\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { useQuestionContext } from \"../utils/GlobalState\";\nimport {UPDATE_QUESTIONS} from \"../utils/actions\";\nimport { QUERY_QUESTIONS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n  const [state, dispatch] = useQuestionContext();\n  const { id } = useParams();\n\n  const [currentQuestion, setCurrentQuestion] = useState({});\n\n  const { loading, data } = useQuery(QUERY_QUESTIONS);\n\n  const { questions} = state;\n\n  useEffect(() => {\n    // already in global store\n    if (questions.length) {\n      setCurrentQuestion(questions.find(question => question._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_QUESTIONS,\n        questions: data.questions\n      });\n\n      data.questions.forEach((question) => {\n        idbPromise('questions', 'put', question);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('questions', 'get').then((indexedQuestions) => {\n        dispatch({\n          type: UPDATE_QUESTIONS,\n          questions: indexedQuestions\n        });\n      });\n    }\n  }, [questions, data, loading, dispatch, id]);\n\n\n  return (\n    <>\n      {currentQuestion ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ‚Üê Back to Home\n          </Link>\n\n          <h2>{currentQuestion.question}</h2>\n\n          <p>\n            {currentQuestion.answer}\n          </p>\n          \n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}