{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\"); // If we have any union or interface types throw if no there is no resolveType or isTypeOf resolvers\n\n\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n  Object.keys(schema.getTypeMap()).map(function (typeName) {\n    return schema.getType(typeName);\n  }).forEach(function (type) {\n    if (!(type instanceof graphql_1.GraphQLUnionType || type instanceof graphql_1.GraphQLInterfaceType)) {\n      return;\n    }\n\n    if (!type.resolveType) {\n      if (requireResolversForResolveType === false) {\n        return;\n      }\n\n      if (requireResolversForResolveType === true) {\n        throw new _1.SchemaError(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"resolveType\\\" resolver\");\n      } // tslint:disable-next-line:max-line-length\n\n\n      console.warn(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"__resolveType\\\" resolver. Pass false into \" + \"\\\"resolverValidationOptions.requireResolversForResolveType\\\" to disable this warning.\");\n    }\n  });\n}\n\nexports.default = checkForResolveTypeResolver;","map":{"version":3,"sources":["../../src/generate/checkForResolveTypeResolver.ts"],"names":[],"mappings":";;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA,C,CAEA;;;AACA,SAAS,2BAAT,CACE,MADF,EAEE,8BAFF,EAE0C;AAExC,EAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,UAAP,EAAZ,EACG,GADH,CACO,UAAA,QAAA,EAAQ;AAAI,WAAA,MAAM,CAAC,OAAP,CAAA,QAAA,CAAA;AAAwB,GAD3C,EAEG,OAFH,CAEW,UAAC,IAAD,EAA8C;AACrD,QACE,EACE,IAAI,YAAY,SAAA,CAAA,gBAAhB,IACA,IAAI,YAAY,SAAA,CAAA,oBAFlB,CADF,EAKE;AACA;AACD;;AACD,QAAI,CAAC,IAAI,CAAC,WAAV,EAAuB;AACrB,UAAI,8BAA8B,KAAK,KAAvC,EAA8C;AAC5C;AACD;;AACD,UAAI,8BAA8B,KAAK,IAAvC,EAA6C;AAC3C,cAAM,IAAI,EAAA,CAAA,WAAJ,CACJ,YAAS,IAAI,CAAC,IAAd,GAAkB,0CADd,CAAN;AAGD,OARoB,CASrB;;;AACA,MAAA,OAAO,CAAC,IAAR,CACE,YACE,IAAI,CAAC,IADP,GACW,8DADX,GAGA,uFAJF;AAMD;AACF,GA5BH;AA6BD;;AACD,OAAA,CAAA,OAAA,GAAe,2BAAf","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\n// If we have any union or interface types throw if no there is no resolveType or isTypeOf resolvers\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n    Object.keys(schema.getTypeMap())\n        .map(function (typeName) { return schema.getType(typeName); })\n        .forEach(function (type) {\n        if (!(type instanceof graphql_1.GraphQLUnionType ||\n            type instanceof graphql_1.GraphQLInterfaceType)) {\n            return;\n        }\n        if (!type.resolveType) {\n            if (requireResolversForResolveType === false) {\n                return;\n            }\n            if (requireResolversForResolveType === true) {\n                throw new _1.SchemaError(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"resolveType\\\" resolver\");\n            }\n            // tslint:disable-next-line:max-line-length\n            console.warn(\"Type \\\"\" + type.name + \"\\\" is missing a \\\"__resolveType\\\" resolver. Pass false into \" +\n                \"\\\"resolverValidationOptions.requireResolversForResolveType\\\" to disable this warning.\");\n        }\n    });\n}\nexports.default = checkForResolveTypeResolver;\n//# sourceMappingURL=checkForResolveTypeResolver.js.map"]},"metadata":{},"sourceType":"script"}