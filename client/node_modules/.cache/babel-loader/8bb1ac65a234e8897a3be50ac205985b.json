{"ast":null,"code":"import { processRequest as defaultProcessRequest } from './processRequest';\nexport const graphqlUploadKoa = function () {\n  let {\n    processRequest = defaultProcessRequest,\n    ...processRequestOptions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async (ctx, next) => {\n    if (!ctx.request.is('multipart/form-data')) return next();\n    const finished = new Promise(resolve => ctx.req.on('end', resolve));\n\n    try {\n      ctx.request.body = await processRequest(ctx.req, ctx.res, processRequestOptions);\n      await next();\n    } finally {\n      await finished;\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/node_modules/@apollographql/graphql-upload-8-fork/lib/graphqlUploadKoa.mjs"],"names":["processRequest","defaultProcessRequest","graphqlUploadKoa","processRequestOptions","ctx","next","request","is","finished","Promise","resolve","req","on","body","res"],"mappings":"AAAA,SAASA,cAAc,IAAIC,qBAA3B,QAAwD,kBAAxD;AACA,OAAO,MAAMC,gBAAgB,GAAG;AAAA,MAAC;AAC/BF,IAAAA,cAAc,GAAGC,qBADc;AAE/B,OAAGE;AAF4B,GAAD,uEAG5B,EAH4B;AAAA,SAGrB,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC9B,QAAI,CAACD,GAAG,CAACE,OAAJ,CAAYC,EAAZ,CAAe,qBAAf,CAAL,EAA4C,OAAOF,IAAI,EAAX;AAC5C,UAAMG,QAAQ,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAIN,GAAG,CAACO,GAAJ,CAAQC,EAAR,CAAW,KAAX,EAAkBF,OAAlB,CAAvB,CAAjB;;AAEA,QAAI;AACFN,MAAAA,GAAG,CAACE,OAAJ,CAAYO,IAAZ,GAAmB,MAAMb,cAAc,CACrCI,GAAG,CAACO,GADiC,EAErCP,GAAG,CAACU,GAFiC,EAGrCX,qBAHqC,CAAvC;AAKA,YAAME,IAAI,EAAV;AACD,KAPD,SAOU;AACR,YAAMG,QAAN;AACD;AACF,GAjB+B;AAAA,CAAzB","sourcesContent":["import { processRequest as defaultProcessRequest } from './processRequest'\nexport const graphqlUploadKoa = ({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) => async (ctx, next) => {\n  if (!ctx.request.is('multipart/form-data')) return next()\n  const finished = new Promise(resolve => ctx.req.on('end', resolve))\n\n  try {\n    ctx.request.body = await processRequest(\n      ctx.req,\n      ctx.res,\n      processRequestOptions\n    )\n    await next()\n  } finally {\n    await finished\n  }\n}\n"]},"metadata":{},"sourceType":"module"}