{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n  if (calledFunctionRefs === void 0) {\n    calledFunctionRefs = [];\n  }\n\n  var resolvedTypeDefinitions = [];\n  typeDefinitionsAry.forEach(function (typeDef) {\n    if (typeDef.kind !== undefined) {\n      typeDef = graphql_1.print(typeDef);\n    }\n\n    if (typeof typeDef === 'function') {\n      if (calledFunctionRefs.indexOf(typeDef) === -1) {\n        calledFunctionRefs.push(typeDef);\n        resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n      }\n    } else if (typeof typeDef === 'string') {\n      resolvedTypeDefinitions.push(typeDef.trim());\n    } else {\n      var type = typeof typeDef;\n      throw new _1.SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n    }\n  });\n  return uniq(resolvedTypeDefinitions.map(function (x) {\n    return x.trim();\n  })).join('\\n');\n}\n\nfunction uniq(array) {\n  return array.reduce(function (accumulator, currentValue) {\n    return accumulator.indexOf(currentValue) === -1 ? __spreadArrays(accumulator, [currentValue]) : accumulator;\n  }, []);\n}\n\nexports.default = concatenateTypeDefs;","map":{"version":3,"sources":["../../src/generate/concatenateTypeDefs.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAGA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEA,SAAS,mBAAT,CACE,kBADF,EAEE,kBAFF,EAEgC;AAA9B,MAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,kBAAA,GAAqB,EAArB;AAA8B;;AAE9B,MAAI,uBAAuB,GAAa,EAAxC;AACA,EAAA,kBAAkB,CAAC,OAAnB,CAA2B,UAAC,OAAD,EAAkB;AAC3C,QAAmB,OAAQ,CAAC,IAAT,KAAkB,SAArC,EAAgD;AAC9C,MAAA,OAAO,GAAG,SAAA,CAAA,KAAA,CAAM,OAAN,CAAV;AACD;;AAED,QAAI,OAAO,OAAP,KAAmB,UAAvB,EAAmC;AACjC,UAAI,kBAAkB,CAAC,OAAnB,CAA2B,OAA3B,MAAwC,CAAC,CAA7C,EAAgD;AAC9C,QAAA,kBAAkB,CAAC,IAAnB,CAAwB,OAAxB;AACA,QAAA,uBAAuB,GAAG,uBAAuB,CAAC,MAAxB,CACxB,mBAAmB,CAAC,OAAO,EAAR,EAAY,kBAAZ,CADK,CAA1B;AAGD;AACF,KAPD,MAOO,IAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AACtC,MAAA,uBAAuB,CAAC,IAAxB,CAA6B,OAAO,CAAC,IAAR,EAA7B;AACD,KAFM,MAEA;AACL,UAAM,IAAI,GAAG,OAAO,OAApB;AACA,YAAM,IAAI,EAAA,CAAA,WAAJ,CACJ,gEAA8D,IAD1D,CAAN;AAGD;AACF,GApBD;AAqBA,SAAO,IAAI,CAAC,uBAAuB,CAAC,GAAxB,CAA4B,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAD,IAAA,EAAA;AAAQ,GAAzC,CAAD,CAAJ,CAAiD,IAAjD,CAAsD,IAAtD,CAAP;AACD;;AAED,SAAS,IAAT,CAAc,KAAd,EAA+B;AAC7B,SAAO,KAAK,CAAC,MAAN,CAAa,UAAC,WAAD,EAAc,YAAd,EAA0B;AAC5C,WAAO,WAAW,CAAC,OAAZ,CAAoB,YAApB,MAAsC,CAAC,CAAvC,GACJ,cAAA,CAAK,WAAL,EAAgB,CAAE,YAAF,CAAhB,CADI,GAEH,WAFJ;AAGD,GAJM,EAIJ,EAJI,CAAP;AAKD;;AAED,OAAA,CAAA,OAAA,GAAe,mBAAf","sourceRoot":"","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\nfunction concatenateTypeDefs(typeDefinitionsAry, calledFunctionRefs) {\n    if (calledFunctionRefs === void 0) { calledFunctionRefs = []; }\n    var resolvedTypeDefinitions = [];\n    typeDefinitionsAry.forEach(function (typeDef) {\n        if (typeDef.kind !== undefined) {\n            typeDef = graphql_1.print(typeDef);\n        }\n        if (typeof typeDef === 'function') {\n            if (calledFunctionRefs.indexOf(typeDef) === -1) {\n                calledFunctionRefs.push(typeDef);\n                resolvedTypeDefinitions = resolvedTypeDefinitions.concat(concatenateTypeDefs(typeDef(), calledFunctionRefs));\n            }\n        }\n        else if (typeof typeDef === 'string') {\n            resolvedTypeDefinitions.push(typeDef.trim());\n        }\n        else {\n            var type = typeof typeDef;\n            throw new _1.SchemaError(\"typeDef array must contain only strings and functions, got \" + type);\n        }\n    });\n    return uniq(resolvedTypeDefinitions.map(function (x) { return x.trim(); })).join('\\n');\n}\nfunction uniq(array) {\n    return array.reduce(function (accumulator, currentValue) {\n        return accumulator.indexOf(currentValue) === -1\n            ? __spreadArrays(accumulator, [currentValue]) : accumulator;\n    }, []);\n}\nexports.default = concatenateTypeDefs;\n//# sourceMappingURL=concatenateTypeDefs.js.map"]},"metadata":{},"sourceType":"script"}