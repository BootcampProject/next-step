{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\n\nvar VisitSchemaKind;\n\n(function (VisitSchemaKind) {\n  VisitSchemaKind[\"TYPE\"] = \"VisitSchemaKind.TYPE\";\n  VisitSchemaKind[\"SCALAR_TYPE\"] = \"VisitSchemaKind.SCALAR_TYPE\";\n  VisitSchemaKind[\"ENUM_TYPE\"] = \"VisitSchemaKind.ENUM_TYPE\";\n  VisitSchemaKind[\"COMPOSITE_TYPE\"] = \"VisitSchemaKind.COMPOSITE_TYPE\";\n  VisitSchemaKind[\"OBJECT_TYPE\"] = \"VisitSchemaKind.OBJECT_TYPE\";\n  VisitSchemaKind[\"INPUT_OBJECT_TYPE\"] = \"VisitSchemaKind.INPUT_OBJECT_TYPE\";\n  VisitSchemaKind[\"ABSTRACT_TYPE\"] = \"VisitSchemaKind.ABSTRACT_TYPE\";\n  VisitSchemaKind[\"UNION_TYPE\"] = \"VisitSchemaKind.UNION_TYPE\";\n  VisitSchemaKind[\"INTERFACE_TYPE\"] = \"VisitSchemaKind.INTERFACE_TYPE\";\n  VisitSchemaKind[\"ROOT_OBJECT\"] = \"VisitSchemaKind.ROOT_OBJECT\";\n  VisitSchemaKind[\"QUERY\"] = \"VisitSchemaKind.QUERY\";\n  VisitSchemaKind[\"MUTATION\"] = \"VisitSchemaKind.MUTATION\";\n  VisitSchemaKind[\"SUBSCRIPTION\"] = \"VisitSchemaKind.SUBSCRIPTION\";\n})(VisitSchemaKind = exports.VisitSchemaKind || (exports.VisitSchemaKind = {}));\n\nfunction visitSchema(schema, visitor, stripResolvers) {\n  var types = {};\n  var resolveType = schemaRecreation_1.createResolveType(function (name) {\n    if (typeof types[name] === 'undefined') {\n      throw new Error(\"Can't find type \" + name + \".\");\n    }\n\n    return types[name];\n  });\n  var queryType = schema.getQueryType();\n  var mutationType = schema.getMutationType();\n  var subscriptionType = schema.getSubscriptionType();\n  var typeMap = schema.getTypeMap();\n  Object.keys(typeMap).map(function (typeName) {\n    var type = typeMap[typeName];\n\n    if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__') {\n      var specifiers = getTypeSpecifiers(type, schema);\n      var typeVisitor = getVisitor(visitor, specifiers);\n\n      if (typeVisitor) {\n        var result = typeVisitor(type, schema);\n\n        if (typeof result === 'undefined') {\n          types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n        } else if (result === null) {\n          types[typeName] = null;\n        } else {\n          types[typeName] = schemaRecreation_1.recreateType(result, resolveType, !stripResolvers);\n        }\n      } else {\n        types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n      }\n    }\n  });\n  return new graphql_1.GraphQLSchema({\n    query: queryType ? types[queryType.name] : null,\n    mutation: mutationType ? types[mutationType.name] : null,\n    subscription: subscriptionType ? types[subscriptionType.name] : null,\n    types: Object.keys(types).map(function (name) {\n      return types[name];\n    })\n  });\n}\n\nexports.visitSchema = visitSchema;\n\nfunction getTypeSpecifiers(type, schema) {\n  var specifiers = [VisitSchemaKind.TYPE];\n\n  if (type instanceof graphql_1.GraphQLObjectType) {\n    specifiers.unshift(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.OBJECT_TYPE);\n    var query = schema.getQueryType();\n    var mutation = schema.getMutationType();\n    var subscription = schema.getSubscriptionType();\n\n    if (type === query) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.QUERY);\n    } else if (type === mutation) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.MUTATION);\n    } else if (type === subscription) {\n      specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.SUBSCRIPTION);\n    }\n  } else if (type instanceof graphql_1.GraphQLInputObjectType) {\n    specifiers.push(VisitSchemaKind.INPUT_OBJECT_TYPE);\n  } else if (type instanceof graphql_1.GraphQLInterfaceType) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.INTERFACE_TYPE);\n  } else if (type instanceof graphql_1.GraphQLUnionType) {\n    specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.UNION_TYPE);\n  } else if (type instanceof graphql_1.GraphQLEnumType) {\n    specifiers.push(VisitSchemaKind.ENUM_TYPE);\n  } else if (type instanceof graphql_1.GraphQLScalarType) {\n    specifiers.push(VisitSchemaKind.SCALAR_TYPE);\n  }\n\n  return specifiers;\n}\n\nfunction getVisitor(visitor, specifiers) {\n  var typeVisitor = null;\n\n  var stack = __spreadArrays(specifiers);\n\n  while (!typeVisitor && stack.length > 0) {\n    var next = stack.pop();\n    typeVisitor = visitor[next];\n  }\n\n  return typeVisitor;\n}","map":{"version":3,"sources":["../../src/transforms/visitSchema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar schemaRecreation_1 = require(\"../stitching/schemaRecreation\");\nvar VisitSchemaKind;\n(function (VisitSchemaKind) {\n    VisitSchemaKind[\"TYPE\"] = \"VisitSchemaKind.TYPE\";\n    VisitSchemaKind[\"SCALAR_TYPE\"] = \"VisitSchemaKind.SCALAR_TYPE\";\n    VisitSchemaKind[\"ENUM_TYPE\"] = \"VisitSchemaKind.ENUM_TYPE\";\n    VisitSchemaKind[\"COMPOSITE_TYPE\"] = \"VisitSchemaKind.COMPOSITE_TYPE\";\n    VisitSchemaKind[\"OBJECT_TYPE\"] = \"VisitSchemaKind.OBJECT_TYPE\";\n    VisitSchemaKind[\"INPUT_OBJECT_TYPE\"] = \"VisitSchemaKind.INPUT_OBJECT_TYPE\";\n    VisitSchemaKind[\"ABSTRACT_TYPE\"] = \"VisitSchemaKind.ABSTRACT_TYPE\";\n    VisitSchemaKind[\"UNION_TYPE\"] = \"VisitSchemaKind.UNION_TYPE\";\n    VisitSchemaKind[\"INTERFACE_TYPE\"] = \"VisitSchemaKind.INTERFACE_TYPE\";\n    VisitSchemaKind[\"ROOT_OBJECT\"] = \"VisitSchemaKind.ROOT_OBJECT\";\n    VisitSchemaKind[\"QUERY\"] = \"VisitSchemaKind.QUERY\";\n    VisitSchemaKind[\"MUTATION\"] = \"VisitSchemaKind.MUTATION\";\n    VisitSchemaKind[\"SUBSCRIPTION\"] = \"VisitSchemaKind.SUBSCRIPTION\";\n})(VisitSchemaKind = exports.VisitSchemaKind || (exports.VisitSchemaKind = {}));\nfunction visitSchema(schema, visitor, stripResolvers) {\n    var types = {};\n    var resolveType = schemaRecreation_1.createResolveType(function (name) {\n        if (typeof types[name] === 'undefined') {\n            throw new Error(\"Can't find type \" + name + \".\");\n        }\n        return types[name];\n    });\n    var queryType = schema.getQueryType();\n    var mutationType = schema.getMutationType();\n    var subscriptionType = schema.getSubscriptionType();\n    var typeMap = schema.getTypeMap();\n    Object.keys(typeMap).map(function (typeName) {\n        var type = typeMap[typeName];\n        if (graphql_1.isNamedType(type) && graphql_1.getNamedType(type).name.slice(0, 2) !== '__') {\n            var specifiers = getTypeSpecifiers(type, schema);\n            var typeVisitor = getVisitor(visitor, specifiers);\n            if (typeVisitor) {\n                var result = typeVisitor(type, schema);\n                if (typeof result === 'undefined') {\n                    types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n                }\n                else if (result === null) {\n                    types[typeName] = null;\n                }\n                else {\n                    types[typeName] = schemaRecreation_1.recreateType(result, resolveType, !stripResolvers);\n                }\n            }\n            else {\n                types[typeName] = schemaRecreation_1.recreateType(type, resolveType, !stripResolvers);\n            }\n        }\n    });\n    return new graphql_1.GraphQLSchema({\n        query: queryType ? types[queryType.name] : null,\n        mutation: mutationType\n            ? types[mutationType.name]\n            : null,\n        subscription: subscriptionType\n            ? types[subscriptionType.name]\n            : null,\n        types: Object.keys(types).map(function (name) { return types[name]; }),\n    });\n}\nexports.visitSchema = visitSchema;\nfunction getTypeSpecifiers(type, schema) {\n    var specifiers = [VisitSchemaKind.TYPE];\n    if (type instanceof graphql_1.GraphQLObjectType) {\n        specifiers.unshift(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.OBJECT_TYPE);\n        var query = schema.getQueryType();\n        var mutation = schema.getMutationType();\n        var subscription = schema.getSubscriptionType();\n        if (type === query) {\n            specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.QUERY);\n        }\n        else if (type === mutation) {\n            specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.MUTATION);\n        }\n        else if (type === subscription) {\n            specifiers.push(VisitSchemaKind.ROOT_OBJECT, VisitSchemaKind.SUBSCRIPTION);\n        }\n    }\n    else if (type instanceof graphql_1.GraphQLInputObjectType) {\n        specifiers.push(VisitSchemaKind.INPUT_OBJECT_TYPE);\n    }\n    else if (type instanceof graphql_1.GraphQLInterfaceType) {\n        specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.INTERFACE_TYPE);\n    }\n    else if (type instanceof graphql_1.GraphQLUnionType) {\n        specifiers.push(VisitSchemaKind.COMPOSITE_TYPE, VisitSchemaKind.ABSTRACT_TYPE, VisitSchemaKind.UNION_TYPE);\n    }\n    else if (type instanceof graphql_1.GraphQLEnumType) {\n        specifiers.push(VisitSchemaKind.ENUM_TYPE);\n    }\n    else if (type instanceof graphql_1.GraphQLScalarType) {\n        specifiers.push(VisitSchemaKind.SCALAR_TYPE);\n    }\n    return specifiers;\n}\nfunction getVisitor(visitor, specifiers) {\n    var typeVisitor = null;\n    var stack = __spreadArrays(specifiers);\n    while (!typeVisitor && stack.length > 0) {\n        var next = stack.pop();\n        typeVisitor = visitor[next];\n    }\n    return typeVisitor;\n}\n//# sourceMappingURL=visitSchema.js.map"]},"metadata":{},"sourceType":"script"}