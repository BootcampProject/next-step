{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar _1 = require(\".\");\n\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n  if (resolverValidationOptions === void 0) {\n    resolverValidationOptions = {};\n  }\n\n  var _a = resolverValidationOptions.requireResolversForArgs,\n      requireResolversForArgs = _a === void 0 ? false : _a,\n      _b = resolverValidationOptions.requireResolversForNonScalar,\n      requireResolversForNonScalar = _b === void 0 ? false : _b,\n      _c = resolverValidationOptions.requireResolversForAllFields,\n      requireResolversForAllFields = _c === void 0 ? false : _c;\n\n  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n    throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' + 'Please configure either requireResolversForAllFields or requireResolversForArgs / ' + 'requireResolversForNonScalar, but not a combination of them.');\n  }\n\n  _1.forEachField(schema, function (field, typeName, fieldName) {\n    // requires a resolve function for *every* field.\n    if (requireResolversForAllFields) {\n      expectResolveFunction(field, typeName, fieldName);\n    } // requires a resolve function on every field that has arguments\n\n\n    if (requireResolversForArgs && field.args.length > 0) {\n      expectResolveFunction(field, typeName, fieldName);\n    } // requires a resolve function on every field that returns a non-scalar type\n\n\n    if (requireResolversForNonScalar && !(graphql_1.getNamedType(field.type) instanceof graphql_1.GraphQLScalarType)) {\n      expectResolveFunction(field, typeName, fieldName);\n    }\n  });\n}\n\nfunction expectResolveFunction(field, typeName, fieldName) {\n  if (!field.resolve) {\n    console.warn( // tslint:disable-next-line: max-line-length\n    \"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n    return;\n  }\n\n  if (typeof field.resolve !== 'function') {\n    throw new _1.SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n  }\n}\n\nexports.default = assertResolveFunctionsPresent;","map":{"version":3,"sources":["../../src/generate/assertResolveFunctionsPresent.ts"],"names":[],"mappings":";;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEA,SAAS,6BAAT,CACE,MADF,EAEE,yBAFF,EAE4D;AAA1D,MAAA,yBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,yBAAA,GAAA,EAAA;AAA0D;;AAGxD,MAAA,EAAA,GAAA,yBAAA,CAAA,uBAAA;AAAA,MAAA,uBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;AAAA,MACA,EAAA,GAAA,yBAAA,CAAA,4BADA;AAAA,MACA,4BAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EADA;AAAA,MAEA,EAAA,GAAA,yBAAA,CAAA,4BAFA;AAAA,MAEA,4BAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAFA;;AAKF,MACE,4BAA4B,KAC3B,uBAAuB,IAAI,4BADA,CAD9B,EAGE;AACA,UAAM,IAAI,SAAJ,CACJ,sFACE,oFADF,GAEE,8DAHE,CAAN;AAKD;;AAED,EAAA,EAAA,CAAA,YAAA,CAAa,MAAb,EAAqB,UAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,EAA2B;AAC9C;AACA,QAAI,4BAAJ,EAAkC;AAChC,MAAA,qBAAqB,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAArB;AACD,KAJ6C,CAM9C;;;AACA,QAAI,uBAAuB,IAAI,KAAK,CAAC,IAAN,CAAW,MAAX,GAAoB,CAAnD,EAAsD;AACpD,MAAA,qBAAqB,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAArB;AACD,KAT6C,CAW9C;;;AACA,QACE,4BAA4B,IAC5B,EAAE,SAAA,CAAA,YAAA,CAAa,KAAK,CAAC,IAAnB,aAAoC,SAAA,CAAA,iBAAtC,CAFF,EAGE;AACA,MAAA,qBAAqB,CAAC,KAAD,EAAQ,QAAR,EAAkB,SAAlB,CAArB;AACD;AACF,GAlBD;AAmBD;;AAED,SAAS,qBAAT,CACE,KADF,EAEE,QAFF,EAGE,SAHF,EAGmB;AAEjB,MAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AAClB,IAAA,OAAO,CAAC,IAAR,EACE;AACA,wCAAiC,QAAjC,GAAyC,GAAzC,GAA6C,SAA7C,GAAsD,2FAFxD;AAIA;AACD;;AACD,MAAI,OAAO,KAAK,CAAC,OAAb,KAAyB,UAA7B,EAAyC;AACvC,UAAM,IAAI,EAAA,CAAA,WAAJ,CACJ,gBAAa,QAAb,GAAqB,GAArB,GAAyB,SAAzB,GAAkC,uBAD9B,CAAN;AAGD;AACF;;AAED,OAAA,CAAA,OAAA,GAAe,6BAAf","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar _1 = require(\".\");\nfunction assertResolveFunctionsPresent(schema, resolverValidationOptions) {\n    if (resolverValidationOptions === void 0) { resolverValidationOptions = {}; }\n    var _a = resolverValidationOptions.requireResolversForArgs, requireResolversForArgs = _a === void 0 ? false : _a, _b = resolverValidationOptions.requireResolversForNonScalar, requireResolversForNonScalar = _b === void 0 ? false : _b, _c = resolverValidationOptions.requireResolversForAllFields, requireResolversForAllFields = _c === void 0 ? false : _c;\n    if (requireResolversForAllFields &&\n        (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    _1.forEachField(schema, function (field, typeName, fieldName) {\n        // requires a resolve function for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n        // requires a resolve function on every field that returns a non-scalar type\n        if (requireResolversForNonScalar &&\n            !(graphql_1.getNamedType(field.type) instanceof graphql_1.GraphQLScalarType)) {\n            expectResolveFunction(field, typeName, fieldName);\n        }\n    });\n}\nfunction expectResolveFunction(field, typeName, fieldName) {\n    if (!field.resolve) {\n        console.warn(\n        // tslint:disable-next-line: max-line-length\n        \"Resolve function missing for \\\"\" + typeName + \".\" + fieldName + \"\\\". To disable this warning check https://github.com/apollostack/graphql-tools/issues/131\");\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new _1.SchemaError(\"Resolver \\\"\" + typeName + \".\" + fieldName + \"\\\" must be a function\");\n    }\n}\nexports.default = assertResolveFunctionsPresent;\n//# sourceMappingURL=assertResolveFunctionsPresent.js.map"]},"metadata":{},"sourceType":"script"}