{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst uuid_1 = require(\"uuid\");\n\nconst graphql_1 = require(\"graphql\");\n\nconst schemaReporter_1 = require(\"./schemaReporter\");\n\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\n\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\n\nfunction ApolloServerPluginSchemaReporting() {\n  let {\n    initialDelayMaxMs,\n    overrideReportedSchema,\n    endpointUrl,\n    fetcher\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.create(null);\n  const bootId = uuid_1.v4();\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n\n    serverWillStart(_ref) {\n      let {\n        apollo,\n        schema,\n        logger\n      } = _ref;\n      return __awaiter(this, void 0, void 0, function* () {\n        const {\n          key,\n          graphRef\n        } = apollo;\n\n        if (!key) {\n          throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' + 'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n        }\n\n        if (!graphRef) {\n          throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' + \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" + 'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n        }\n\n        if (overrideReportedSchema) {\n          try {\n            const validationErrors = graphql_1.validateSchema(graphql_1.buildSchema(overrideReportedSchema, {\n              noLocation: true\n            }));\n\n            if (validationErrors.length) {\n              throw new Error(validationErrors.map(error => error.message).join('\\n'));\n            }\n          } catch (err) {\n            throw new Error('The schema provided to overrideReportedSchema failed to parse or ' + `validate: ${err.message}`);\n          }\n        }\n\n        if (schemaIsFederated_1.schemaIsFederated(schema)) {\n          throw Error(['Schema reporting is not yet compatible with federated services.', \"If you're interested in using schema reporting with federated\", 'services, please contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n        }\n\n        const coreSchema = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : graphql_1.printSchema(schema);\n        const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n\n        if (overrideReportedSchema !== undefined) {\n          logger.info('Apollo schema reporting: schema to report has been overridden');\n        }\n\n        if (endpointUrl !== undefined) {\n          logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n        }\n\n        const schemaReport = {\n          bootId,\n          graphRef,\n          platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n          runtimeVersion: `node ${process.version}`,\n          coreSchemaHash,\n          userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n          serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n          libraryVersion: `apollo-server-core@${require('../../../package.json').version}`\n        };\n        logger.info('Apollo schema reporting starting! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n        const schemaReporter = new schemaReporter_1.SchemaReporter({\n          schemaReport,\n          coreSchema,\n          apiKey: key,\n          endpointUrl,\n          logger,\n          initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n          fallbackReportingDelayInMs: 20000,\n          fetcher\n        });\n        schemaReporter.start();\n        return {\n          serverWillStop() {\n            return __awaiter(this, void 0, void 0, function* () {\n              schemaReporter.stop();\n            });\n          }\n\n        };\n      });\n    }\n\n  };\n}\n\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\n\nfunction computeCoreSchemaHash(schema) {\n  return createSHA_1.default('sha256').update(schema).digest('hex');\n}\n\nexports.computeCoreSchemaHash = computeCoreSchemaHash;","map":{"version":3,"sources":["../../../src/plugin/schemaReporting/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporter_1 = require(\"./schemaReporter\");\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher, } = Object.create(null)) {\n    const bootId = uuid_1.v4();\n    return {\n        __internal_plugin_id__() {\n            return 'SchemaReporting';\n        },\n        serverWillStart({ apollo, schema, logger }) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const { key, graphRef } = apollo;\n                if (!key) {\n                    throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n                        'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n                }\n                if (!graphRef) {\n                    throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n                        \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n                        'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n                }\n                if (overrideReportedSchema) {\n                    try {\n                        const validationErrors = graphql_1.validateSchema(graphql_1.buildSchema(overrideReportedSchema, { noLocation: true }));\n                        if (validationErrors.length) {\n                            throw new Error(validationErrors.map((error) => error.message).join('\\n'));\n                        }\n                    }\n                    catch (err) {\n                        throw new Error('The schema provided to overrideReportedSchema failed to parse or ' +\n                            `validate: ${err.message}`);\n                    }\n                }\n                if (schemaIsFederated_1.schemaIsFederated(schema)) {\n                    throw Error([\n                        'Schema reporting is not yet compatible with federated services.',\n                        \"If you're interested in using schema reporting with federated\",\n                        'services, please contact Apollo support. To set up managed federation, see',\n                        'https://go.apollo.dev/s/managed-federation',\n                    ].join(' '));\n                }\n                const coreSchema = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : graphql_1.printSchema(schema);\n                const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n                if (overrideReportedSchema !== undefined) {\n                    logger.info('Apollo schema reporting: schema to report has been overridden');\n                }\n                if (endpointUrl !== undefined) {\n                    logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n                }\n                const schemaReport = {\n                    bootId,\n                    graphRef,\n                    platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n                    runtimeVersion: `node ${process.version}`,\n                    coreSchemaHash,\n                    userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n                    serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n                    libraryVersion: `apollo-server-core@${require('../../../package.json').version}`,\n                };\n                logger.info('Apollo schema reporting starting! See your graph at ' +\n                    `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n                const schemaReporter = new schemaReporter_1.SchemaReporter({\n                    schemaReport,\n                    coreSchema,\n                    apiKey: key,\n                    endpointUrl,\n                    logger,\n                    initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n                    fallbackReportingDelayInMs: 20000,\n                    fetcher,\n                });\n                schemaReporter.start();\n                return {\n                    serverWillStop() {\n                        return __awaiter(this, void 0, void 0, function* () {\n                            schemaReporter.stop();\n                        });\n                    },\n                };\n            });\n        },\n    };\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\nfunction computeCoreSchemaHash(schema) {\n    return createSHA_1.default('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}