{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.whenResultIsFinished = exports.enablePluginsForSchemaResolvers = exports.symbolPluginsEnabled = exports.symbolUserFieldResolver = exports.symbolExecutionDispatcherWillResolveField = void 0;\n\nconst type_1 = require(\"graphql/type\");\n\nconst execution_1 = require(\"graphql/execution\");\n\nexports.symbolExecutionDispatcherWillResolveField = Symbol(\"apolloServerExecutionDispatcherWillResolveField\");\nexports.symbolUserFieldResolver = Symbol(\"apolloServerUserFieldResolver\");\nexports.symbolPluginsEnabled = Symbol(\"apolloServerPluginsEnabled\");\n\nfunction enablePluginsForSchemaResolvers(schema) {\n  if (schema[exports.symbolPluginsEnabled]) {\n    return schema;\n  }\n\n  Object.defineProperty(schema, exports.symbolPluginsEnabled, {\n    value: true\n  });\n  forEachField(schema, wrapField);\n  return schema;\n}\n\nexports.enablePluginsForSchemaResolvers = enablePluginsForSchemaResolvers;\n\nfunction wrapField(field) {\n  const originalFieldResolve = field.resolve;\n\n  field.resolve = (source, args, context, info) => {\n    const parentPath = info.path.prev;\n    const willResolveField = context === null || context === void 0 ? void 0 : context[exports.symbolExecutionDispatcherWillResolveField];\n    const userFieldResolver = context === null || context === void 0 ? void 0 : context[exports.symbolUserFieldResolver];\n    const didResolveField = typeof willResolveField === 'function' && willResolveField({\n      source,\n      args,\n      context,\n      info\n    });\n    const resolveObject = info.parentType.resolveObject;\n    let whenObjectResolved;\n\n    if (parentPath && resolveObject) {\n      if (!parentPath.__fields) {\n        parentPath.__fields = {};\n      }\n\n      parentPath.__fields[info.fieldName] = info.fieldNodes;\n      whenObjectResolved = parentPath.__whenObjectResolved;\n\n      if (!whenObjectResolved) {\n        whenObjectResolved = Promise.resolve().then(() => {\n          return resolveObject(source, parentPath.__fields, context, info);\n        });\n        parentPath.__whenObjectResolved = whenObjectResolved;\n      }\n    }\n\n    const fieldResolver = originalFieldResolve || userFieldResolver || execution_1.defaultFieldResolver;\n\n    try {\n      let result;\n\n      if (whenObjectResolved) {\n        result = whenObjectResolved.then(resolvedObject => {\n          return fieldResolver(resolvedObject, args, context, info);\n        });\n      } else {\n        result = fieldResolver(source, args, context, info);\n      }\n\n      if (typeof didResolveField === \"function\") {\n        whenResultIsFinished(result, didResolveField);\n      }\n\n      return result;\n    } catch (error) {\n      if (typeof didResolveField === \"function\") {\n        didResolveField(error);\n      }\n\n      throw error;\n    }\n  };\n\n  ;\n}\n\nfunction isPromise(x) {\n  return x && typeof x.then === 'function';\n}\n\nfunction whenResultIsFinished(result, callback) {\n  if (isPromise(result)) {\n    result.then(r => callback(null, r), err => callback(err));\n  } else if (Array.isArray(result)) {\n    if (result.some(isPromise)) {\n      Promise.all(result).then(r => callback(null, r), err => callback(err));\n    } else {\n      callback(null, result);\n    }\n  } else {\n    callback(null, result);\n  }\n}\n\nexports.whenResultIsFinished = whenResultIsFinished;\n\nfunction forEachField(schema, fn) {\n  const typeMap = schema.getTypeMap();\n  Object.entries(typeMap).forEach(_ref => {\n    let [typeName, type] = _ref;\n\n    if (!type_1.getNamedType(type).name.startsWith('__') && type instanceof type_1.GraphQLObjectType) {\n      const fields = type.getFields();\n      Object.entries(fields).forEach(_ref2 => {\n        let [fieldName, field] = _ref2;\n        fn(field, typeName, fieldName);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../../src/utils/schemaInstrumentation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.whenResultIsFinished = exports.enablePluginsForSchemaResolvers = exports.symbolPluginsEnabled = exports.symbolUserFieldResolver = exports.symbolExecutionDispatcherWillResolveField = void 0;\nconst type_1 = require(\"graphql/type\");\nconst execution_1 = require(\"graphql/execution\");\nexports.symbolExecutionDispatcherWillResolveField = Symbol(\"apolloServerExecutionDispatcherWillResolveField\");\nexports.symbolUserFieldResolver = Symbol(\"apolloServerUserFieldResolver\");\nexports.symbolPluginsEnabled = Symbol(\"apolloServerPluginsEnabled\");\nfunction enablePluginsForSchemaResolvers(schema) {\n    if (schema[exports.symbolPluginsEnabled]) {\n        return schema;\n    }\n    Object.defineProperty(schema, exports.symbolPluginsEnabled, {\n        value: true,\n    });\n    forEachField(schema, wrapField);\n    return schema;\n}\nexports.enablePluginsForSchemaResolvers = enablePluginsForSchemaResolvers;\nfunction wrapField(field) {\n    const originalFieldResolve = field.resolve;\n    field.resolve = (source, args, context, info) => {\n        const parentPath = info.path.prev;\n        const willResolveField = context === null || context === void 0 ? void 0 : context[exports.symbolExecutionDispatcherWillResolveField];\n        const userFieldResolver = context === null || context === void 0 ? void 0 : context[exports.symbolUserFieldResolver];\n        const didResolveField = typeof willResolveField === 'function' &&\n            willResolveField({ source, args, context, info });\n        const resolveObject = info.parentType.resolveObject;\n        let whenObjectResolved;\n        if (parentPath && resolveObject) {\n            if (!parentPath.__fields) {\n                parentPath.__fields = {};\n            }\n            parentPath.__fields[info.fieldName] = info.fieldNodes;\n            whenObjectResolved = parentPath.__whenObjectResolved;\n            if (!whenObjectResolved) {\n                whenObjectResolved = Promise.resolve().then(() => {\n                    return resolveObject(source, parentPath.__fields, context, info);\n                });\n                parentPath.__whenObjectResolved = whenObjectResolved;\n            }\n        }\n        const fieldResolver = originalFieldResolve || userFieldResolver || execution_1.defaultFieldResolver;\n        try {\n            let result;\n            if (whenObjectResolved) {\n                result = whenObjectResolved.then((resolvedObject) => {\n                    return fieldResolver(resolvedObject, args, context, info);\n                });\n            }\n            else {\n                result = fieldResolver(source, args, context, info);\n            }\n            if (typeof didResolveField === \"function\") {\n                whenResultIsFinished(result, didResolveField);\n            }\n            return result;\n        }\n        catch (error) {\n            if (typeof didResolveField === \"function\") {\n                didResolveField(error);\n            }\n            throw error;\n        }\n    };\n    ;\n}\nfunction isPromise(x) {\n    return x && typeof x.then === 'function';\n}\nfunction whenResultIsFinished(result, callback) {\n    if (isPromise(result)) {\n        result.then((r) => callback(null, r), (err) => callback(err));\n    }\n    else if (Array.isArray(result)) {\n        if (result.some(isPromise)) {\n            Promise.all(result).then((r) => callback(null, r), (err) => callback(err));\n        }\n        else {\n            callback(null, result);\n        }\n    }\n    else {\n        callback(null, result);\n    }\n}\nexports.whenResultIsFinished = whenResultIsFinished;\nfunction forEachField(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    Object.entries(typeMap).forEach(([typeName, type]) => {\n        if (!type_1.getNamedType(type).name.startsWith('__') &&\n            type instanceof type_1.GraphQLObjectType) {\n            const fields = type.getFields();\n            Object.entries(fields).forEach(([fieldName, field]) => {\n                fn(field, typeName, fieldName);\n            });\n        }\n    });\n}\n//# sourceMappingURL=schemaInstrumentation.js.map"]},"metadata":{},"sourceType":"script"}