{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformSchema = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst mapValues_1 = require(\"../utilities/mapValues\");\n\nfunction transformSchema(schema, transformType) {\n  const typeMap = Object.create(null);\n\n  for (const oldType of Object.values(schema.getTypeMap())) {\n    if (graphql_1.isIntrospectionType(oldType)) continue;\n    const result = transformType(oldType);\n    if (result === null) continue;\n    const newType = result || oldType;\n    typeMap[newType.name] = recreateNamedType(newType);\n  }\n\n  const schemaConfig = schema.toConfig();\n  return new graphql_1.GraphQLSchema(Object.assign(Object.assign({}, schemaConfig), {\n    types: Object.values(typeMap),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n    directives: replaceDirectives(schemaConfig.directives)\n  }));\n\n  function recreateNamedType(type) {\n    if (graphql_1.isObjectType(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLObjectType(Object.assign(Object.assign({}, config), {\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      }));\n    } else if (graphql_1.isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInterfaceType(Object.assign(Object.assign({}, config), {\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      }));\n    } else if (graphql_1.isUnionType(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLUnionType(Object.assign(Object.assign({}, config), {\n        types: () => config.types.map(replaceNamedType)\n      }));\n    } else if (graphql_1.isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInputObjectType(Object.assign(Object.assign({}, config), {\n        fields: () => replaceInputFields(config.fields)\n      }));\n    }\n\n    return type;\n  }\n\n  function replaceType(type) {\n    if (graphql_1.isListType(type)) {\n      return new graphql_1.GraphQLList(replaceType(type.ofType));\n    } else if (graphql_1.isNonNullType(type)) {\n      return new graphql_1.GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    const newType = typeMap[type.name];\n    return newType ? newType : type;\n  }\n\n  function replaceMaybeType(type) {\n    return type ? replaceNamedType(type) : undefined;\n  }\n\n  function replaceFields(fieldsMap) {\n    return mapValues_1.mapValues(fieldsMap, field => Object.assign(Object.assign({}, field), {\n      type: replaceType(field.type),\n      args: field.args ? replaceArgs(field.args) : undefined\n    }));\n  }\n\n  function replaceInputFields(fieldsMap) {\n    return mapValues_1.mapValues(fieldsMap, field => Object.assign(Object.assign({}, field), {\n      type: replaceType(field.type)\n    }));\n  }\n\n  function replaceArgs(args) {\n    return mapValues_1.mapValues(args, arg => Object.assign(Object.assign({}, arg), {\n      type: replaceType(arg.type)\n    }));\n  }\n\n  function replaceDirectives(directives) {\n    return directives.map(directive => {\n      const config = directive.toConfig();\n      return new graphql_1.GraphQLDirective(Object.assign(Object.assign({}, config), {\n        args: replaceArgs(config.args)\n      }));\n    });\n  }\n}\n\nexports.transformSchema = transformSchema;","map":{"version":3,"sources":["../../src/schema/transformSchema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nconst mapValues_1 = require(\"../utilities/mapValues\");\nfunction transformSchema(schema, transformType) {\n    const typeMap = Object.create(null);\n    for (const oldType of Object.values(schema.getTypeMap())) {\n        if (graphql_1.isIntrospectionType(oldType))\n            continue;\n        const result = transformType(oldType);\n        if (result === null)\n            continue;\n        const newType = result || oldType;\n        typeMap[newType.name] = recreateNamedType(newType);\n    }\n    const schemaConfig = schema.toConfig();\n    return new graphql_1.GraphQLSchema(Object.assign(Object.assign({}, schemaConfig), { types: Object.values(typeMap), query: replaceMaybeType(schemaConfig.query), mutation: replaceMaybeType(schemaConfig.mutation), subscription: replaceMaybeType(schemaConfig.subscription), directives: replaceDirectives(schemaConfig.directives) }));\n    function recreateNamedType(type) {\n        if (graphql_1.isObjectType(type)) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLObjectType(Object.assign(Object.assign({}, config), { interfaces: () => config.interfaces.map(replaceNamedType), fields: () => replaceFields(config.fields) }));\n        }\n        else if (graphql_1.isInterfaceType(type)) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLInterfaceType(Object.assign(Object.assign({}, config), { interfaces: () => config.interfaces.map(replaceNamedType), fields: () => replaceFields(config.fields) }));\n        }\n        else if (graphql_1.isUnionType(type)) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLUnionType(Object.assign(Object.assign({}, config), { types: () => config.types.map(replaceNamedType) }));\n        }\n        else if (graphql_1.isInputObjectType(type)) {\n            const config = type.toConfig();\n            return new graphql_1.GraphQLInputObjectType(Object.assign(Object.assign({}, config), { fields: () => replaceInputFields(config.fields) }));\n        }\n        return type;\n    }\n    function replaceType(type) {\n        if (graphql_1.isListType(type)) {\n            return new graphql_1.GraphQLList(replaceType(type.ofType));\n        }\n        else if (graphql_1.isNonNullType(type)) {\n            return new graphql_1.GraphQLNonNull(replaceType(type.ofType));\n        }\n        return replaceNamedType(type);\n    }\n    function replaceNamedType(type) {\n        const newType = typeMap[type.name];\n        return newType ? newType : type;\n    }\n    function replaceMaybeType(type) {\n        return type ? replaceNamedType(type) : undefined;\n    }\n    function replaceFields(fieldsMap) {\n        return mapValues_1.mapValues(fieldsMap, field => (Object.assign(Object.assign({}, field), { type: replaceType(field.type), args: field.args ? replaceArgs(field.args) : undefined })));\n    }\n    function replaceInputFields(fieldsMap) {\n        return mapValues_1.mapValues(fieldsMap, field => (Object.assign(Object.assign({}, field), { type: replaceType(field.type) })));\n    }\n    function replaceArgs(args) {\n        return mapValues_1.mapValues(args, arg => (Object.assign(Object.assign({}, arg), { type: replaceType(arg.type) })));\n    }\n    function replaceDirectives(directives) {\n        return directives.map(directive => {\n            const config = directive.toConfig();\n            return new graphql_1.GraphQLDirective(Object.assign(Object.assign({}, config), { args: replaceArgs(config.args) }));\n        });\n    }\n}\nexports.transformSchema = transformSchema;\n//# sourceMappingURL=transformSchema.js.map"]},"metadata":{},"sourceType":"script"}