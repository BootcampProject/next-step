{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.determineApolloConfig = void 0;\n\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\n\nfunction determineApolloConfig(input, engine, logger) {\n  if (input && engine !== undefined) {\n    throw Error('Cannot pass both `apollo` and `engine`');\n  }\n\n  const apolloConfig = {};\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT,\n    ENGINE_API_KEY,\n    ENGINE_SCHEMA_TAG\n  } = process.env;\n\n  if (input === null || input === void 0 ? void 0 : input.key) {\n    apolloConfig.key = input.key;\n  } else if (typeof engine === 'object' && engine.apiKey) {\n    apolloConfig.key = engine.apiKey;\n  } else if (APOLLO_KEY) {\n    if (ENGINE_API_KEY) {\n      logger.warn('Using `APOLLO_KEY` since `ENGINE_API_KEY` (deprecated) is also set in the environment.');\n    }\n\n    apolloConfig.key = APOLLO_KEY;\n  } else if (ENGINE_API_KEY) {\n    logger.warn('[deprecated] The `ENGINE_API_KEY` environment variable has been renamed to `APOLLO_KEY`.');\n    apolloConfig.key = ENGINE_API_KEY;\n  }\n\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = createSHA_1.default('sha512').update(apolloConfig.key).digest('hex');\n  }\n\n  if (input === null || input === void 0 ? void 0 : input.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n\n  if (input === null || input === void 0 ? void 0 : input.graphId) {\n    apolloConfig.graphId = input.graphId;\n  } else if (APOLLO_GRAPH_ID) {\n    apolloConfig.graphId = APOLLO_GRAPH_ID;\n  }\n\n  if (input === null || input === void 0 ? void 0 : input.graphVariant) {\n    apolloConfig.graphVariant = input.graphVariant;\n  } else if (typeof engine === 'object' && engine.graphVariant) {\n    if (engine.schemaTag) {\n      throw new Error('Cannot set more than one of apollo.graphVariant, ' + 'engine.graphVariant, and engine.schemaTag. Please use apollo.graphVariant.');\n    }\n\n    apolloConfig.graphVariant = engine.graphVariant;\n  } else if (typeof engine === 'object' && engine.schemaTag) {\n    logger.warn('[deprecated] The `engine.schemaTag` option has been renamed to `apollo.graphVariant` ' + '(or you may set it with the `APOLLO_GRAPH_VARIANT` environment variable).');\n    apolloConfig.graphVariant = engine.schemaTag;\n  } else if (APOLLO_GRAPH_VARIANT) {\n    if (ENGINE_SCHEMA_TAG) {\n      throw new Error('`APOLLO_GRAPH_VARIANT` and `ENGINE_SCHEMA_TAG` (deprecated) environment variables must not both be set.');\n    }\n\n    apolloConfig.graphVariant = APOLLO_GRAPH_VARIANT;\n  } else if (ENGINE_SCHEMA_TAG) {\n    logger.warn('[deprecated] The `ENGINE_SCHEMA_TAG` environment variable has been renamed to `APOLLO_GRAPH_VARIANT`.');\n    apolloConfig.graphVariant = ENGINE_SCHEMA_TAG;\n  }\n\n  if (apolloConfig.graphRef) {\n    if (apolloConfig.graphId) {\n      throw new Error('Cannot specify both graph ref and graph ID. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n\n    if (apolloConfig.graphVariant) {\n      throw new Error('Cannot specify both graph ref and graph variant. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n\n    const at = apolloConfig.graphRef.indexOf('@');\n\n    if (at === -1) {\n      apolloConfig.graphId = apolloConfig.graphRef;\n      apolloConfig.graphVariant = 'current';\n    } else {\n      apolloConfig.graphId = apolloConfig.graphRef.substring(0, at);\n      apolloConfig.graphVariant = apolloConfig.graphRef.substring(at + 1);\n    }\n  } else {\n    if (!apolloConfig.graphId && apolloConfig.key) {\n      const parts = apolloConfig.key.split(':', 2);\n\n      if (parts[0] === 'service') {\n        apolloConfig.graphId = parts[1];\n      } else {\n        throw Error('You have specified an API key in `apollo.key` or `APOLLO_KEY`, ' + 'but you have not specified your graph ref or graph ID and the key ' + 'does not start with `service:`. Please specify your graph ref; for ' + 'example, set `APOLLO_GRAPH_REF` to `my-graph-id@my-graph-variant`.');\n      }\n    }\n\n    if (!apolloConfig.graphVariant) {\n      apolloConfig.graphVariant = 'current';\n    }\n\n    if (apolloConfig.graphId) {\n      apolloConfig.graphRef = `${apolloConfig.graphId}@${apolloConfig.graphVariant}`;\n    }\n  }\n\n  return apolloConfig;\n}\n\nexports.determineApolloConfig = determineApolloConfig;","map":{"version":3,"sources":["../src/determineApolloConfig.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.determineApolloConfig = void 0;\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nfunction determineApolloConfig(input, engine, logger) {\n    if (input && engine !== undefined) {\n        throw Error('Cannot pass both `apollo` and `engine`');\n    }\n    const apolloConfig = {};\n    const { APOLLO_KEY, APOLLO_GRAPH_REF, APOLLO_GRAPH_ID, APOLLO_GRAPH_VARIANT, ENGINE_API_KEY, ENGINE_SCHEMA_TAG, } = process.env;\n    if (input === null || input === void 0 ? void 0 : input.key) {\n        apolloConfig.key = input.key;\n    }\n    else if (typeof engine === 'object' && engine.apiKey) {\n        apolloConfig.key = engine.apiKey;\n    }\n    else if (APOLLO_KEY) {\n        if (ENGINE_API_KEY) {\n            logger.warn('Using `APOLLO_KEY` since `ENGINE_API_KEY` (deprecated) is also set in the environment.');\n        }\n        apolloConfig.key = APOLLO_KEY;\n    }\n    else if (ENGINE_API_KEY) {\n        logger.warn('[deprecated] The `ENGINE_API_KEY` environment variable has been renamed to `APOLLO_KEY`.');\n        apolloConfig.key = ENGINE_API_KEY;\n    }\n    if (apolloConfig.key) {\n        apolloConfig.keyHash = createSHA_1.default('sha512')\n            .update(apolloConfig.key)\n            .digest('hex');\n    }\n    if (input === null || input === void 0 ? void 0 : input.graphRef) {\n        apolloConfig.graphRef = input.graphRef;\n    }\n    else if (APOLLO_GRAPH_REF) {\n        apolloConfig.graphRef = APOLLO_GRAPH_REF;\n    }\n    if (input === null || input === void 0 ? void 0 : input.graphId) {\n        apolloConfig.graphId = input.graphId;\n    }\n    else if (APOLLO_GRAPH_ID) {\n        apolloConfig.graphId = APOLLO_GRAPH_ID;\n    }\n    if (input === null || input === void 0 ? void 0 : input.graphVariant) {\n        apolloConfig.graphVariant = input.graphVariant;\n    }\n    else if (typeof engine === 'object' && engine.graphVariant) {\n        if (engine.schemaTag) {\n            throw new Error('Cannot set more than one of apollo.graphVariant, ' +\n                'engine.graphVariant, and engine.schemaTag. Please use apollo.graphVariant.');\n        }\n        apolloConfig.graphVariant = engine.graphVariant;\n    }\n    else if (typeof engine === 'object' && engine.schemaTag) {\n        logger.warn('[deprecated] The `engine.schemaTag` option has been renamed to `apollo.graphVariant` ' +\n            '(or you may set it with the `APOLLO_GRAPH_VARIANT` environment variable).');\n        apolloConfig.graphVariant = engine.schemaTag;\n    }\n    else if (APOLLO_GRAPH_VARIANT) {\n        if (ENGINE_SCHEMA_TAG) {\n            throw new Error('`APOLLO_GRAPH_VARIANT` and `ENGINE_SCHEMA_TAG` (deprecated) environment variables must not both be set.');\n        }\n        apolloConfig.graphVariant = APOLLO_GRAPH_VARIANT;\n    }\n    else if (ENGINE_SCHEMA_TAG) {\n        logger.warn('[deprecated] The `ENGINE_SCHEMA_TAG` environment variable has been renamed to `APOLLO_GRAPH_VARIANT`.');\n        apolloConfig.graphVariant = ENGINE_SCHEMA_TAG;\n    }\n    if (apolloConfig.graphRef) {\n        if (apolloConfig.graphId) {\n            throw new Error('Cannot specify both graph ref and graph ID. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n        }\n        if (apolloConfig.graphVariant) {\n            throw new Error('Cannot specify both graph ref and graph variant. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n        }\n        const at = apolloConfig.graphRef.indexOf('@');\n        if (at === -1) {\n            apolloConfig.graphId = apolloConfig.graphRef;\n            apolloConfig.graphVariant = 'current';\n        }\n        else {\n            apolloConfig.graphId = apolloConfig.graphRef.substring(0, at);\n            apolloConfig.graphVariant = apolloConfig.graphRef.substring(at + 1);\n        }\n    }\n    else {\n        if (!apolloConfig.graphId && apolloConfig.key) {\n            const parts = apolloConfig.key.split(':', 2);\n            if (parts[0] === 'service') {\n                apolloConfig.graphId = parts[1];\n            }\n            else {\n                throw Error('You have specified an API key in `apollo.key` or `APOLLO_KEY`, ' +\n                    'but you have not specified your graph ref or graph ID and the key ' +\n                    'does not start with `service:`. Please specify your graph ref; for ' +\n                    'example, set `APOLLO_GRAPH_REF` to `my-graph-id@my-graph-variant`.');\n            }\n        }\n        if (!apolloConfig.graphVariant) {\n            apolloConfig.graphVariant = 'current';\n        }\n        if (apolloConfig.graphId) {\n            apolloConfig.graphRef = `${apolloConfig.graphId}@${apolloConfig.graphVariant}`;\n        }\n    }\n    return apolloConfig;\n}\nexports.determineApolloConfig = determineApolloConfig;\n//# sourceMappingURL=determineApolloConfig.js.map"]},"metadata":{},"sourceType":"script"}