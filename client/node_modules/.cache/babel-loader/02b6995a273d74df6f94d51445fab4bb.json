{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.plugin = void 0;\n\nconst graphql_1 = require(\"graphql\");\n\nconst {\n  name: PACKAGE_NAME\n} = require(\"../package.json\");\n\nexports.plugin = function () {\n  let _futureOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  return () => ({\n    requestDidStart() {\n      const startWallTime = new Date();\n      let endWallTime;\n      const startHrTime = process.hrtime();\n      let duration;\n      const resolverCalls = [];\n      return {\n        executionDidStart: () => ({\n          executionDidEnd: () => {\n            duration = process.hrtime(startHrTime);\n            endWallTime = new Date();\n          },\n\n          willResolveField(_ref) {\n            let {\n              info\n            } = _ref;\n            const resolverCall = {\n              path: info.path,\n              fieldName: info.fieldName,\n              parentType: info.parentType,\n              returnType: info.returnType,\n              startOffset: process.hrtime(startHrTime)\n            };\n            resolverCalls.push(resolverCall);\n            return () => {\n              resolverCall.endOffset = process.hrtime(startHrTime);\n            };\n          }\n\n        }),\n\n        willSendResponse(_ref2) {\n          let {\n            response\n          } = _ref2;\n\n          if (typeof endWallTime === 'undefined' || typeof duration === 'undefined') {\n            return;\n          }\n\n          const extensions = response.extensions || (response.extensions = Object.create(null));\n\n          if (typeof extensions.tracing !== 'undefined') {\n            throw new Error(PACKAGE_NAME + \": Could not add `tracing` to \" + \"`extensions` since `tracing` was unexpectedly already present.\");\n          }\n\n          extensions.tracing = {\n            version: 1,\n            startTime: startWallTime.toISOString(),\n            endTime: endWallTime.toISOString(),\n            duration: durationHrTimeToNanos(duration),\n            execution: {\n              resolvers: resolverCalls.map(resolverCall => {\n                const startOffset = durationHrTimeToNanos(resolverCall.startOffset);\n                const duration = resolverCall.endOffset ? durationHrTimeToNanos(resolverCall.endOffset) - startOffset : 0;\n                return {\n                  path: [...graphql_1.responsePathAsArray(resolverCall.path)],\n                  parentType: resolverCall.parentType.toString(),\n                  fieldName: resolverCall.fieldName,\n                  returnType: resolverCall.returnType.toString(),\n                  startOffset,\n                  duration\n                };\n              })\n            }\n          };\n        }\n\n      };\n    }\n\n  });\n};\n\nfunction durationHrTimeToNanos(hrtime) {\n  return hrtime[0] * 1e9 + hrtime[1];\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAOA,MAAM;AAAE,EAAA,IAAI,EAAE;AAAR,IAAyB,OAAO,CAAC,iBAAD,CAAtC;;AA4Ba,OAAA,CAAA,MAAA,GAAS;AAAA,MAAC,cAAD,uEAAkB,EAAlB;;AAAA,SAAyB,OAA2B;AACxE,IAAA,eAAe,GAAA;AACb,YAAM,aAAa,GAAS,IAAI,IAAJ,EAA5B;AACA,UAAI,WAAJ;AACA,YAAM,WAAW,GAAuB,OAAO,CAAC,MAAR,EAAxC;AACA,UAAI,QAAJ;AACA,YAAM,aAAa,GAAmB,EAAtC;AAGA,aAAO;AACL,QAAA,iBAAiB,EAAE,OAAO;AAYxB,UAAA,eAAe,EAAE,MAAK;AACpB,YAAA,QAAQ,GAAG,OAAO,CAAC,MAAR,CAAe,WAAf,CAAX;AACA,YAAA,WAAW,GAAG,IAAI,IAAJ,EAAd;AACD,WAfuB;;AAiBxB,UAAA,gBAAgB,OAAS;AAAA,gBAAR;AAAE,cAAA;AAAF,aAAQ;AACvB,kBAAM,YAAY,GAAiB;AACjC,cAAA,IAAI,EAAE,IAAI,CAAC,IADsB;AAEjC,cAAA,SAAS,EAAE,IAAI,CAAC,SAFiB;AAGjC,cAAA,UAAU,EAAE,IAAI,CAAC,UAHgB;AAIjC,cAAA,UAAU,EAAE,IAAI,CAAC,UAJgB;AAKjC,cAAA,WAAW,EAAE,OAAO,CAAC,MAAR,CAAe,WAAf;AALoB,aAAnC;AAQA,YAAA,aAAa,CAAC,IAAd,CAAmB,YAAnB;AAEA,mBAAO,MAAK;AACV,cAAA,YAAY,CAAC,SAAb,GAAyB,OAAO,CAAC,MAAR,CAAe,WAAf,CAAzB;AACD,aAFD;AAGD;;AA/BuB,SAAP,CADd;;AAmCL,QAAA,gBAAgB,QAAa;AAAA,cAAZ;AAAE,YAAA;AAAF,WAAY;;AAK3B,cACE,OAAO,WAAP,KAAuB,WAAvB,IACA,OAAO,QAAP,KAAoB,WAFtB,EAGE;AACA;AACD;;AAED,gBAAM,UAAU,GACd,QAAQ,CAAC,UAAT,KAAwB,QAAQ,CAAC,UAAT,GAAsB,MAAM,CAAC,MAAP,CAAc,IAAd,CAA9C,CADF;;AAKA,cAAI,OAAO,UAAU,CAAC,OAAlB,KAA8B,WAAlC,EAA+C;AAC7C,kBAAM,IAAI,KAAJ,CAAU,YAAY,GAAG,+BAAf,GACd,gEADI,CAAN;AAED;;AAGD,UAAA,UAAU,CAAC,OAAX,GAAqB;AACnB,YAAA,OAAO,EAAE,CADU;AAEnB,YAAA,SAAS,EAAE,aAAa,CAAC,WAAd,EAFQ;AAGnB,YAAA,OAAO,EAAE,WAAW,CAAC,WAAZ,EAHU;AAInB,YAAA,QAAQ,EAAE,qBAAqB,CAAC,QAAD,CAJZ;AAKnB,YAAA,SAAS,EAAE;AACT,cAAA,SAAS,EAAE,aAAa,CAAC,GAAd,CAAkB,YAAY,IAAG;AAC1C,sBAAM,WAAW,GAAG,qBAAqB,CACvC,YAAY,CAAC,WAD0B,CAAzC;AAGA,sBAAM,QAAQ,GAAG,YAAY,CAAC,SAAb,GACb,qBAAqB,CAAC,YAAY,CAAC,SAAd,CAArB,GAAgD,WADnC,GAEb,CAFJ;AAGA,uBAAO;AACL,kBAAA,IAAI,EAAE,CAAC,GAAG,SAAA,CAAA,mBAAA,CAAoB,YAAY,CAAC,IAAjC,CAAJ,CADD;AAEL,kBAAA,UAAU,EAAE,YAAY,CAAC,UAAb,CAAwB,QAAxB,EAFP;AAGL,kBAAA,SAAS,EAAE,YAAY,CAAC,SAHnB;AAIL,kBAAA,UAAU,EAAE,YAAY,CAAC,UAAb,CAAwB,QAAxB,EAJP;AAKL,kBAAA,WALK;AAML,kBAAA;AANK,iBAAP;AAQD,eAfU;AADF;AALQ,WAArB;AAwBD;;AAlFI,OAAP;AAoFD;;AA7FuE,GAA3B,CAAzB;AAAA,CAAT;;AA6Gb,SAAS,qBAAT,CAA+B,MAA/B,EAAyD;AACvD,SAAO,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,GAAkB,MAAM,CAAC,CAAD,CAA/B;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.plugin = void 0;\nconst graphql_1 = require(\"graphql\");\nconst { name: PACKAGE_NAME } = require(\"../package.json\");\nexports.plugin = (_futureOptions = {}) => () => ({\n    requestDidStart() {\n        const startWallTime = new Date();\n        let endWallTime;\n        const startHrTime = process.hrtime();\n        let duration;\n        const resolverCalls = [];\n        return {\n            executionDidStart: () => ({\n                executionDidEnd: () => {\n                    duration = process.hrtime(startHrTime);\n                    endWallTime = new Date();\n                },\n                willResolveField({ info }) {\n                    const resolverCall = {\n                        path: info.path,\n                        fieldName: info.fieldName,\n                        parentType: info.parentType,\n                        returnType: info.returnType,\n                        startOffset: process.hrtime(startHrTime),\n                    };\n                    resolverCalls.push(resolverCall);\n                    return () => {\n                        resolverCall.endOffset = process.hrtime(startHrTime);\n                    };\n                },\n            }),\n            willSendResponse({ response }) {\n                if (typeof endWallTime === 'undefined' ||\n                    typeof duration === 'undefined') {\n                    return;\n                }\n                const extensions = response.extensions || (response.extensions = Object.create(null));\n                if (typeof extensions.tracing !== 'undefined') {\n                    throw new Error(PACKAGE_NAME + \": Could not add `tracing` to \" +\n                        \"`extensions` since `tracing` was unexpectedly already present.\");\n                }\n                extensions.tracing = {\n                    version: 1,\n                    startTime: startWallTime.toISOString(),\n                    endTime: endWallTime.toISOString(),\n                    duration: durationHrTimeToNanos(duration),\n                    execution: {\n                        resolvers: resolverCalls.map(resolverCall => {\n                            const startOffset = durationHrTimeToNanos(resolverCall.startOffset);\n                            const duration = resolverCall.endOffset\n                                ? durationHrTimeToNanos(resolverCall.endOffset) - startOffset\n                                : 0;\n                            return {\n                                path: [...graphql_1.responsePathAsArray(resolverCall.path)],\n                                parentType: resolverCall.parentType.toString(),\n                                fieldName: resolverCall.fieldName,\n                                returnType: resolverCall.returnType.toString(),\n                                startOffset,\n                                duration,\n                            };\n                        }),\n                    },\n                };\n            },\n        };\n    },\n});\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}