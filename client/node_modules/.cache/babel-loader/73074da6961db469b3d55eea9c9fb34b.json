{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\n\nvar _1 = require(\".\"); // takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\n\n\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n  version: '0.7.0',\n  url: 'https://github.com/apollostack/graphql-tools/issues/140'\n}, function (schema, connectors) {\n  if (!schema || !(schema instanceof graphql_1.GraphQLSchema)) {\n    throw new Error('schema must be an instance of GraphQLSchema. ' + 'This error could be caused by installing more than one version of GraphQL-JS');\n  }\n\n  if (typeof connectors !== 'object') {\n    var connectorType = typeof connectors;\n    throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n  }\n\n  if (Object.keys(connectors).length === 0) {\n    throw new Error('Expected connectors to not be an empty object');\n  }\n\n  if (Array.isArray(connectors)) {\n    throw new Error('Expected connectors to be of type object, got Array');\n  }\n\n  if (schema['_apolloConnectorsAttached']) {\n    throw new Error('Connectors already attached to context, cannot attach more than once');\n  }\n\n  schema['_apolloConnectorsAttached'] = true;\n\n  var attachconnectorFn = function (root, args, ctx) {\n    if (typeof ctx !== 'object') {\n      // if in any way possible, we should throw an error when the attachconnectors\n      // function is called, not when a query is executed.\n      var contextType = typeof ctx;\n      throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n    }\n\n    if (typeof ctx.connectors === 'undefined') {\n      ctx.connectors = {};\n    }\n\n    Object.keys(connectors).forEach(function (connectorName) {\n      var connector = connectors[connectorName];\n\n      if (!!connector.prototype) {\n        ctx.connectors[connectorName] = new connector(ctx);\n      } else {\n        throw new Error(\"Connector must be a function or an class\");\n      }\n    });\n    return root;\n  };\n\n  _1.addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.default = attachConnectorsToContext;","map":{"version":3,"sources":["../../src/generate/attachConnectorsToContext.ts"],"names":[],"mappings":";;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAA,sBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAIA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA,C,CAEA;AACA;AACA;AACA;;;AACA,IAAM,yBAAyB,GAAG,sBAAA,CAAA,UAAA,CAChC;AACE,EAAA,OAAO,EAAE,OADX;AAEE,EAAA,GAAG,EAAE;AAFP,CADgC,EAKhC,UAAS,MAAT,EAAgC,UAAhC,EAAuD;AACrD,MAAI,CAAC,MAAD,IAAW,EAAE,MAAM,YAAY,SAAA,CAAA,aAApB,CAAf,EAAmD;AACjD,UAAM,IAAI,KAAJ,CACJ,kDACE,8EAFE,CAAN;AAID;;AAED,MAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,QAAM,aAAa,GAAG,OAAO,UAA7B;AACA,UAAM,IAAI,KAAJ,CACJ,mDAAiD,aAD7C,CAAN;AAGD;;AACD,MAAI,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,MAAI,KAAK,CAAC,OAAN,CAAc,UAAd,CAAJ,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,MAAI,MAAM,CAAC,2BAAD,CAAV,EAAyC;AACvC,UAAM,IAAI,KAAJ,CACJ,sEADI,CAAN;AAGD;;AACD,EAAA,MAAM,CAAC,2BAAD,CAAN,GAAsC,IAAtC;;AACA,MAAM,iBAAiB,GAAmC,UACxD,IADwD,EAExD,IAFwD,EAGxD,GAHwD,EAGhD;AAER,QAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA;AACA,UAAM,WAAW,GAAG,OAAO,GAA3B;AACA,YAAM,IAAI,KAAJ,CACJ,+DAA6D,WADzD,CAAN;AAGD;;AACD,QAAI,OAAO,GAAG,CAAC,UAAX,KAA0B,WAA9B,EAA2C;AACzC,MAAA,GAAG,CAAC,UAAJ,GAAiB,EAAjB;AACD;;AACD,IAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAA,aAAA,EAAa;AAC3C,UAAI,SAAS,GAAe,UAAU,CAAC,aAAD,CAAtC;;AACA,UAAI,CAAC,CAAC,SAAS,CAAC,SAAhB,EAA2B;AACzB,QAAA,GAAG,CAAC,UAAJ,CAAe,aAAf,IAAgC,IAAoB,SAApB,CAA+B,GAA/B,CAAhC;AACD,OAFD,MAEO;AACL,cAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACD;AACF,KAPD;AAQA,WAAO,IAAP;AACD,GAzBD;;AA0BA,EAAA,EAAA,CAAA,6BAAA,CAA8B,MAA9B,EAAsC,iBAAtC;AACD,CA1D+B,CAAlC;AA6DA,OAAA,CAAA,OAAA,GAAe,yBAAf","sourceRoot":"","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nvar graphql_1 = require(\"graphql\");\nvar deprecated_decorator_1 = require(\"deprecated-decorator\");\nvar _1 = require(\".\");\n// takes a GraphQL-JS schema and an object of connectors, then attaches\n// the connectors to the context by wrapping each query or mutation resolve\n// function with a function that attaches connectors if they don't exist.\n// attaches connectors only once to make sure they are singletons\nvar attachConnectorsToContext = deprecated_decorator_1.deprecated({\n    version: '0.7.0',\n    url: 'https://github.com/apollostack/graphql-tools/issues/140',\n}, function (schema, connectors) {\n    if (!schema || !(schema instanceof graphql_1.GraphQLSchema)) {\n        throw new Error('schema must be an instance of GraphQLSchema. ' +\n            'This error could be caused by installing more than one version of GraphQL-JS');\n    }\n    if (typeof connectors !== 'object') {\n        var connectorType = typeof connectors;\n        throw new Error(\"Expected connectors to be of type object, got \" + connectorType);\n    }\n    if (Object.keys(connectors).length === 0) {\n        throw new Error('Expected connectors to not be an empty object');\n    }\n    if (Array.isArray(connectors)) {\n        throw new Error('Expected connectors to be of type object, got Array');\n    }\n    if (schema['_apolloConnectorsAttached']) {\n        throw new Error('Connectors already attached to context, cannot attach more than once');\n    }\n    schema['_apolloConnectorsAttached'] = true;\n    var attachconnectorFn = function (root, args, ctx) {\n        if (typeof ctx !== 'object') {\n            // if in any way possible, we should throw an error when the attachconnectors\n            // function is called, not when a query is executed.\n            var contextType = typeof ctx;\n            throw new Error(\"Cannot attach connector because context is not an object: \" + contextType);\n        }\n        if (typeof ctx.connectors === 'undefined') {\n            ctx.connectors = {};\n        }\n        Object.keys(connectors).forEach(function (connectorName) {\n            var connector = connectors[connectorName];\n            if (!!connector.prototype) {\n                ctx.connectors[connectorName] = new connector(ctx);\n            }\n            else {\n                throw new Error(\"Connector must be a function or an class\");\n            }\n        });\n        return root;\n    };\n    _1.addSchemaLevelResolveFunction(schema, attachconnectorFn);\n});\nexports.default = attachConnectorsToContext;\n//# sourceMappingURL=attachConnectorsToContext.js.map"]},"metadata":{},"sourceType":"script"}