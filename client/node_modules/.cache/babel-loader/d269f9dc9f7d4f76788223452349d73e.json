{"ast":null,"code":"var RetryOperation = require('./retry_operation');\n\nexports.operation = function (options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n    forever: options && (options.forever || options.retries === Infinity),\n    unref: options && options.unref,\n    maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function (options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  } // sort the array numerically ascending\n\n\n  timeouts.sort(function (a, b) {\n    return a - b;\n  });\n  return timeouts;\n};\n\nexports.createTimeout = function (attempt, opts) {\n  var random = opts.randomize ? Math.random() + 1 : 1;\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n  return timeout;\n};\n\nexports.wrap = function (obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op = exports.operation(options);\n      var args = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n      args.push(function (err) {\n        if (op.retry(err)) {\n          return;\n        }\n\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n\n        callback.apply(this, arguments);\n      });\n      op.attempt(function () {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n\n    obj[method].options = options;\n  }\n};","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/node_modules/retry/lib/retry.js"],"names":["RetryOperation","require","exports","operation","options","timeouts","forever","retries","Infinity","unref","maxRetryTime","Array","concat","opts","factor","minTimeout","maxTimeout","randomize","key","Error","i","push","createTimeout","length","sort","a","b","attempt","random","Math","timeout","round","max","pow","min","wrap","obj","methods","method","original","retryWrapper","op","args","prototype","slice","call","arguments","callback","pop","err","retry","mainError","apply","bind"],"mappings":"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","sourcesContent":["var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}