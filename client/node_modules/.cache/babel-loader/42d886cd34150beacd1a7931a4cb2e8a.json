{"ast":null,"code":"import { processRequest as defaultProcessRequest } from './processRequest';\nexport const graphqlUploadExpress = function () {\n  let {\n    processRequest = defaultProcessRequest,\n    ...processRequestOptions\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (request, response, next) => {\n    if (!request.is('multipart/form-data')) return next();\n    const finished = new Promise(resolve => request.on('end', resolve));\n    const {\n      send\n    } = response;\n\n    response.send = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      finished.then(() => {\n        response.send = send;\n        response.send(...args);\n      });\n    };\n\n    processRequest(request, response, processRequestOptions).then(body => {\n      request.body = body;\n      next();\n    }).catch(error => {\n      if (error.status && error.expose) response.status(error.status);\n      next(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Sallam/Desktop/projects/next-step/server/node_modules/@apollographql/graphql-upload-8-fork/lib/graphqlUploadExpress.mjs"],"names":["processRequest","defaultProcessRequest","graphqlUploadExpress","processRequestOptions","request","response","next","is","finished","Promise","resolve","on","send","args","then","body","catch","error","status","expose"],"mappings":"AAAA,SAASA,cAAc,IAAIC,qBAA3B,QAAwD,kBAAxD;AACA,OAAO,MAAMC,oBAAoB,GAAG;AAAA,MAAC;AACnCF,IAAAA,cAAc,GAAGC,qBADkB;AAEnC,OAAGE;AAFgC,GAAD,uEAGhC,EAHgC;AAAA,SAGzB,CAACC,OAAD,EAAUC,QAAV,EAAoBC,IAApB,KAA6B;AACtC,QAAI,CAACF,OAAO,CAACG,EAAR,CAAW,qBAAX,CAAL,EAAwC,OAAOD,IAAI,EAAX;AACxC,UAAME,QAAQ,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAIN,OAAO,CAACO,EAAR,CAAW,KAAX,EAAkBD,OAAlB,CAAvB,CAAjB;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAWP,QAAjB;;AAEAA,IAAAA,QAAQ,CAACO,IAAT,GAAgB,YAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAC3BL,MAAAA,QAAQ,CAACM,IAAT,CAAc,MAAM;AAClBT,QAAAA,QAAQ,CAACO,IAAT,GAAgBA,IAAhB;AACAP,QAAAA,QAAQ,CAACO,IAAT,CAAc,GAAGC,IAAjB;AACD,OAHD;AAID,KALD;;AAOAb,IAAAA,cAAc,CAACI,OAAD,EAAUC,QAAV,EAAoBF,qBAApB,CAAd,CACGW,IADH,CACQC,IAAI,IAAI;AACZX,MAAAA,OAAO,CAACW,IAAR,GAAeA,IAAf;AACAT,MAAAA,IAAI;AACL,KAJH,EAKGU,KALH,CAKSC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACC,MAAN,IAAgBD,KAAK,CAACE,MAA1B,EAAkCd,QAAQ,CAACa,MAAT,CAAgBD,KAAK,CAACC,MAAtB;AAClCZ,MAAAA,IAAI,CAACW,KAAD,CAAJ;AACD,KARH;AASD,GAxBmC;AAAA,CAA7B","sourcesContent":["import { processRequest as defaultProcessRequest } from './processRequest'\nexport const graphqlUploadExpress = ({\n  processRequest = defaultProcessRequest,\n  ...processRequestOptions\n} = {}) => (request, response, next) => {\n  if (!request.is('multipart/form-data')) return next()\n  const finished = new Promise(resolve => request.on('end', resolve))\n  const { send } = response\n\n  response.send = (...args) => {\n    finished.then(() => {\n      response.send = send\n      response.send(...args)\n    })\n  }\n\n  processRequest(request, response, processRequestOptions)\n    .then(body => {\n      request.body = body\n      next()\n    })\n    .catch(error => {\n      if (error.status && error.expose) response.status(error.status)\n      next(error)\n    })\n}\n"]},"metadata":{},"sourceType":"module"}