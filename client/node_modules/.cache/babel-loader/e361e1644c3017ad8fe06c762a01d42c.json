{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphqlExpress = void 0;\n\nconst apollo_server_core_1 = require(\"apollo-server-core\");\n\nfunction graphqlExpress(options) {\n  if (!options) {\n    throw new Error('Apollo Server requires options.');\n  }\n\n  if (arguments.length > 1) {\n    throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`);\n  }\n\n  return (req, res, next) => {\n    apollo_server_core_1.runHttpQuery([req, res], {\n      method: req.method,\n      options: options,\n      query: req.method === 'POST' ? req.body : req.query,\n      request: apollo_server_core_1.convertNodeHttpToRequest(req)\n    }).then(_ref => {\n      let {\n        graphqlResponse,\n        responseInit\n      } = _ref;\n\n      if (responseInit.headers) {\n        for (const [name, value] of Object.entries(responseInit.headers)) {\n          res.setHeader(name, value);\n        }\n      }\n\n      if (typeof res.send === 'function') {\n        res.send(graphqlResponse);\n      } else {\n        res.end(graphqlResponse);\n      }\n    }, error => {\n      if ('HttpQueryError' !== error.name) {\n        return next(error);\n      }\n\n      if (error.headers) {\n        for (const [name, value] of Object.entries(error.headers)) {\n          res.setHeader(name, value);\n        }\n      }\n\n      res.statusCode = error.statusCode;\n\n      if (typeof res.send === 'function') {\n        res.send(error.message);\n      } else {\n        res.end(error.message);\n      }\n    });\n  };\n}\n\nexports.graphqlExpress = graphqlExpress;","map":{"version":3,"sources":["../src/expressApollo.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAiBA,SAAgB,cAAhB,CACE,OADF,EACyD;AAEvD,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,MAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAI,KAAJ,CACJ,mDAAmD,SAAS,CAAC,MAAM,EAD/D,CAAN;AAGD;;AAED,SAAO,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,KAAyB;AAC9B,IAAA,oBAAA,CAAA,YAAA,CAAa,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB;AACvB,MAAA,MAAM,EAAE,GAAG,CAAC,MADW;AAEvB,MAAA,OAAO,EAAE,OAFc;AAGvB,MAAA,KAAK,EAAE,GAAG,CAAC,MAAJ,KAAe,MAAf,GAAwB,GAAG,CAAC,IAA5B,GAAmC,GAAG,CAAC,KAHvB;AAIvB,MAAA,OAAO,EAAE,oBAAA,CAAA,wBAAA,CAAyB,GAAzB;AAJc,KAAzB,EAKG,IALH,CAME,QAAsC;AAAA,UAArC;AAAE,QAAA,eAAF;AAAmB,QAAA;AAAnB,OAAqC;;AACpC,UAAI,YAAY,CAAC,OAAjB,EAA0B;AACxB,aAAK,MAAM,CAAC,IAAD,EAAO,KAAP,CAAX,IAA4B,MAAM,CAAC,OAAP,CAAe,YAAY,CAAC,OAA5B,CAA5B,EAAkE;AAChE,UAAA,GAAG,CAAC,SAAJ,CAAc,IAAd,EAAoB,KAApB;AACD;AACF;;AAID,UAAI,OAAO,GAAG,CAAC,IAAX,KAAoB,UAAxB,EAAoC;AAClC,QAAA,GAAG,CAAC,IAAJ,CAAS,eAAT;AACD,OAFD,MAEO;AACL,QAAA,GAAG,CAAC,GAAJ,CAAQ,eAAR;AACD;AACF,KApBH,EAqBG,KAAD,IAA0B;AACxB,UAAI,qBAAqB,KAAK,CAAC,IAA/B,EAAqC;AACnC,eAAO,IAAI,CAAC,KAAD,CAAX;AACD;;AAED,UAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,aAAK,MAAM,CAAC,IAAD,EAAO,KAAP,CAAX,IAA4B,MAAM,CAAC,OAAP,CAAe,KAAK,CAAC,OAArB,CAA5B,EAA2D;AACzD,UAAA,GAAG,CAAC,SAAJ,CAAc,IAAd,EAAoB,KAApB;AACD;AACF;;AAED,MAAA,GAAG,CAAC,UAAJ,GAAiB,KAAK,CAAC,UAAvB;;AACA,UAAI,OAAO,GAAG,CAAC,IAAX,KAAoB,UAAxB,EAAoC;AAGlC,QAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,CAAC,OAAf;AACD,OAJD,MAIO;AACL,QAAA,GAAG,CAAC,GAAJ,CAAQ,KAAK,CAAC,OAAd;AACD;AACF,KAxCH;AA0CD,GA3CD;AA4CD;;AAzDD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.graphqlExpress = void 0;\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nfunction graphqlExpress(options) {\n    if (!options) {\n        throw new Error('Apollo Server requires options.');\n    }\n    if (arguments.length > 1) {\n        throw new Error(`Apollo Server expects exactly one argument, got ${arguments.length}`);\n    }\n    return (req, res, next) => {\n        apollo_server_core_1.runHttpQuery([req, res], {\n            method: req.method,\n            options: options,\n            query: req.method === 'POST' ? req.body : req.query,\n            request: apollo_server_core_1.convertNodeHttpToRequest(req),\n        }).then(({ graphqlResponse, responseInit }) => {\n            if (responseInit.headers) {\n                for (const [name, value] of Object.entries(responseInit.headers)) {\n                    res.setHeader(name, value);\n                }\n            }\n            if (typeof res.send === 'function') {\n                res.send(graphqlResponse);\n            }\n            else {\n                res.end(graphqlResponse);\n            }\n        }, (error) => {\n            if ('HttpQueryError' !== error.name) {\n                return next(error);\n            }\n            if (error.headers) {\n                for (const [name, value] of Object.entries(error.headers)) {\n                    res.setHeader(name, value);\n                }\n            }\n            res.statusCode = error.statusCode;\n            if (typeof res.send === 'function') {\n                res.send(error.message);\n            }\n            else {\n                res.end(error.message);\n            }\n        });\n    };\n}\nexports.graphqlExpress = graphqlExpress;\n//# sourceMappingURL=expressApollo.js.map"]},"metadata":{},"sourceType":"script"}